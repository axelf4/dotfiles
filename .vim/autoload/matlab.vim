" Vim completion script
" Language: MATLAB
" Maintainer: Axel Forsman (axelsfor@gmail.com)

function! s:Includeexpr(fname) abort
	return substitute(a:fname, '\(\w\+\)\.', '+\1/', 'g')
endfunction

function! matlab#Tagfunc(pattern, flags, info) abort
	" See https://se.mathworks.com/help/matlab/matlab_prog/function-precedence-order.html

	let result = []

	let pattern = match(a:flags, 'c\|i') isnot -1
				\ ? matchstr(getline('.'), '[0-9A-Za-z.]*\%' . col('.') . 'c[0-9A-Za-z.]*')
				\ : a:pattern
	let isonlyident = pattern !~# '\.'

	" Find imports
	let imports = []
	call cursor(1, 1)
	while search(&include . '\s\+', 'eW') isnot 0
		call extend(imports, split(getline('.')[col('.'):]))
		normal j
	endwhile

	for import in add(map(filter(imports,
				\ {i, v -> v =~# '\.\*' || isonlyident && v =~# '\.' . pattern . '$'}),
				\ {i, v -> strpart(v, 0, strridx(v, '.') + 1)}),
				\ '')
		let name = s:Includeexpr(import . pattern)
		if match(a:flags, 'i') isnot -1 | let name .= '*' | endif
		let name .= '.m'
		call extend(result, map(extend(
					\ glob(substitute(name, '/\zs.*\ze\.m$', '@&/&', ''), v:false, v:true),
					\ glob(name, v:false, v:true)),
					\ {i, v -> {'name': a:pattern, 'filename': v, 'cmd': '1'}}))
	endfor

	if isonlyident
		if search('function\s\+' . pattern) != 0
			call add(result, {'name': pattern, 'filename': a:info.buf_ffname, 'cmd': string(line('.'))})
		endif
	endif

	echom result

	return result
endfunction

" Vim completion function for MATLAB function names.
function! matlab#CompleteMatlab(findstart, base) abort
	if a:findstart
		" A valid MATLAB identifier is a character vector of alphanumerics
		" (A–Z, a–z, 0–9) and underscores, such that the first character is a letter
		let col = match(getline('.')[:col('.')], '\%(\a\w*\)\?$')
		" If no ident found: Return -2 to cancel silently and stay in completion mode.
		return col != -1 ? col : -2
	else
		let len = strlen(a:base)
		return map(filter(copy(s:functions), {k, v -> strpart(v.word, 0, len) ==# a:base}),
					\ {k, v -> extend(v, {'kind': 'f'})})
	endif
endfunction

" List of MATLAB functions to complete.
"
" See: https://mathworks.com/help/matlab/referencelist.html?type=function&listtype=alpha
let s:functions = [
			\ {'word': 'abs', 'info': 'Absolute value and complex magnitude'},
			\ {'word': 'accumarray', 'info': 'Construct array with accumulation'},
			\ {'word': 'acos', 'info': 'Inverse cosine in radians'},
			\ {'word': 'acosd', 'info': 'Inverse cosine in degrees'},
			\ {'word': 'acosh', 'info': 'Inverse hyperbolic cosine'},
			\ {'word': 'acot', 'info': 'Inverse cotangent in radians'},
			\ {'word': 'acotd', 'info': 'Inverse cotangent in degrees'},
			\ {'word': 'acoth', 'info': 'Inverse hyperbolic cotangent'},
			\ {'word': 'acsc', 'info': 'Inverse cosecant in radians'},
			\ {'word': 'acscd', 'info': 'Inverse cosecant in degrees'},
			\ {'word': 'acsch', 'info': 'Inverse hyperbolic cosecant'},
			\ {'word': 'actxcontrol', 'info': 'Create Microsoft ActiveX control in figure window'},
			\ {'word': 'actxcontrollist', 'info': 'List currently installed Microsoft ActiveX controls'},
			\ {'word': 'actxcontrolselect', 'info': 'Create Microsoft ActiveX control from UI'},
			\ {'word': 'actxGetRunningServer', 'info': 'Handle to running instance of MATLAB Automation server'},
			\ {'word': 'actxserver', 'info': 'Create COM server'},
			\ {'word': 'add', 'info': 'Add single key-value pair to KeyValueStore'},
			\ {'word': 'addboundary', 'info': 'Add polyshape boundary'},
			\ {'word': 'addcats', 'info': 'Add categories to categorical array'},
			\ {'word': 'addCause', 'info': 'Record additional causes of exception'},
			\ {'word': 'addClass', 'info': 'Add class to library definition'},
			\ {'word': 'addCondition', 'info': 'Add condition to condition list'},
			\ {'word': 'addConditionsFrom', 'info': 'Add condition from another ConstraintDiagnostic to condition list'},
			\ {'word': 'addConstructor', 'info': 'Add constructor to C++ class definition'},
			\ {'word': 'addCorrection', 'info': 'Provide suggested fix for exception'},
			\ {'word': 'addedge', 'info': 'Add new edge to graph'},
			\ {'word': 'addevent', 'info': 'Add event to timeseries'},
			\ {'word': 'addFields', 'info': 'Add fields to HeaderField array'},
			\ {'word': 'addFields', 'info': 'Add fields to message header'},
			\ {'word': 'addFile', 'info': 'Add file or folder to project'},
			\ {'word': 'addFolderIncludingChildFiles', 'info': 'Add folder and child files to project'},
			\ {'word': 'addFunction', 'info': 'Add function to library definition'},
			\ {'word': 'addLabel', 'info': 'Attach label to project file'},
			\ {'word': 'addlistener', 'info': 'Create event listener bound to event source'},
			\ {'word': 'addMethod', 'info': 'Add method to C++ class definition'},
			\ {'word': 'addmulti', 'info': 'Add multiple key-value pairs to KeyValueStore'},
			\ {'word': 'addnode', 'info': 'Add new node to graph'},
			\ {'word': 'addOptional', 'info': 'Add optional, positional argument into input parser scheme'},
			\ {'word': 'addParameter', 'info': 'Add optional name-value pair argument into input parser scheme'},
			\ {'word': 'addParamValue', 'info': '(Not recommended) Add optional name-value pair argument into input parser scheme'},
			\ {'word': 'addPath', 'info': 'Add folder to project path'},
			\ {'word': 'addpath', 'info': 'Add folders to search path'},
			\ {'word': 'addPlugin', 'info': 'Add plugin to TestRunner object'},
			\ {'word': 'addpoints', 'info': 'Add points to animated line'},
			\ {'word': 'addpref', 'info': 'Add custom preference'},
			\ {'word': 'addprop', 'info': 'Add custom properties to table or timetable'},
			\ {'word': 'addprop', 'info': 'Add dynamic property'},
			\ {'word': 'addproperty', 'info': 'Add custom property to COM object'},
			\ {'word': 'addProperty', 'info': 'Add property to C++ class definition'},
			\ {'word': 'addReference', 'info': 'Add referenced project to project'},
			\ {'word': 'addRequired', 'info': 'Add required, positional argument into input parser scheme'},
			\ {'word': 'addsample', 'info': 'Add data sample to timeseries object'},
			\ {'word': 'addsampletocollection', 'info': 'Add sample to tscollection'},
			\ {'word': 'addShortcut', 'info': 'Add shortcut to project'},
			\ {'word': 'addShutdownFile', 'info': 'Add shutdown file to project'},
			\ {'word': 'addStartupFile', 'info': 'Add startup file to project'},
			\ {'word': 'addTeardown', 'info': 'Dynamically add teardown routine'},
			\ {'word': 'addTeardown', 'info': 'Dynamically add teardown routine'},
			\ {'word': 'addtodate', 'info': 'Modify date number by field'},
			\ {'word': 'addToolbarExplorationButtons', 'info': 'Add data exploration buttons to figure toolbar'},
			\ {'word': 'addts', 'info': 'Add timeseries to tscollection'},
			\ {'word': 'addvars', 'info': 'Add variables to table or timetable'},
			\ {'word': 'adjacency', 'info': 'Graph adjacency matrix'},
			\ {'word': 'airy', 'info': 'Airy Functions'},
			\ {'word': 'align', 'info': 'Align UI components and graphics objects'},
			\ {'word': 'alim', 'info': 'Set or query axes alpha limits'},
			\ {'word': 'all', 'info': 'Determine if all array elements are nonzero or true'},
			\ {'word': 'allchild', 'info': 'Find all children of specified objects'},
			\ {'word': 'allowModelReferenceDiscreteSampleTimeInheritanceImpl', 'info': 'Model reference sample time inheritance status for discrete sample times'},
			\ {'word': 'alpha', 'info': 'Add transparency to objects in axes'},
			\ {'word': 'alphamap', 'info': 'Specify figure alphamap (transparency)'},
			\ {'word': 'alphaShape', 'info': 'Polygons and polyhedra from points in 2-D and 3-D'},
			\ {'word': 'alphaSpectrum', 'info': 'Alpha values giving distinct alpha shapes'},
			\ {'word': 'alphaTriangulation', 'info': 'Triangulation that fills alpha shape'},
			\ {'word': 'amd', 'info': 'Approximate minimum degree permutation'},
			\ {'word': 'analyzeCodeCompatibility', 'info': 'Create code compatibility analysis results'},
			\ {'word': 'ancestor', 'info': 'Ancestor of graphics object'},
			\ {'word': 'and', 'info': 'Find logical AND'},
			\ {'word': 'angle', 'info': 'Phase angle'},
			\ {'word': 'animatedline', 'info': 'Create animated line'},
			\ {'word': 'annotation', 'info': 'Create annotations'},
			\ {'word': 'ans', 'info': 'Most recent answer'},
			\ {'word': 'any', 'info': 'Determine if any array elements are nonzero'},
			\ {'word': 'appdesigner', 'info': 'Open App Designer Start Page or existing app file'},
			\ {'word': 'append', 'info': 'Combine strings'},
			\ {'word': 'append', 'info': 'Concatenate timeseries objects in time'},
			\ {'word': 'applyFixture', 'info': 'Set up fixture to delegate work to another fixture'},
			\ {'word': 'applyFixture', 'info': 'Use fixture with TestCase'},
			\ {'word': 'area', 'info': 'Area of 2-D alpha shape'},
			\ {'word': 'area', 'info': 'Area of polyshape'},
			\ {'word': 'area', 'info': 'Filled area 2-D plot'},
			\ {'word': 'array2table', 'info': 'Convert homogeneous array to table'},
			\ {'word': 'array2timetable', 'info': 'Convert homogeneous array to timetable'},
			\ {'word': 'arrayfun', 'info': 'Apply function to each element of array'},
			\ {'word': 'ascii', 'info': 'Set FTP transfer mode to ASCII'},
			\ {'word': 'asec', 'info': 'Inverse secant in radians'},
			\ {'word': 'asecd', 'info': 'Inverse secant in degrees'},
			\ {'word': 'asech', 'info': 'Inverse hyperbolic secant'},
			\ {'word': 'asin', 'info': 'Inverse sine in radians'},
			\ {'word': 'asind', 'info': 'Inverse sine in degrees'},
			\ {'word': 'asinh', 'info': 'Inverse hyperbolic sine'},
			\ {'word': 'assert', 'info': 'Throw error if condition false'},
			\ {'word': 'assertAccessed', 'info': 'Assert that a property was accessed'},
			\ {'word': 'assertCalled', 'info': 'Assert that a method was called with certain input values'},
			\ {'word': 'assertClass', 'info': 'Assert exact class of specified value'},
			\ {'word': 'assertEmpty', 'info': 'Assert value is empty'},
			\ {'word': 'assertEqual', 'info': 'Assert value is equal to specified value'},
			\ {'word': 'assertError', 'info': 'Assert function throws specified exception'},
			\ {'word': 'assertFail', 'info': 'Produce unconditional assertion failure'},
			\ {'word': 'assertFalse', 'info': 'Assert value is false'},
			\ {'word': 'assertGreaterThan', 'info': 'Assert value is greater than specified value'},
			\ {'word': 'assertGreaterThanOrEqual', 'info': 'Assert value is greater than or equal to specified value'},
			\ {'word': 'assertInstanceOf', 'info': 'Assert value is object of specified type'},
			\ {'word': 'assertLength', 'info': 'Assert value has specified length'},
			\ {'word': 'assertLessThan', 'info': 'Assert value is less than specified value'},
			\ {'word': 'assertLessThanOrEqual', 'info': 'Assert value is less than or equal to specified value'},
			\ {'word': 'assertMatches', 'info': 'Assert string matches specified regular expression'},
			\ {'word': 'assertNotAccessed', 'info': 'Assert that a property was not accessed'},
			\ {'word': 'assertNotCalled', 'info': 'Assert that a method was not called with certain input values'},
			\ {'word': 'assertNotEmpty', 'info': 'Assert value is not empty'},
			\ {'word': 'assertNotEqual', 'info': 'Assert value is not equal to specified value'},
			\ {'word': 'assertNotSameHandle', 'info': 'Assert value is not handle to specified instance'},
			\ {'word': 'assertNotSet', 'info': 'Assert that a property was not set'},
			\ {'word': 'assertNumElements', 'info': 'Assert value has specified element count'},
			\ {'word': 'assertReturnsTrue', 'info': 'Assert function returns true when evaluated'},
			\ {'word': 'assertSameHandle', 'info': 'Assert two values are handles to same instance'},
			\ {'word': 'assertSet', 'info': 'Assert that a property was set'},
			\ {'word': 'assertSize', 'info': 'Assert value has specified size'},
			\ {'word': 'assertSubstring', 'info': 'Assert string contains specified string'},
			\ {'word': 'assertThat', 'info': 'Assert that value meets specified constraint'},
			\ {'word': 'assertTrue', 'info': 'Assert value is true'},
			\ {'word': 'assertUsing', 'info': 'Assert that value satisfies given constraint'},
			\ {'word': 'assertWarning', 'info': 'Assert function issues specified warning'},
			\ {'word': 'assertWarningFree', 'info': 'Assert function issues no warnings'},
			\ {'word': 'assignin', 'info': 'Assign value to variable in specified workspace'},
			\ {'word': 'assignOutputsWhen', 'info': 'Define return values for method call or property access'},
			\ {'word': 'assumeAccessed', 'info': 'Assume that a property was accessed'},
			\ {'word': 'assumeCalled', 'info': 'Assume that a method was called with certain input values'},
			\ {'word': 'assumeClass', 'info': 'Assume exact class of specified value'},
			\ {'word': 'assumeEmpty', 'info': 'Assume value is empty'},
			\ {'word': 'assumeEqual', 'info': 'Assume value is equal to specified value'},
			\ {'word': 'assumeError', 'info': 'Assume function throws specified exception'},
			\ {'word': 'assumeFail', 'info': 'Produce unconditional assumption failure'},
			\ {'word': 'assumeFalse', 'info': 'Assume value is false'},
			\ {'word': 'assumeGreaterThan', 'info': 'Assume value is greater than specified value'},
			\ {'word': 'assumeGreaterThanOrEqual', 'info': 'Assume value is greater than or equal to specified value'},
			\ {'word': 'assumeInstanceOf', 'info': 'Assume value is object of specified type'},
			\ {'word': 'assumeLength', 'info': 'Assume value has specified length'},
			\ {'word': 'assumeLessThan', 'info': 'Assume value is less than specified value'},
			\ {'word': 'assumeLessThanOrEqual', 'info': 'Assume value is less than or equal to specified value'},
			\ {'word': 'assumeMatches', 'info': 'Assume string matches specified regular expression'},
			\ {'word': 'assumeNotAccessed', 'info': 'Assume that a property was not accessed'},
			\ {'word': 'assumeNotCalled', 'info': 'Assume that a method was not called with certain input values'},
			\ {'word': 'assumeNotEmpty', 'info': 'Assume value is not empty'},
			\ {'word': 'assumeNotEqual', 'info': 'Assume value is not equal to specified value'},
			\ {'word': 'assumeNotSameHandle', 'info': 'Assume value is not handle to specified instance'},
			\ {'word': 'assumeNotSet', 'info': 'Assume that a property was not set'},
			\ {'word': 'assumeNumElements', 'info': 'Assume value has specified element count'},
			\ {'word': 'assumeReturnsTrue', 'info': 'Assume function returns true when evaluated'},
			\ {'word': 'assumeSameHandle', 'info': 'Assume two values are handles to same instance'},
			\ {'word': 'assumeSet', 'info': 'Assume that a property was set'},
			\ {'word': 'assumeSize', 'info': 'Assume value has specified size'},
			\ {'word': 'assumeSubstring', 'info': 'Assume string contains specified string'},
			\ {'word': 'assumeThat', 'info': 'Assume value meets specified constraint'},
			\ {'word': 'assumeTrue', 'info': 'Assume value is true'},
			\ {'word': 'assumeUsing', 'info': 'Assume that value satisfies given constraint'},
			\ {'word': 'assumeWarning', 'info': 'Assume function issues specified warning'},
			\ {'word': 'assumeWarningFree', 'info': 'Assume function issues no warnings'},
			\ {'word': 'atan', 'info': 'Inverse tangent in radians'},
			\ {'word': 'atan2', 'info': 'Four-quadrant inverse tangent'},
			\ {'word': 'atan2d', 'info': 'Four-quadrant inverse tangent in degrees'},
			\ {'word': 'atand', 'info': 'Inverse tangent in degrees'},
			\ {'word': 'atanh', 'info': 'Inverse hyperbolic tangent'},
			\ {'word': 'audiodevinfo', 'info': 'Information about audio device'},
			\ {'word': 'audioinfo', 'info': 'Information about audio file'},
			\ {'word': 'audioplayer', 'info': 'Object for playing audio'},
			\ {'word': 'audioread', 'info': 'Read audio file'},
			\ {'word': 'audiorecorder', 'info': 'Object for recording audio'},
			\ {'word': 'audiowrite', 'info': 'Write audio file'},
			\ {'word': 'autumn', 'info': 'Autumn colormap array'},
			\ {'word': 'aviinfo', 'info': 'Information about Audio/Video Interleaved (AVI) file'},
			\ {'word': 'axes', 'info': 'Create Cartesian axes'},
			\ {'word': 'axis', 'info': 'Set axis limits and aspect ratios'},
			\ {'word': 'axtoolbar', 'info': 'Create axes toolbar'},
			\ {'word': 'axtoolbarbtn', 'info': 'Add buttons to axes toolbar'},
			\ {'word': 'balance', 'info': 'Diagonal scaling to improve eigenvalue accuracy'},
			\ {'word': 'bandwidth', 'info': 'Lower and upper matrix bandwidth'},
			\ {'word': 'bar', 'info': 'Bar graph'},
			\ {'word': 'bar3', 'info': 'Plot 3-D bar graph'},
			\ {'word': 'bar3h', 'info': 'Plot horizontal 3-D bar graph'},
			\ {'word': 'barh', 'info': 'Plot bar graph horizontally'},
			\ {'word': 'barycentricToCartesian', 'info': 'Convert coordinates from barycentric to Cartesian'},
			\ {'word': 'baryToCart', 'info': '(Not recommended) Convert point coordinates from barycentric to Cartesian'},
			\ {'word': 'base2dec', 'info': 'Convert text representing number in base N to decimal number'},
			\ {'word': 'batchStartupOptionUsed', 'info': 'Determine if MATLAB started with -batch option'},
			\ {'word': 'bctree', 'info': 'Block-cut tree graph'},
			\ {'word': 'beep', 'info': 'Produce operating system beep sound'},
			\ {'word': 'BeginInvoke', 'info': 'Initiate asynchronous .NET delegate call'},
			\ {'word': 'bench', 'info': 'MATLAB benchmark'},
			\ {'word': 'besselh', 'info': 'Bessel function of third kind (Hankel function)'},
			\ {'word': 'besseli', 'info': 'Modified Bessel function of first kind'},
			\ {'word': 'besselj', 'info': 'Bessel function of first kind'},
			\ {'word': 'besselk', 'info': 'Modified Bessel function of second kind'},
			\ {'word': 'bessely', 'info': 'Bessel function of second kind'},
			\ {'word': 'beta', 'info': 'Beta function'},
			\ {'word': 'betainc', 'info': 'Incomplete beta function'},
			\ {'word': 'betaincinv', 'info': 'Beta inverse cumulative distribution function'},
			\ {'word': 'betaln', 'info': 'Logarithm of beta function'},
			\ {'word': 'between', 'info': 'Calendar math differences'},
			\ {'word': 'bfsearch', 'info': 'Breadth-first graph search'},
			\ {'word': 'bicg', 'info': 'Biconjugate gradients method'},
			\ {'word': 'bicgstab', 'info': 'Biconjugate gradients stabilized method'},
			\ {'word': 'bicgstabl', 'info': 'Biconjugate gradients stabilized (l) method'},
			\ {'word': 'biconncomp', 'info': 'Biconnected graph components'},
			\ {'word': 'bin2dec', 'info': 'Convert text representation of binary number to decimal number'},
			\ {'word': 'binary', 'info': 'Set FTP transfer mode to binary'},
			\ {'word': 'binscatter', 'info': 'Binned scatter plot'},
			\ {'word': 'bitand', 'info': 'Bit-wise AND'},
			\ {'word': 'bitcmp', 'info': 'Bit-wise complement'},
			\ {'word': 'bitget', 'info': 'Get bit at specified position'},
			\ {'word': 'bitnot', 'info': '.NET enumeration object bit-wise NOT instance method'},
			\ {'word': 'bitor', 'info': 'Bit-wise OR'},
			\ {'word': 'bitset', 'info': 'Set bit at specific location'},
			\ {'word': 'bitshift', 'info': 'Shift bits specified number of places'},
			\ {'word': 'bitxor', 'info': 'Bit-wise XOR'},
			\ {'word': 'blanks', 'info': 'Create character array of blanks'},
			\ {'word': 'blkdiag', 'info': 'Block diagonal matrix'},
			\ {'word': 'bone', 'info': 'Bone colormap array'},
			\ {'word': 'boundary', 'info': 'Boundary of a set of points in 2-D or 3-D'},
			\ {'word': 'boundary', 'info': 'Vertex coordinates of polyshape boundary'},
			\ {'word': 'boundaryFacets', 'info': 'Boundary facets of alpha shape'},
			\ {'word': 'boundaryshape', 'info': 'Create polyshape from 2-D triangulation'},
			\ {'word': 'boundingbox', 'info': 'Bounding box of polyshape'},
			\ {'word': 'bounds', 'info': 'Smallest and largest elements'},
			\ {'word': 'box', 'info': 'Display axes outline'},
			\ {'word': 'break', 'info': 'Terminate execution of for or while loop'},
			\ {'word': 'brighten', 'info': 'Brighten or darken colormap'},
			\ {'word': 'brush', 'info': 'Interactively mark, delete, modify, and save observations in graphs'},
			\ {'word': 'bsxfun', 'info': 'Apply element-wise operation to two arrays with implicit expansion enabled'},
			\ {'word': 'build', 'info': 'Build library interface'},
			\ {'word': 'builddocsearchdb', 'info': 'Build searchable documentation database'},
			\ {'word': 'builtin', 'info': 'Execute built-in function from overloaded method'},
			\ {'word': 'bvp4c', 'info': 'Solve boundary value problem — fourth-order method'},
			\ {'word': 'bvp5c', 'info': 'Solve boundary value problem — fifth-order method'},
			\ {'word': 'bvpget', 'info': 'Extract properties from options structure created with bvpset'},
			\ {'word': 'bvpinit', 'info': 'Form initial guess for boundary value problem solver'},
			\ {'word': 'bvpset', 'info': 'Create or alter options structure of boundary value problem'},
			\ {'word': 'bvpxtend', 'info': 'Form guess structure for extending boundary value solutions'},
			\ {'word': 'caldays', 'info': 'Calendar duration in days'},
			\ {'word': 'caldiff', 'info': 'Calendar math successive differences'},
			\ {'word': 'calendar', 'info': 'Calendar for specified month'},
			\ {'word': 'calendarDuration', 'info': 'Lengths of time in variable-length calendar units'},
			\ {'word': 'calllib', 'info': 'Call function in C shared library'},
			\ {'word': 'callSoapService', 'info': 'Send SOAP (Simple Object Access Protocol) message to endpoint'},
			\ {'word': 'calmonths', 'info': 'Calendar duration in months'},
			\ {'word': 'calquarters', 'info': 'Calendar duration in quarters'},
			\ {'word': 'calweeks', 'info': 'Calendar duration in weeks'},
			\ {'word': 'calyears', 'info': 'Calendar duration in years'},
			\ {'word': 'camdolly', 'info': 'Move camera position and target'},
			\ {'word': 'cameratoolbar', 'info': 'Control camera toolbar programmatically'},
			\ {'word': 'camlight', 'info': 'Create or move light object in camera coordinates'},
			\ {'word': 'camlookat', 'info': 'Position camera to view object or group of objects'},
			\ {'word': 'camorbit', 'info': 'Rotate camera position around camera target'},
			\ {'word': 'campan', 'info': 'Rotate camera target around camera position'},
			\ {'word': 'campos', 'info': 'Set or query camera position'},
			\ {'word': 'camproj', 'info': 'Set or query projection type'},
			\ {'word': 'camroll', 'info': 'Rotate camera about view axis'},
			\ {'word': 'camtarget', 'info': 'Set or query location of camera target'},
			\ {'word': 'camup', 'info': 'Set or query camera up vector'},
			\ {'word': 'camva', 'info': 'Set or query camera view angle'},
			\ {'word': 'camzoom', 'info': 'Zoom in and out on scene'},
			\ {'word': 'cancel', 'info': 'Cancel asynchronous call to MATLAB function from Python'},
			\ {'word': 'cancelled', 'info': 'Cancellation status of asynchronous call to MATLAB function from Python'},
			\ {'word': 'cart2pol', 'info': 'Transform Cartesian coordinates to polar or cylindrical'},
			\ {'word': 'cart2sph', 'info': 'Transform Cartesian coordinates to spherical'},
			\ {'word': 'cartesianToBarycentric', 'info': 'Convert coordinates from Cartesian to barycentric'},
			\ {'word': 'cartToBary', 'info': '(Not recommended) Convert point coordinates from Cartesian to barycentric'},
			\ {'word': 'cast', 'info': 'Cast variable to different data type'},
			\ {'word': 'cat', 'info': 'Concatenate arrays'},
			\ {'word': 'cat', 'info': 'Concatenation for heterogeneous arrays'},
			\ {'word': 'categorical', 'info': 'Array that contains values assigned to categories'},
			\ {'word': 'categories', 'info': 'Categories of categorical array'},
			\ {'word': 'caxis', 'info': 'Set colormap limits'},
			\ {'word': 'cd', 'info': 'Change current folder'},
			\ {'word': 'cd', 'info': 'Change or view current folder on FTP server'},
			\ {'word': 'cdf2rdf', 'info': 'Convert complex diagonal form to real block diagonal form'},
			\ {'word': 'cdfepoch', 'info': 'Convert date text or serial date number to CDF formatted dates'},
			\ {'word': 'cdfinfo', 'info': 'Information about Common Data Format (CDF) file'},
			\ {'word': 'cdflib', 'info': 'Interact directly with CDF library'},
			\ {'word': 'cdflib.close', 'info': 'Close Common Data Format (CDF) file'},
			\ {'word': 'cdflib.closeVar', 'info': 'Close specified variable from multifile format Common Data Format (CDF) file'},
			\ {'word': 'cdflib.computeEpoch', 'info': 'Convert time value to CDF_EPOCH value'},
			\ {'word': 'cdflib.computeEpoch16', 'info': 'Convert time value to CDF_EPOCH16 value'},
			\ {'word': 'cdflib.create', 'info': 'Create Common Data Format (CDF) file'},
			\ {'word': 'cdflib.createAttr', 'info': 'Create attribute'},
			\ {'word': 'cdflib.createVar', 'info': 'Create new variable'},
			\ {'word': 'cdflib.delete', 'info': 'Delete existing Common Data Format (CDF) file'},
			\ {'word': 'cdflib.deleteAttr', 'info': 'Delete attribute'},
			\ {'word': 'cdflib.deleteAttrEntry', 'info': 'Delete attribute entry'},
			\ {'word': 'cdflib.deleteAttrgEntry', 'info': 'Delete entry in global attribute'},
			\ {'word': 'cdflib.deleteVar', 'info': 'Delete variable'},
			\ {'word': 'cdflib.deleteVarRecords', 'info': 'Delete range of records from variable'},
			\ {'word': 'cdflib.epoch16Breakdown', 'info': 'Convert CDF_EPOCH16 value to time value'},
			\ {'word': 'cdflib.epochBreakdown', 'info': 'Convert CDF_EPOCH value into time value'},
			\ {'word': 'cdflib.getAttrEntry', 'info': 'Value of entry in attribute with variable scope'},
			\ {'word': 'cdflib.getAttrgEntry', 'info': 'Value of entry in global attribute'},
			\ {'word': 'cdflib.getAttrMaxEntry', 'info': 'Number of last entry for variable attribute'},
			\ {'word': 'cdflib.getAttrMaxgEntry', 'info': 'Number of last entry for global attribute'},
			\ {'word': 'cdflib.getAttrName', 'info': 'Name of attribute, given attribute number'},
			\ {'word': 'cdflib.getAttrNum', 'info': 'Attribute number, given attribute name'},
			\ {'word': 'cdflib.getAttrScope', 'info': 'Scope of attribute'},
			\ {'word': 'cdflib.getCacheSize', 'info': 'Number of cache buffers used'},
			\ {'word': 'cdflib.getChecksum', 'info': 'Checksum mode'},
			\ {'word': 'cdflib.getCompression', 'info': 'Compression settings'},
			\ {'word': 'cdflib.getCompressionCacheSize', 'info': 'Number of compression cache buffers'},
			\ {'word': 'cdflib.getConstantNames', 'info': 'Names of Common Data Format (CDF) library constants'},
			\ {'word': 'cdflib.getConstantValue', 'info': 'Numeric value corresponding to Common Data Format (CDF) library constant'},
			\ {'word': 'cdflib.getCopyright', 'info': 'Copyright notice in Common Data Format (CDF) file'},
			\ {'word': 'cdflib.getFileBackward', 'info': 'Return current backward compatibility mode setting'},
			\ {'word': 'cdflib.getFormat', 'info': 'Format of Common Data Format (CDF) file'},
			\ {'word': 'cdflib.getLibraryCopyright', 'info': 'Copyright notice of Common Data Format (CDF) library'},
			\ {'word': 'cdflib.getLibraryVersion', 'info': 'Library version and release information'},
			\ {'word': 'cdflib.getMajority', 'info': 'Majority of variables'},
			\ {'word': 'cdflib.getName', 'info': 'Name of Common Data Format (CDF) file'},
			\ {'word': 'cdflib.getNumAttrEntries', 'info': 'Number of entries for attribute with variable scope'},
			\ {'word': 'cdflib.getNumAttrgEntries', 'info': 'Number of entries for attribute with global scope'},
			\ {'word': 'cdflib.getNumAttributes', 'info': 'Number of attributes with variable scope'},
			\ {'word': 'cdflib.getNumgAttributes', 'info': 'Number of attributes with global scope'},
			\ {'word': 'cdflib.getReadOnlyMode', 'info': 'Read-only mode'},
			\ {'word': 'cdflib.getStageCacheSize', 'info': 'Number of cache buffers for staging'},
			\ {'word': 'cdflib.getValidate', 'info': 'Library validation mode'},
			\ {'word': 'cdflib.getVarAllocRecords', 'info': 'Number of records allocated for variable'},
			\ {'word': 'cdflib.getVarBlockingFactor', 'info': 'Blocking factor for variable'},
			\ {'word': 'cdflib.getVarCacheSize', 'info': 'Number of multifile cache buffers'},
			\ {'word': 'cdflib.getVarCompression', 'info': 'Information about compression used by variable'},
			\ {'word': 'cdflib.getVarData', 'info': 'Single value from record in variable'},
			\ {'word': 'cdflib.getVarMaxAllocRecNum', 'info': 'Maximum allocated record number for variable'},
			\ {'word': 'cdflib.getVarMaxWrittenRecNum', 'info': 'Maximum written record number for variable'},
			\ {'word': 'cdflib.getVarName', 'info': 'Variable name, given variable number'},
			\ {'word': 'cdflib.getVarNum', 'info': 'Variable number, given variable name'},
			\ {'word': 'cdflib.getVarNumRecsWritten', 'info': 'Number of records written to variable'},
			\ {'word': 'cdflib.getVarPadValue', 'info': 'Pad value for variable'},
			\ {'word': 'cdflib.getVarRecordData', 'info': 'Entire record for variable'},
			\ {'word': 'cdflib.getVarReservePercent', 'info': 'Compression reserve percentage for variable'},
			\ {'word': 'cdflib.getVarsMaxWrittenRecNum', 'info': 'Maximum written record number for CDF file'},
			\ {'word': 'cdflib.getVarSparseRecords', 'info': 'Information about how variable handles sparse records'},
			\ {'word': 'cdflib.getVersion', 'info': 'Common Data Format (CDF) library version and release information'},
			\ {'word': 'cdflib.hyperGetVarData', 'info': 'Read hyperslab of data from variable'},
			\ {'word': 'cdflib.hyperPutVarData', 'info': 'Write hyperslab of data to variable'},
			\ {'word': 'cdflib.inquire', 'info': 'Basic characteristics of Common Data Format (CDF) file'},
			\ {'word': 'cdflib.inquireAttr', 'info': 'Information about attribute'},
			\ {'word': 'cdflib.inquireAttrEntry', 'info': 'Information about entry in attribute with variable scope'},
			\ {'word': 'cdflib.inquireAttrgEntry', 'info': 'Information about entry in attribute with global scope'},
			\ {'word': 'cdflib.inquireVar', 'info': 'Information about variable'},
			\ {'word': 'cdflib.open', 'info': 'Open existing Common Data Format (CDF) file'},
			\ {'word': 'cdflib.putAttrEntry', 'info': 'Write value to entry in attribute with variable scope'},
			\ {'word': 'cdflib.putAttrgEntry', 'info': 'Write value to entry in attribute with global scope'},
			\ {'word': 'cdflib.putVarData', 'info': 'Write single value to variable'},
			\ {'word': 'cdflib.putVarRecordData', 'info': 'Write entire record to variable'},
			\ {'word': 'cdflib.renameAttr', 'info': 'Rename existing attribute'},
			\ {'word': 'cdflib.renameVar', 'info': 'Rename existing variable'},
			\ {'word': 'cdflib.setCacheSize', 'info': 'Specify number of dotCDF cache buffers'},
			\ {'word': 'cdflib.setChecksum', 'info': 'Specify checksum mode'},
			\ {'word': 'cdflib.setCompression', 'info': 'Specify compression settings'},
			\ {'word': 'cdflib.setCompressionCacheSize', 'info': 'Specify number of compression cache buffers'},
			\ {'word': 'cdflib.setFileBackward', 'info': 'Set backward compatibility mode'},
			\ {'word': 'cdflib.setFormat', 'info': 'Specify format of Common Data Format (CDF) file'},
			\ {'word': 'cdflib.setMajority', 'info': 'Specify majority of variables'},
			\ {'word': 'cdflib.setReadOnlyMode', 'info': 'Specify read-only mode'},
			\ {'word': 'cdflib.setStageCacheSize', 'info': 'Specify number of staging cache buffers for Common Data Format (CDF) file'},
			\ {'word': 'cdflib.setValidate', 'info': 'Specify library validation mode'},
			\ {'word': 'cdflib.setVarAllocBlockRecords', 'info': 'Specify range of records to be allocated for variable'},
			\ {'word': 'cdflib.setVarBlockingFactor', 'info': 'Specify blocking factor for variable'},
			\ {'word': 'cdflib.setVarCacheSize', 'info': 'Specify number of multi-file cache buffers for variable'},
			\ {'word': 'cdflib.setVarCompression', 'info': 'Specify compression settings used with variable'},
			\ {'word': 'cdflib.setVarInitialRecs', 'info': 'Specify initial number of records written to variable'},
			\ {'word': 'cdflib.setVarPadValue', 'info': 'Specify pad value used with variable'},
			\ {'word': 'cdflib.SetVarReservePercent', 'info': 'Specify reserve percentage for variable'},
			\ {'word': 'cdflib.setVarsCacheSize', 'info': 'Specify number of cache buffers used for all variables'},
			\ {'word': 'cdflib.setVarSparseRecords', 'info': 'Specify how variable handles sparse records'},
			\ {'word': 'cdfread', 'info': 'Read data from Common Data Format (CDF) file'},
			\ {'word': 'cdfwrite', 'info': 'Write data to Common Data Format (CDF) file'},
			\ {'word': 'ceil', 'info': 'Round toward positive infinity'},
			\ {'word': 'cell', 'info': 'Cell array'},
			\ {'word': 'cell2mat', 'info': 'Convert cell array to ordinary array of the underlying data type'},
			\ {'word': 'cell2struct', 'info': 'Convert cell array to structure array'},
			\ {'word': 'cell2table', 'info': 'Convert cell array to table'},
			\ {'word': 'celldisp', 'info': 'Display cell array contents'},
			\ {'word': 'cellfun', 'info': 'Apply function to each cell in cell array'},
			\ {'word': 'cellplot', 'info': 'Graphically display structure of cell array'},
			\ {'word': 'cellstr', 'info': 'Convert to cell array of character vectors'},
			\ {'word': 'centrality', 'info': 'Measure node importance'},
			\ {'word': 'centroid', 'info': 'Centroid of polyshape'},
			\ {'word': 'cgs', 'info': 'Conjugate gradients squared method'},
			\ {'word': 'changeFields', 'info': 'Change existing fields in message header'},
			\ {'word': 'changeFields', 'info': 'Change existing values in HeaderField array'},
			\ {'word': 'char', 'info': 'Character array'},
			\ {'word': 'char', 'info': 'Encoded query parameter as character vector'},
			\ {'word': 'checkcode', 'info': 'Check MATLAB code files for possible problems'},
			\ {'word': 'checkin', 'info': '(Has been removed) Check files into source control system (UNIX platforms)'},
			\ {'word': 'checkout', 'info': '(Has been removed) Check files out of source control system (UNIX platforms)'},
			\ {'word': 'chol', 'info': 'Cholesky factorization'},
			\ {'word': 'cholupdate', 'info': 'Rank 1 update to Cholesky factorization'},
			\ {'word': 'choose', 'info': 'Perform choose gesture on UI component'},
			\ {'word': 'circshift', 'info': 'Shift array circularly'},
			\ {'word': 'circumcenter', 'info': 'Circumcenter of triangle or tetrahedron'},
			\ {'word': 'circumcenters', 'info': '(Not recommended) Circumcenters of specified simplices'},
			\ {'word': 'cla', 'info': 'Clear axes'},
			\ {'word': 'clabel', 'info': 'Label contour plot elevation'},
			\ {'word': 'class', 'info': 'Class of object'},
			\ {'word': 'classdef', 'info': 'Class definition keywords'},
			\ {'word': 'classUnderlying', 'info': 'Class of underlying data in tall array'},
			\ {'word': 'clc', 'info': 'Clear Command Window'},
			\ {'word': 'clear', 'info': 'Remove items from workspace, freeing up system memory'},
			\ {'word': 'clear (serial)', 'info': 'Remove serial port object from MATLAB workspace'},
			\ {'word': 'clearAllMemoizedCaches', 'info': 'Clear caches for all MemoizedFunction objects'},
			\ {'word': 'clearCache', 'info': 'Clear cache for MemoizedFunction object'},
			\ {'word': 'clearMockHistory', 'info': 'Clear history of mock object interactions'},
			\ {'word': 'clearPersonalValue', 'info': 'Clear the personal value for a setting'},
			\ {'word': 'clearpoints', 'info': 'Clear points from animated line'},
			\ {'word': 'clearTemporaryValue', 'info': 'Clear the temporary value for a setting'},
			\ {'word': 'clearvars', 'info': 'Clear variables from memory'},
			\ {'word': 'clf', 'info': 'Clear current figure window'},
			\ {'word': 'clibgen.buildInterface', 'info': 'Create interface to C++ library without definition file'},
			\ {'word': 'clibgen.ClassDefinition', 'info': 'Definition for MATLAB class corresponding to C++ class'},
			\ {'word': 'clibgen.ConstructorDefinition', 'info': 'Definition for MATLAB function corresponding to C++ class constructor'},
			\ {'word': 'clibgen.EnumDefinition', 'info': 'Definition for MATLAB enumeration corresponding to C++ enumeration'},
			\ {'word': 'clibgen.FunctionDefinition', 'info': 'Definition for MATLAB function corresponding to C++ package function'},
			\ {'word': 'clibgen.generateLibraryDefinition', 'info': 'Create definition file for C++ library'},
			\ {'word': 'clibgen.LibraryDefinition', 'info': 'MATLAB definition for C++ library'},
			\ {'word': 'clibgen.MethodDefinition', 'info': 'Definition for MATLAB function corresponding to C++ class method'},
			\ {'word': 'clibgen.PropertyDefinition', 'info': 'Definition for MATLAB property corresponding to public property of C++ class'},
			\ {'word': 'clibRelease', 'info': 'Release C++ object from MATLAB'},
			\ {'word': 'clipboard', 'info': 'Copy and paste text to and from system clipboard'},
			\ {'word': 'clock', 'info': 'Current date and time as date vector'},
			\ {'word': 'clone', 'info': 'Create duplicate System object'},
			\ {'word': 'close', 'info': 'Close connection to FTP server'},
			\ {'word': 'close', 'info': 'Close file after writing video data'},
			\ {'word': 'close', 'info': 'Close project'},
			\ {'word': 'close', 'info': 'Close Tiff object'},
			\ {'word': 'close', 'info': 'Remove specified figure'},
			\ {'word': 'closeFile', 'info': 'Close FITS file'},
			\ {'word': 'closereq', 'info': 'Default figure close request function'},
			\ {'word': 'cmopts', 'info': '(Has been removed) Name of source control system'},
			\ {'word': 'cmpermute', 'info': 'Rearrange colors in colormap'},
			\ {'word': 'cmunique', 'info': 'Eliminate duplicate colors in colormap; convert grayscale or truecolor image to indexed image'},
			\ {'word': 'CodeCompatibilityAnalysis', 'info': 'Code compatibility analysis results'},
			\ {'word': 'codeCompatibilityReport', 'info': 'Create code compatibility report'},
			\ {'word': 'colamd', 'info': 'Column approximate minimum degree permutation'},
			\ {'word': 'collapse', 'info': 'Collapse tree node'},
			\ {'word': 'colon', 'info': 'Vector creation, array subscripting, and for-loop iteration'},
			\ {'word': 'colorbar', 'info': 'Colorbar showing color scale'},
			\ {'word': 'colorcube', 'info': 'Colorcube colormap array'},
			\ {'word': 'colordef', 'info': 'Set default property values to display different color schemes'},
			\ {'word': 'colormap', 'info': 'View and set current colormap'},
			\ {'word': 'ColorSpec (Color Specification)', 'info': 'Color specification'},
			\ {'word': 'colperm', 'info': 'Sparse column permutation based on nonzero count'},
			\ {'word': 'COM', 'info': 'Access COM components and ActiveX controls from MATLAB'},
			\ {'word': 'com.mathworks.engine.MatlabEngine', 'info': 'Java class using MATLAB as a computational engine'},
			\ {'word': 'com.mathworks.matlab.types.CellStr', 'info': 'Java class to represent MATLAB cell array of char vectors'},
			\ {'word': 'com.mathworks.matlab.types.Complex', 'info': 'Java class to pass complex data to and from MATLAB'},
			\ {'word': 'com.mathworks.matlab.types.HandleObject', 'info': 'Java class to represent MATLAB handle objects'},
			\ {'word': 'com.mathworks.matlab.types.Struct', 'info': 'Java class to pass MATLAB struct to and from MATLAB'},
			\ {'word': 'combine', 'info': 'Combine data from multiple datastores'},
			\ {'word': 'Combine', 'info': 'Convenience function for static .NET System.Delegate Combine method'},
			\ {'word': 'CombinedDatastore', 'info': 'Datastore to combine data read from multiple underlying datastores'},
			\ {'word': 'comet', 'info': '2-D comet plot'},
			\ {'word': 'comet3', 'info': '3-D comet plot'},
			\ {'word': 'compan', 'info': 'Companion matrix'},
			\ {'word': 'compass', 'info': 'Plot arrows emanating from origin'},
			\ {'word': 'complete', 'info': 'Complete HTTP header for ContentProvider'},
			\ {'word': 'complete', 'info': 'Complete HTTP header for ImageProvider'},
			\ {'word': 'complete', 'info': 'Complete HTTP header for JSONProvider'},
			\ {'word': 'complete', 'info': 'Complete HTTP header for MultipartProvider'},
			\ {'word': 'complete', 'info': 'Complete HTTP header for StringProvider'},
			\ {'word': 'complete', 'info': 'Process or reprocess response payload Content-Type'},
			\ {'word': 'complete', 'info': 'Validate and complete HTTP request message without sending'},
			\ {'word': 'complex', 'info': 'Create complex array'},
			\ {'word': 'compose', 'info': 'Format data into multiple strings'},
			\ {'word': 'computer', 'info': 'Information about computer on which MATLAB is running'},
			\ {'word': 'cond', 'info': 'Condition number for inversion'},
			\ {'word': 'condeig', 'info': 'Condition number with respect to eigenvalues'},
			\ {'word': 'condensation', 'info': 'Graph condensation'},
			\ {'word': 'condest', 'info': '1-norm condition number estimate'},
			\ {'word': 'coneplot', 'info': 'Plot velocity vectors as cones in 3-D vector field'},
			\ {'word': 'conj', 'info': 'Complex conjugate'},
			\ {'word': 'conncomp', 'info': 'Connected graph components'},
			\ {'word': 'containers.Map', 'info': 'Object that maps values to unique keys'},
			\ {'word': 'contains', 'info': 'Determine if pattern is in strings'},
			\ {'word': 'continue', 'info': 'Pass control to next iteration of for or while loop'},
			\ {'word': 'contour', 'info': 'Contour plot of matrix'},
			\ {'word': 'contour3', 'info': '3-D contour plot'},
			\ {'word': 'contourc', 'info': 'Low-level contour plot computation'},
			\ {'word': 'contourf', 'info': 'Filled 2-D contour plot'},
			\ {'word': 'contourslice', 'info': 'Draw contours in volume slice planes'},
			\ {'word': 'contrast', 'info': 'Create grayscale colormap to enhance image contrast'},
			\ {'word': 'conv', 'info': 'Convolution and polynomial multiplication'},
			\ {'word': 'conv2', 'info': '2-D convolution'},
			\ {'word': 'convert', 'info': 'Convert data to string in StringConsumer'},
			\ {'word': 'convert', 'info': 'Convert header field value to MATLAB type'},
			\ {'word': 'convert', 'info': 'Returns CookieInfo object for each Set-Cookie field'},
			\ {'word': 'convertCharsToStrings', 'info': 'Convert character arrays to string arrays, leaving other arrays unaltered'},
			\ {'word': 'convertContainedStringsToChars', 'info': 'Convert string arrays at any level of cell array or structure'},
			\ {'word': 'convertLike', 'info': 'Convert header field value like another header field'},
			\ {'word': 'convertStringsToChars', 'info': 'Convert string arrays to character arrays, leaving other arrays unaltered'},
			\ {'word': 'convertvars', 'info': 'Convert table or timetable variables to specified data type'},
			\ {'word': 'convexHull', 'info': 'Convex hull of Delaunay triangulation'},
			\ {'word': 'convexHull', 'info': '(Not recommended) Convex hull'},
			\ {'word': 'convhull', 'info': 'Convex hull'},
			\ {'word': 'convhull', 'info': 'Convex hull of polyshape'},
			\ {'word': 'convhulln', 'info': 'N-D convex hull'},
			\ {'word': 'convn', 'info': 'N-D convolution'},
			\ {'word': 'cool', 'info': 'Cool colormap array'},
			\ {'word': 'copper', 'info': 'Copper colormap array'},
			\ {'word': 'copy', 'info': 'Copy array of handle objects'},
			\ {'word': 'copyElement', 'info': 'Copy scalar MATLAB object'},
			\ {'word': 'copyfile', 'info': 'Copy file or folder'},
			\ {'word': 'copyHDU', 'info': 'Copy current HDU from one file to another'},
			\ {'word': 'copyobj', 'info': 'Copy graphics objects and their descendants'},
			\ {'word': 'copyTo', 'info': 'Copy artifacts to new location'},
			\ {'word': 'corrcoef', 'info': 'Correlation coefficients'},
			\ {'word': 'cos', 'info': 'Cosine of argument in radians'},
			\ {'word': 'cosd', 'info': 'Cosine of argument in degrees'},
			\ {'word': 'cosh', 'info': 'Hyperbolic cosine'},
			\ {'word': 'cospi', 'info': 'Compute cos(X*pi) accurately'},
			\ {'word': 'cot', 'info': 'Cotangent of angle in radians'},
			\ {'word': 'cotd', 'info': 'Cotangent of argument in degrees'},
			\ {'word': 'coth', 'info': 'Hyperbolic cotangent'},
			\ {'word': 'count', 'info': 'Count occurrences of pattern in strings'},
			\ {'word': 'countcats', 'info': 'Count occurrences of categorical array elements by category'},
			\ {'word': 'countEachLabel', 'info': 'Count files in ImageDatastore labels'},
			\ {'word': 'cov', 'info': 'Covariance'},
			\ {'word': 'cplxpair', 'info': 'Sort complex numbers into complex conjugate pairs'},
			\ {'word': 'cputime', 'info': 'Elapsed CPU time'},
			\ {'word': 'createCategory', 'info': 'Create category of project labels'},
			\ {'word': 'createClassFromWsdl', 'info': 'Create MATLAB class based on WSDL document'},
			\ {'word': 'createFile', 'info': 'Create FITS file'},
			\ {'word': 'createImg', 'info': 'Create FITS image'},
			\ {'word': 'createLabel', 'info': 'Create project label'},
			\ {'word': 'createMock', 'info': 'Create mock object'},
			\ {'word': 'createSampleTime', 'info': 'Create sample time specification object'},
			\ {'word': 'createSharedTestFixture', 'info': 'Extend creation of shared test fixture instances'},
			\ {'word': 'createSoapMessage', 'info': 'Create SOAP (Simple Object Access Protocol) message to send to server'},
			\ {'word': 'createTbl', 'info': 'Create new ASCII or binary table extension'},
			\ {'word': 'createTestClassInstance', 'info': 'Extend creation of class-level TestCase instances'},
			\ {'word': 'createTestMethodInstance', 'info': 'Extend creation of method-level TestCase instances'},
			\ {'word': 'criticalAlpha', 'info': 'Alpha radius defining critical transition in shape'},
			\ {'word': 'cross', 'info': 'Cross product'},
			\ {'word': 'csc', 'info': 'Cosecant of input angle in radians'},
			\ {'word': 'cscd', 'info': 'Cosecant of argument in degrees'},
			\ {'word': 'csch', 'info': 'Hyperbolic cosecant'},
			\ {'word': 'csvread', 'info': '(Not recommended) Read comma-separated value (CSV) file'},
			\ {'word': 'csvwrite', 'info': '(Not recommended) Write comma-separated value file'},
			\ {'word': 'ctranspose', 'info': 'Complex conjugate transpose'},
			\ {'word': 'cummax', 'info': 'Cumulative maximum'},
			\ {'word': 'cummin', 'info': 'Cumulative minimum'},
			\ {'word': 'cumprod', 'info': 'Cumulative product'},
			\ {'word': 'cumsum', 'info': 'Cumulative sum'},
			\ {'word': 'cumtrapz', 'info': 'Cumulative trapezoidal numerical integration'},
			\ {'word': 'curl', 'info': 'Compute curl and angular velocity of vector field'},
			\ {'word': 'currentProject', 'info': 'Get current project'},
			\ {'word': 'customverctrl', 'info': '(Has been removed) Allow custom source control system (UNIX platforms)'},
			\ {'word': 'cylinder', 'info': 'Generate cylinder'},
			\ {'word': 'daqread', 'info': 'Read Data Acquisition Toolbox (.daq) file'},
			\ {'word': 'daspect', 'info': 'Control data unit length along each axis'},
			\ {'word': 'datacursormode', 'info': 'Enable, disable, and manage interactive data cursor mode'},
			\ {'word': 'datastore', 'info': 'Create datastore for large collections of data'},
			\ {'word': 'dataTipInteraction', 'info': 'Data tip interaction'},
			\ {'word': 'dataTipTextRow', 'info': 'Add row to data tips'},
			\ {'word': 'date', 'info': 'Current date as character vector'},
			\ {'word': 'datenum', 'info': 'Convert date and time to serial date number'},
			\ {'word': 'dateshift', 'info': 'Shift date or generate sequence of dates and time'},
			\ {'word': 'datestr', 'info': 'Convert date and time to string format'},
			\ {'word': 'datetick', 'info': 'Date formatted tick labels'},
			\ {'word': 'datetime', 'info': 'Arrays that represent points in time'},
			\ {'word': 'datevec', 'info': 'Convert date and time to vector of components'},
			\ {'word': 'day', 'info': 'Day number or name'},
			\ {'word': 'days', 'info': 'Duration in days'},
			\ {'word': 'dbclear', 'info': 'Remove breakpoints'},
			\ {'word': 'dbcont', 'info': 'Resume execution'},
			\ {'word': 'dbdown', 'info': 'Reverse dbup workspace shift'},
			\ {'word': 'dblquad', 'info': '(Not recommended) Numerically evaluate double integral over rectangle'},
			\ {'word': 'dbmex', 'info': 'Enable MEX-file debugging on UNIX platforms'},
			\ {'word': 'dbquit', 'info': 'Quit debug mode'},
			\ {'word': 'dbstack', 'info': 'Function call stack'},
			\ {'word': 'dbstatus', 'info': 'List all breakpoints'},
			\ {'word': 'dbstep', 'info': 'Execute next executable line from current breakpoint'},
			\ {'word': 'dbstop', 'info': 'Set breakpoints for debugging'},
			\ {'word': 'dbtype', 'info': 'Display file with line numbers'},
			\ {'word': 'dbup', 'info': 'Shift current workspace to workspace of caller in debug mode'},
			\ {'word': 'dde23', 'info': 'Solve delay differential equations (DDEs) with constant delays'},
			\ {'word': 'ddeget', 'info': 'Extract properties from delay differential equations options structure'},
			\ {'word': 'ddensd', 'info': 'Solve delay differential equations (DDEs) of neutral type'},
			\ {'word': 'ddesd', 'info': 'Solve delay differential equations (DDEs) with general delays'},
			\ {'word': 'ddeset', 'info': 'Create or alter delay differential equations options structure'},
			\ {'word': 'deal', 'info': 'Distribute inputs to outputs'},
			\ {'word': 'deblank', 'info': 'Remove trailing whitespace from ends of strings'},
			\ {'word': 'dec2base', 'info': 'Convert decimal number to character vector representing base N number'},
			\ {'word': 'dec2bin', 'info': 'Convert decimal number to character vector representing binary number'},
			\ {'word': 'dec2hex', 'info': 'Convert decimal number to character vector representing hexadecimal number'},
			\ {'word': 'decic', 'info': 'Compute consistent initial conditions for ode15i'},
			\ {'word': 'decomposition', 'info': 'Matrix decomposition for solving linear systems'},
			\ {'word': 'deconv', 'info': 'Deconvolution and polynomial division'},
			\ {'word': 'defineArgument', 'info': 'Add input argument definition for C++ constructor'},
			\ {'word': 'defineArgument', 'info': 'Add input argument definition for C++ method'},
			\ {'word': 'defineArgument', 'info': 'Add input argument definition for C++ package function'},
			\ {'word': 'defineOutput', 'info': 'Add output argument definition for C++ method'},
			\ {'word': 'defineOutput', 'info': 'Add output argument definition for C++ package function'},
			\ {'word': 'deg2rad', 'info': 'Convert angle from degrees to radians'},
			\ {'word': 'degree', 'info': 'Degree of graph nodes'},
			\ {'word': 'del2', 'info': 'Discrete Laplacian'},
			\ {'word': 'delaunay', 'info': 'Delaunay triangulation'},
			\ {'word': 'delaunayn', 'info': 'N-D Delaunay triangulation'},
			\ {'word': 'DelaunayTri', 'info': '(Not recommended) Delaunay triangulation in 2-D and 3-D'},
			\ {'word': 'DelaunayTri', 'info': '(Not recommended) Construct Delaunay triangulation'},
			\ {'word': 'delaunayTriangulation', 'info': 'Delaunay triangulation in 2-D and 3-D'},
			\ {'word': 'delegateTo', 'info': 'Delegate to another consumer'},
			\ {'word': 'delegateTo', 'info': 'Delegate to another provider'},
			\ {'word': 'delete', 'info': 'Delete file on FTP server'},
			\ {'word': 'delete', 'info': 'Delete files or objects'},
			\ {'word': 'delete', 'info': 'Delete handle object'},
			\ {'word': 'delete', 'info': 'Remove timer object from memory'},
			\ {'word': 'delete (serial)', 'info': 'Remove serial port object from memory'},
			\ {'word': 'deleteCol', 'info': 'Delete column from table'},
			\ {'word': 'deleteFile', 'info': 'Delete FITS file'},
			\ {'word': 'deleteHDU', 'info': 'Delete current HDU in FITS file'},
			\ {'word': 'deleteKey', 'info': 'Delete key by name'},
			\ {'word': 'deleteproperty', 'info': 'Remove custom property from COM object'},
			\ {'word': 'deleteRecord', 'info': 'Delete key by record number'},
			\ {'word': 'deleteRows', 'info': 'Delete rows from table'},
			\ {'word': 'delevent', 'info': 'Remove event from timeseries'},
			\ {'word': 'delimitedTextImportOptions', 'info': 'Import options object for delimited text'},
			\ {'word': 'delsample', 'info': 'Remove sample from timeseries object'},
			\ {'word': 'delsamplefromcollection', 'info': 'Delete sample from tscollection'},
			\ {'word': 'demo', 'info': 'Access product examples in Help browser'},
			\ {'word': 'det', 'info': 'Matrix determinant'},
			\ {'word': 'details', 'info': 'Display array details'},
			\ {'word': 'detectImportOptions', 'info': 'Create import options based on file content'},
			\ {'word': 'detrend', 'info': 'Remove polynomial trend'},
			\ {'word': 'detrend', 'info': 'Subtract mean or best-fit line from timeseries object'},
			\ {'word': 'deval', 'info': 'Evaluate differential equation solution structure'},
			\ {'word': 'dfsearch', 'info': 'Depth-first graph search'},
			\ {'word': 'diag', 'info': 'Create diagonal matrix or get diagonal elements of matrix'},
			\ {'word': 'diagnose', 'info': 'Execute diagnostic action'},
			\ {'word': 'dialog', 'info': 'Create empty modal dialog box'},
			\ {'word': 'diary', 'info': 'Log Command Window text to file'},
			\ {'word': 'diff', 'info': 'Differences and approximate derivatives'},
			\ {'word': 'diffuse', 'info': 'Calculate diffuse reflectance'},
			\ {'word': 'digraph', 'info': 'Graph with directed edges'},
			\ {'word': 'dir', 'info': 'List folder contents'},
			\ {'word': 'dir', 'info': 'List folder contents on FTP server'},
			\ {'word': 'disableDefaultInteractivity', 'info': 'Disable built-in axes interactions'},
			\ {'word': 'discretize', 'info': 'Group data into bins or categories'},
			\ {'word': 'disp', 'info': 'Display value of variable'},
			\ {'word': 'disp', 'info': 'Display lib.pointer type'},
			\ {'word': 'disp (serial)', 'info': 'Serial port object summary information'},
			\ {'word': 'display', 'info': 'Show information about variable or expression result'},
			\ {'word': 'displayEmptyObject', 'info': 'Display for empty object arrays'},
			\ {'word': 'displayNonScalarObject', 'info': 'Display format for non-scalar objects'},
			\ {'word': 'displayScalarHandleToDeletedObject', 'info': 'Display format for deleted scalar handles'},
			\ {'word': 'displayScalarObject', 'info': 'Display format for scalar objects'},
			\ {'word': 'dissect', 'info': 'Nested dissection permutation'},
			\ {'word': 'distances', 'info': 'Shortest path distances of all node pairs'},
			\ {'word': 'dither', 'info': 'Convert image, increasing apparent color resolution by dithering'},
			\ {'word': 'divergence', 'info': 'Compute divergence of vector field'},
			\ {'word': 'dlmread', 'info': '(Not recommended) Read ASCII-delimited file of numeric data into matrix'},
			\ {'word': 'dlmwrite', 'info': '(Not recommended) Write matrix to ASCII-delimited file'},
			\ {'word': 'dmperm', 'info': 'Dulmage-Mendelsohn decomposition'},
			\ {'word': 'doc', 'info': 'Reference page in Help browser'},
			\ {'word': 'docsearch', 'info': 'Help browser search'},
			\ {'word': 'done', 'info': 'Completion status of asynchronous call to MATLAB function from Python'},
			\ {'word': 'done', 'info': 'Indicate all message transfers completed'},
			\ {'word': 'dos', 'info': 'Execute DOS command and return output'},
			\ {'word': 'dot', 'info': 'Dot product'},
			\ {'word': 'double', 'info': 'Double-precision arrays'},
			\ {'word': 'drag', 'info': 'Perform drag gesture on UI component'},
			\ {'word': 'dragrect', 'info': 'Drag rectangles with mouse'},
			\ {'word': 'drawnow', 'info': 'Update figures and process callbacks'},
			\ {'word': 'dsearchn', 'info': 'N-D nearest point search'},
			\ {'word': 'duration', 'info': 'Lengths of time in fixed-length units'},
			\ {'word': 'dynamicprops', 'info': 'Superclass for classes that support dynamic properties'},
			\ {'word': 'echo', 'info': 'Display statements during function execution'},
			\ {'word': 'echodemo', 'info': 'Run example script step-by-step in Command Window'},
			\ {'word': 'edgeAttachments', 'info': 'Triangles or tetrahedra attached to specified edge'},
			\ {'word': 'edgeAttachments', 'info': '(Not recommended) Simplices attached to specified edges'},
			\ {'word': 'edgecount', 'info': 'Number of edges between two nodes'},
			\ {'word': 'edges', 'info': 'Triangulation edges'},
			\ {'word': 'edges', 'info': '(Not recommended) Triangulation edges'},
			\ {'word': 'edit', 'info': 'Edit or create file'},
			\ {'word': 'eig', 'info': 'Eigenvalues and eigenvectors'},
			\ {'word': 'eigs', 'info': 'Subset of eigenvalues and eigenvectors'},
			\ {'word': 'ellipj', 'info': 'Jacobi elliptic functions'},
			\ {'word': 'ellipke', 'info': 'Complete elliptic integrals of first and second kind'},
			\ {'word': 'ellipsoid', 'info': 'Generate ellipsoid'},
			\ {'word': 'empty', 'info': 'Create empty array of specified class'},
			\ {'word': 'enableDefaultInteractivity', 'info': 'Enable built-in axes interactions'},
			\ {'word': 'enableNETfromNetworkDrive', 'info': 'Enable access to .NET commands from network drive'},
			\ {'word': 'enableservice', 'info': 'Enable, disable, or report status of MATLAB Automation server'},
			\ {'word': 'end', 'info': 'Terminate block of code, or indicate last array index'},
			\ {'word': 'EndInvoke', 'info': 'Retrieve result of asynchronous call initiated by .NET System.Delegate BeginInvoke method'},
			\ {'word': 'endsWith', 'info': 'Determine if strings end with pattern'},
			\ {'word': 'enumeration', 'info': 'Class enumeration members and names'},
			\ {'word': 'eomday', 'info': 'Last day of month'},
			\ {'word': 'eps', 'info': 'Floating-point relative accuracy'},
			\ {'word': 'eq', 'info': 'Determine equality'},
			\ {'word': 'eq', 'info': 'Compare two HeaderField arrays'},
			\ {'word': 'equilibrate', 'info': 'Matrix scaling for improved conditioning'},
			\ {'word': 'erase', 'info': 'Delete substrings within strings'},
			\ {'word': 'eraseBetween', 'info': 'Delete substrings between start and end points'},
			\ {'word': 'erf', 'info': 'Error function'},
			\ {'word': 'erfc', 'info': 'Complementary error function'},
			\ {'word': 'erfcinv', 'info': 'Inverse complementary error function'},
			\ {'word': 'erfcx', 'info': 'Scaled complementary error function'},
			\ {'word': 'erfinv', 'info': 'Inverse error function'},
			\ {'word': 'error', 'info': 'Throw error and display message'},
			\ {'word': 'errorbar', 'info': 'Line plot with error bars'},
			\ {'word': 'errordlg', 'info': 'Create error dialog box'},
			\ {'word': 'etime', 'info': 'Time elapsed between date vectors'},
			\ {'word': 'etree', 'info': 'Elimination tree'},
			\ {'word': 'etreeplot', 'info': 'Plot elimination tree'},
			\ {'word': 'eval', 'info': 'Execute MATLAB expression in text'},
			\ {'word': 'evalc', 'info': 'Evaluate MATLAB expression with capture'},
			\ {'word': 'evalin', 'info': 'Execute MATLAB expression in specified workspace'},
			\ {'word': 'event.DynamicPropertyEvent', 'info': 'Event data for dynamic property events'},
			\ {'word': 'event.EventData', 'info': 'Base class for event data'},
			\ {'word': 'event.hasListener', 'info': 'Determine if listeners exist for event'},
			\ {'word': 'event.listener', 'info': 'Class defining listener objects'},
			\ {'word': 'event.PropertyEvent', 'info': 'Data for property events'},
			\ {'word': 'event.proplistener', 'info': 'Define listener object for property events'},
			\ {'word': 'eventlisteners', 'info': 'List event handler functions associated with COM object events'},
			\ {'word': 'events', 'info': 'Event names'},
			\ {'word': 'events', 'info': 'List of events COM object can trigger'},
			\ {'word': 'exceltime', 'info': 'Convert MATLAB datetime to Excel date number'},
			\ {'word': 'Execute', 'info': 'Execute MATLAB command in Automation server'},
			\ {'word': 'exist', 'info': 'Check existence of variable, script, function, folder, or class'},
			\ {'word': 'exit', 'info': 'Terminate MATLAB program (same as quit)'},
			\ {'word': 'exp', 'info': 'Exponential'},
			\ {'word': 'expand', 'info': 'Expand tree node'},
			\ {'word': 'expectedContentLength', 'info': 'Content length of ContentProvider'},
			\ {'word': 'expectedContentLength', 'info': 'Content length of GenericProvider'},
			\ {'word': 'expint', 'info': 'Exponential integral'},
			\ {'word': 'expm', 'info': 'Matrix exponential'},
			\ {'word': 'expm1', 'info': 'Compute exp(x)-1 accurately for small values of x'},
			\ {'word': 'export', 'info': 'Export project to archive'},
			\ {'word': 'export2wsdlg', 'info': 'Create dialog box for exporting variables to workspace'},
			\ {'word': 'exportsetupdlg', 'info': 'Open figure Export Setup dialog box'},
			\ {'word': 'extractAfter', 'info': 'Extract substrings after specified positions'},
			\ {'word': 'extractBefore', 'info': 'Extract substrings before specified positions'},
			\ {'word': 'extractBetween', 'info': 'Extract substrings between start and end points'},
			\ {'word': 'eye', 'info': 'Identity matrix'},
			\ {'word': 'ezcontour', 'info': '(Not recommended) Easy-to-use contour plotter'},
			\ {'word': 'ezcontourf', 'info': '(Not recommended) Easy-to-use filled contour plotter'},
			\ {'word': 'ezmesh', 'info': '(Not recommended) Easy-to-use 3-D mesh plotter'},
			\ {'word': 'ezmeshc', 'info': '(Not recommended) Easy-to-use combination mesh/contour plotter'},
			\ {'word': 'ezplot', 'info': '(Not recommended) Easy-to-use function plotter'},
			\ {'word': 'ezplot3', 'info': '(Not recommended) Easy-to-use 3-D parametric curve plotter'},
			\ {'word': 'ezpolar', 'info': 'Easy-to-use polar coordinate plotter'},
			\ {'word': 'ezsurf', 'info': '(Not recommended) Easy-to-use 3-D colored surface plotter'},
			\ {'word': 'ezsurfc', 'info': '(Not recommended) Easy-to-use combination surface/contour plotter'},
			\ {'word': 'faceNormal', 'info': 'Triangulation unit normal vectors'},
			\ {'word': 'faceNormals', 'info': '(Not recommended) Unit normals to specified triangles'},
			\ {'word': 'factor', 'info': 'Prime factors'},
			\ {'word': 'factorial', 'info': 'Factorial of input'},
			\ {'word': 'false', 'info': 'Logical 0 (false)'},
			\ {'word': 'fatalAssertAccessed', 'info': 'Fatally assert that a property was accessed'},
			\ {'word': 'fatalAssertCalled', 'info': 'Fatally assert that a method was called with certain input values'},
			\ {'word': 'fatalAssertClass', 'info': 'Fatally assert exact class of specified value'},
			\ {'word': 'fatalAssertEmpty', 'info': 'Fatally assert value is empty'},
			\ {'word': 'fatalAssertEqual', 'info': 'Fatally assert value is equal to specified value'},
			\ {'word': 'fatalAssertError', 'info': 'Fatally assert function throws specified exception'},
			\ {'word': 'fatalAssertFail', 'info': 'Produce unconditional fatal assertion failure'},
			\ {'word': 'fatalAssertFalse', 'info': 'Fatally assert value is false'},
			\ {'word': 'fatalAssertGreaterThan', 'info': 'Fatally assert value is greater than specified value'},
			\ {'word': 'fatalAssertGreaterThanOrEqual', 'info': 'Fatally assert value is greater than or equal to specified value'},
			\ {'word': 'fatalAssertInstanceOf', 'info': 'Fatally assert value is object of specified type'},
			\ {'word': 'fatalAssertLength', 'info': 'Fatally assert value has specified length'},
			\ {'word': 'fatalAssertLessThan', 'info': 'Fatally assert value is less than specified value'},
			\ {'word': 'fatalAssertLessThanOrEqual', 'info': 'Fatally assert value is less than or equal to specified value'},
			\ {'word': 'fatalAssertMatches', 'info': 'Fatally assert string matches specified regular expression'},
			\ {'word': 'fatalAssertNotAccessed', 'info': 'Fatally assert that a property was not accessed'},
			\ {'word': 'fatalAssertNotCalled', 'info': 'Fatally assert that a method was not called with certain input values'},
			\ {'word': 'fatalAssertNotEmpty', 'info': 'Fatally assert value is not empty'},
			\ {'word': 'fatalAssertNotEqual', 'info': 'Fatally assert value is not equal to specified value'},
			\ {'word': 'fatalAssertNotSameHandle', 'info': 'Fatally assert value is not handle to specified instance'},
			\ {'word': 'fatalAssertNotSet', 'info': 'Fatally assert that a property was not set'},
			\ {'word': 'fatalAssertNumElements', 'info': 'Fatally assert value has specified element count'},
			\ {'word': 'fatalAssertReturnsTrue', 'info': 'Fatally assert function returns true when evaluated'},
			\ {'word': 'fatalAssertSameHandle', 'info': 'Fatally assert two values are handles to same instance'},
			\ {'word': 'fatalAssertSet', 'info': 'Fatally assert that a property was set'},
			\ {'word': 'fatalAssertSize', 'info': 'Fatally assert value has specified size'},
			\ {'word': 'fatalAssertSubstring', 'info': 'Fatally assert string contains specified string'},
			\ {'word': 'fatalAssertThat', 'info': 'Fatally assert value meets specified constraint'},
			\ {'word': 'fatalAssertTrue', 'info': 'Fatally assert value is true'},
			\ {'word': 'fatalAssertUsing', 'info': 'Fatally assert that value satisfies given constraint'},
			\ {'word': 'fatalAssertWarning', 'info': 'Fatally assert function issues specified warning'},
			\ {'word': 'fatalAssertWarningFree', 'info': 'Fatally assert function issues no warnings'},
			\ {'word': 'fclose', 'info': 'Close one or all open files'},
			\ {'word': 'fclose (serial)', 'info': 'Disconnect serial port object from device'},
			\ {'word': 'fcontour', 'info': 'Plot contours'},
			\ {'word': 'feather', 'info': 'Plot velocity vectors'},
			\ {'word': 'featureEdges', 'info': 'Handle sharp edges of triangulation'},
			\ {'word': 'featureEdges', 'info': '(Not recommended) Sharp edges of surface triangulation'},
			\ {'word': 'feof', 'info': 'Test for end of file'},
			\ {'word': 'ferror', 'info': 'File I/O error information'},
			\ {'word': 'feval', 'info': 'Evaluate function'},
			\ {'word': 'Feval', 'info': 'Execute MATLAB function in Automation server'},
			\ {'word': 'feval', 'info': 'Evaluate C++ MEX function in MEX host process'},
			\ {'word': 'fewerbins', 'info': 'Decrease number of histogram bins'},
			\ {'word': 'fft', 'info': 'Fast Fourier transform'},
			\ {'word': 'fft2', 'info': '2-D fast Fourier transform'},
			\ {'word': 'fftn', 'info': 'N-D fast Fourier transform'},
			\ {'word': 'fftshift', 'info': 'Shift zero-frequency component to center of spectrum'},
			\ {'word': 'fftw', 'info': 'Define method for determining FFT algorithm'},
			\ {'word': 'fgetl', 'info': 'Read line from file, removing newline characters'},
			\ {'word': 'fgetl (serial)', 'info': 'Read line of ASCII text from device and discard terminator'},
			\ {'word': 'fgets', 'info': 'Read line from file, keeping newline characters'},
			\ {'word': 'fgets (serial)', 'info': 'Read line of text from device and include terminator'},
			\ {'word': 'fieldnames', 'info': 'Field names of structure, or public fields of Java or Microsoft COM object'},
			\ {'word': 'figure', 'info': 'Create figure window'},
			\ {'word': 'figurepalette', 'info': 'Show or hide Figure Palette'},
			\ {'word': 'fileattrib', 'info': 'Set or get attributes of file or folder'},
			\ {'word': 'fileDatastore', 'info': 'Datastore with custom file reader'},
			\ {'word': 'filemarker', 'info': 'Character to separate file name from local or nested function name'},
			\ {'word': 'fileMode', 'info': 'I/O mode of FITS file'},
			\ {'word': 'fileName', 'info': 'Name of FITS file'},
			\ {'word': 'fileparts', 'info': 'Get parts of file name'},
			\ {'word': 'fileread', 'info': 'Read contents of file as text'},
			\ {'word': 'filesep', 'info': 'File separator for current platform'},
			\ {'word': 'fill', 'info': 'Filled 2-D polygons'},
			\ {'word': 'fill3', 'info': 'Filled 3-D polygons'},
			\ {'word': 'fillmissing', 'info': 'Fill missing values'},
			\ {'word': 'filloutliers', 'info': 'Detect and replace outliers in data'},
			\ {'word': 'filter', 'info': '1-D digital filter'},
			\ {'word': 'filter', 'info': 'Modify frequency content of timeseries objects'},
			\ {'word': 'filter2', 'info': '2-D digital filter'},
			\ {'word': 'fimplicit', 'info': 'Plot implicit function'},
			\ {'word': 'fimplicit3', 'info': 'Plot 3-D implicit function'},
			\ {'word': 'find', 'info': 'Find indices and values of nonzero elements'},
			\ {'word': 'findall', 'info': 'Find all graphics objects'},
			\ {'word': 'findCategory', 'info': 'Find project category of labels'},
			\ {'word': 'findedge', 'info': 'Locate edge in graph'},
			\ {'word': 'findEvent', 'info': 'Query tsdata.event by name'},
			\ {'word': 'findfigs', 'info': 'Find visible offscreen figures'},
			\ {'word': 'findFile', 'info': 'Find project file by name'},
			\ {'word': 'findgroups', 'info': 'Find groups and return group numbers'},
			\ {'word': 'findLabel', 'info': 'Get project file label'},
			\ {'word': 'findnode', 'info': 'Locate node in graph'},
			\ {'word': 'findobj', 'info': 'Locate graphics objects with specific properties'},
			\ {'word': 'findobj', 'info': 'Find handle objects'},
			\ {'word': 'findprop', 'info': 'Find meta.property object'},
			\ {'word': 'findstr', 'info': '(Not recommended) Find string within another, longer string'},
			\ {'word': 'finish', 'info': 'User-defined termination script for MATLAB'},
			\ {'word': 'fitsdisp', 'info': 'Display FITS metadata'},
			\ {'word': 'fitsinfo', 'info': 'Information about FITS file'},
			\ {'word': 'fitsread', 'info': 'Read data from FITS file'},
			\ {'word': 'fitswrite', 'info': 'Write image to FITS file'},
			\ {'word': 'fix', 'info': 'Round toward zero'},
			\ {'word': 'fixedWidthImportOptions', 'info': 'Import options object for fixed-width text files'},
			\ {'word': 'flag', 'info': 'Flag colormap array'},
			\ {'word': 'flintmax', 'info': 'Largest consecutive integer in floating-point format'},
			\ {'word': 'flip', 'info': 'Flip order of elements'},
			\ {'word': 'flipdim', 'info': '(Not recommended) Flip array along specified dimension'},
			\ {'word': 'flipedge', 'info': 'Reverse edge directions'},
			\ {'word': 'fliplr', 'info': 'Flip array left to right'},
			\ {'word': 'flipud', 'info': 'Flip array up to down'},
			\ {'word': 'floor', 'info': 'Round toward negative infinity'},
			\ {'word': 'flow', 'info': 'Simple function of three variables'},
			\ {'word': 'fmesh', 'info': 'Plot 3-D mesh'},
			\ {'word': 'fminbnd', 'info': 'Find minimum of single-variable function on fixed interval'},
			\ {'word': 'fminsearch', 'info': 'Find minimum of unconstrained multivariable function using derivative-free method'},
			\ {'word': 'fopen', 'info': 'Open file, or obtain information about open files'},
			\ {'word': 'fopen (serial)', 'info': 'Connect serial port object to device'},
			\ {'word': 'for', 'info': 'for loop to repeat specified number of times'},
			\ {'word': 'format', 'info': 'Set Command Window output display format'},
			\ {'word': 'fplot', 'info': 'Plot expression or function'},
			\ {'word': 'fplot3', 'info': '3-D parametric curve plotter'},
			\ {'word': 'fprintf', 'info': 'Write data to text file'},
			\ {'word': 'fprintf (serial)', 'info': 'Write text to device'},
			\ {'word': 'frame2im', 'info': 'Return image data associated with movie frame'},
			\ {'word': 'fread', 'info': 'Read data from binary file'},
			\ {'word': 'fread (serial)', 'info': 'Read binary data from device'},
			\ {'word': 'freeBoundary', 'info': 'Free boundary facets'},
			\ {'word': 'freeBoundary', 'info': '(Not recommended) Facets referenced by only one simplex'},
			\ {'word': 'freqspace', 'info': 'Frequency spacing for frequency response'},
			\ {'word': 'frewind', 'info': 'Move file position indicator to beginning of open file'},
			\ {'word': 'fscanf', 'info': 'Read data from text file'},
			\ {'word': 'fscanf (serial)', 'info': 'Read ASCII data from device, and format as text'},
			\ {'word': 'fseek', 'info': 'Move to specified position in file'},
			\ {'word': 'fsurf', 'info': 'Plot 3-D surface'},
			\ {'word': 'ftell', 'info': 'Current position'},
			\ {'word': 'ftp', 'info': 'Object to connect to FTP server and access its files'},
			\ {'word': 'full', 'info': 'Convert sparse matrix to full storage'},
			\ {'word': 'fullfile', 'info': 'Build full file name from parts'},
			\ {'word': 'func2str', 'info': 'Construct character vector from function handle'},
			\ {'word': 'function', 'info': 'Declare function name, inputs, and outputs'},
			\ {'word': 'functions', 'info': 'Information about function handle'},
			\ {'word': 'FunctionTestCase', 'info': 'TestCase used for function-based tests'},
			\ {'word': 'functiontests', 'info': 'Create array of tests from handles to local functions'},
			\ {'word': 'funm', 'info': 'Evaluate general matrix function'},
			\ {'word': 'fwrite', 'info': 'Write data to binary file'},
			\ {'word': 'fwrite (serial)', 'info': 'Write binary data to device'},
			\ {'word': 'fzero', 'info': 'Root of nonlinear function'},
			\ {'word': 'gallery', 'info': 'Test matrices'},
			\ {'word': 'gamma', 'info': 'Gamma function'},
			\ {'word': 'gammainc', 'info': 'Incomplete gamma function'},
			\ {'word': 'gammaincinv', 'info': 'Inverse incomplete gamma function'},
			\ {'word': 'gammaln', 'info': 'Logarithm of gamma function'},
			\ {'word': 'gather', 'info': 'Collect tall array into memory after executing queued operations'},
			\ {'word': 'gca', 'info': 'Current axes or chart'},
			\ {'word': 'gcbf', 'info': 'Handle of figure containing object whose callback is executing'},
			\ {'word': 'gcbo', 'info': 'Handle of object whose callback is executing'},
			\ {'word': 'gcd', 'info': 'Greatest common divisor'},
			\ {'word': 'gcf', 'info': 'Current figure handle'},
			\ {'word': 'gcmr', 'info': 'Get current mapreducer configuration'},
			\ {'word': 'gco', 'info': 'Handle of current object'},
			\ {'word': 'ge', 'info': 'Determine greater than or equal to'},
			\ {'word': 'genpath', 'info': 'Generate path name'},
			\ {'word': 'genvarname', 'info': 'Construct valid variable name from string'},
			\ {'word': 'geoaxes', 'info': 'Create geographic axes'},
			\ {'word': 'geobasemap', 'info': 'Set or query basemap'},
			\ {'word': 'geobubble', 'info': 'Visualize data values at specific geographic locations'},
			\ {'word': 'geodensityplot', 'info': 'Geographic density plot'},
			\ {'word': 'geolimits', 'info': 'Set or query geographic limits'},
			\ {'word': 'geoplot', 'info': 'Plot line in geographic coordinates'},
			\ {'word': 'geoscatter', 'info': 'Scatter chart in geographic coordinates'},
			\ {'word': 'geotickformat', 'info': 'Set or query geographic tick label format'},
			\ {'word': 'get', 'info': 'Query graphics object properties'},
			\ {'word': 'get', 'info': 'Query timeseries properties'},
			\ {'word': 'get', 'info': 'Query tscollection properties'},
			\ {'word': 'get', 'info': 'Query tsdata.event properties'},
			\ {'word': 'get', 'info': 'Construct object to define mock property get behavior'},
			\ {'word': 'get', 'info': 'Query property values for audioplayer object'},
			\ {'word': 'get', 'info': 'Query property values for audiorecorder object'},
			\ {'word': 'get', 'info': 'Query property values for timer object'},
			\ {'word': 'get', 'info': 'Query specified property values'},
			\ {'word': 'get (RandStream)', 'info': 'Random stream properties'},
			\ {'word': 'get (serial)', 'info': 'Serial port object properties'},
			\ {'word': 'getabstime', 'info': 'Convert timeseries time vector to cell array'},
			\ {'word': 'getabstime', 'info': 'Convert tscollection time vector to cell array'},
			\ {'word': 'getAColParms', 'info': 'ASCII table information'},
			\ {'word': 'getappdata', 'info': 'Retrieve application-defined data'},
			\ {'word': 'getaudiodata', 'info': 'Store recorded audio signal in numeric array'},
			\ {'word': 'getBColParms', 'info': 'Binary table information'},
			\ {'word': 'GetCharArray', 'info': 'Character array from Automation server'},
			\ {'word': 'getClass', 'info': 'StatusClass for StatusCode'},
			\ {'word': 'getColName', 'info': 'Table column name'},
			\ {'word': 'getColType', 'info': 'Scaled column data type, repeat value, width'},
			\ {'word': 'getConstantValue', 'info': 'Numeric value of named constant'},
			\ {'word': 'getCurrentTime', 'info': 'Current simulation time in MATLAB System block'},
			\ {'word': 'getData', 'info': 'Next buffer of data to send in HTTP request message from ContentProvider'},
			\ {'word': 'getData', 'info': 'Next buffer of data to send in HTTP request message from FileProvider'},
			\ {'word': 'getData', 'info': 'Next buffer of data to send in HTTP request message from GenericProvider'},
			\ {'word': 'getData', 'info': 'Next buffer of data to send in HTTP request message from StringProvider'},
			\ {'word': 'getData', 'info': 'Next buffer of data to send in multipart HTTP request message'},
			\ {'word': 'getdatasamples', 'info': 'Access timeseries data samples'},
			\ {'word': 'getdatasamplesize', 'info': 'timeseries data sample size'},
			\ {'word': 'getDiagnosticFor', 'info': 'Produce diagnostic for compared value'},
			\ {'word': 'getDiagnosticFor', 'info': 'Produce diagnostic for two values specified to be within tolerance'},
			\ {'word': 'getDiscreteStateImpl', 'info': 'Discrete state property values'},
			\ {'word': 'getDiscreteStateSpecificationImpl', 'info': 'Discrete state size, data type, and complexity'},
			\ {'word': 'getdisp', 'info': 'Customize get method display'},
			\ {'word': 'getenv', 'info': 'Environment variable'},
			\ {'word': 'getEqColType', 'info': 'Column data type, repeat value, width'},
			\ {'word': 'getfield', 'info': 'Field of structure array'},
			\ {'word': 'getFields', 'info': 'Return header fields matching name or class'},
			\ {'word': 'getFields', 'info': 'Return message header fields matching name or class'},
			\ {'word': 'getFileFormats', 'info': 'File formats that VideoReader supports'},
			\ {'word': 'getFooter', 'info': 'Build and return display footer text'},
			\ {'word': 'getframe', 'info': 'Capture axes or figure as movie frame'},
			\ {'word': 'GetFullMatrix', 'info': 'Matrix from Automation server workspace'},
			\ {'word': 'getGlobalNamesImpl', 'info': 'Global variable names for MATLAB System block'},
			\ {'word': 'getHdrSpace', 'info': 'Number of keywords in header'},
			\ {'word': 'getHDUnum', 'info': 'Number of current HDU in FITS file'},
			\ {'word': 'getHDUtype', 'info': 'Type of current HDU'},
			\ {'word': 'getHeader', 'info': 'Build and return display header text'},
			\ {'word': 'getHeaderImpl', 'info': 'Header for System object display'},
			\ {'word': 'getIconImpl', 'info': 'Name to display as block icon'},
			\ {'word': 'getImgSize', 'info': 'Size of image'},
			\ {'word': 'getImgType', 'info': 'Data type of image'},
			\ {'word': 'getImpulseResponseLengthImpl', 'info': 'Define length of input effects for dataflow subsystems'},
			\ {'word': 'getInputDimensionConstraintImpl', 'info': 'Define input dimension constraints for dataflow subsystems'},
			\ {'word': 'getinterpmethod', 'info': 'timeseries interpolation method'},
			\ {'word': 'getLocation', 'info': '(Not recommended) Location of files in Hadoop'},
			\ {'word': 'getLocation', 'info': 'Location in Hadoop'},
			\ {'word': 'getMockHistory', 'info': 'Return history from mock object'},
			\ {'word': 'getNegativeDiagnosticFor', 'info': 'Produce negated diagnostic for value'},
			\ {'word': 'getnext', 'info': 'Get next value from ValueIterator'},
			\ {'word': 'getNumCols', 'info': 'Number of columns in table'},
			\ {'word': 'getNumHDUs', 'info': 'Total number of HDUs in FITS file'},
			\ {'word': 'getNumInputs', 'info': 'Number of inputs required to call the System object'},
			\ {'word': 'getNumInputsImpl', 'info': 'Number of inputs to the System object'},
			\ {'word': 'getNumOutputs', 'info': 'Number of outputs from calling the System object'},
			\ {'word': 'getNumOutputsImpl', 'info': 'Number of outputs from System object'},
			\ {'word': 'getNumRows', 'info': 'Number of rows in table'},
			\ {'word': 'getOpenFiles', 'info': 'List of open FITS files'},
			\ {'word': 'getOutputDataTypeImpl', 'info': 'Data types of output ports'},
			\ {'word': 'getOutputDimensionConstraintImpl', 'info': 'Define output dimension constraints for dataflow subsystems'},
			\ {'word': 'getOutputSizeImpl', 'info': 'Sizes of output ports'},
			\ {'word': 'getParameter', 'info': 'Return value of AuthInfo parameter'},
			\ {'word': 'getParameter', 'info': 'Return value of parameter in field'},
			\ {'word': 'getParameter', 'info': 'Value of media type parameter'},
			\ {'word': 'getpixelposition', 'info': 'Get component position in pixels'},
			\ {'word': 'getplayer', 'info': 'Creates associated audioplayer object'},
			\ {'word': 'getpoints', 'info': 'Return points that define animated line'},
			\ {'word': 'getPostActValString', 'info': 'Returns text to be displayed following actual value'},
			\ {'word': 'getPostConditionString', 'info': 'Returns text to be displayed following conditions list'},
			\ {'word': 'getPostDescriptionString', 'info': 'Returns text to be displayed following description'},
			\ {'word': 'getPostExpValString', 'info': 'Returns text to be displayed following expected value'},
			\ {'word': 'getPreDescriptionString', 'info': 'Returns text to be displayed prior to description'},
			\ {'word': 'getpref', 'info': 'Get custom preference value'},
			\ {'word': 'getProfiles', 'info': 'Profiles and file formats that VideoWriter supports'},
			\ {'word': 'getPropertyGroups', 'info': 'Construct array of property groups'},
			\ {'word': 'getPropertyGroupsImpl', 'info': 'Property groups for System object display'},
			\ {'word': 'getqualitydesc', 'info': 'timeseries data quality'},
			\ {'word': 'getReasonPhrase', 'info': 'StatusClass name as text phrase'},
			\ {'word': 'getReasonPhrase', 'info': 'StatusCode identifier as text phrase'},
			\ {'word': 'getReport', 'info': 'Get error message for exception'},
			\ {'word': 'getsamples', 'info': 'Subset of timeseries'},
			\ {'word': 'getSampleTime', 'info': 'Query sample time'},
			\ {'word': 'getSampleTimeImpl', 'info': 'Specify sample time type, offset time, and sample time'},
			\ {'word': 'getsampleusingtime', 'info': 'Subset of timeseries data'},
			\ {'word': 'getsampleusingtime', 'info': 'Subset of tscollection data'},
			\ {'word': 'getSharedTestFixtures', 'info': 'Provide access to shared test fixtures'},
			\ {'word': 'getSimulateUsingImpl', 'info': 'Specify value for Simulate using parameter'},
			\ {'word': 'getSimulinkFunctionNamesImpl', 'info': 'Register Simulink function names used in your System object'},
			\ {'word': 'gettimeseriesnames', 'info': 'Names of timeseries in tscollection'},
			\ {'word': 'getTimeStr', 'info': 'Query tsdata.event times'},
			\ {'word': 'gettsafteratevent', 'info': 'Create timeseries at or after event'},
			\ {'word': 'gettsafterevent', 'info': 'Create timeseries after event'},
			\ {'word': 'gettsatevent', 'info': 'Create timeseries at event'},
			\ {'word': 'gettsbeforeatevent', 'info': 'Create timeseries at or before event'},
			\ {'word': 'gettsbeforeevent', 'info': 'Create timeseries before event'},
			\ {'word': 'gettsbetweenevents', 'info': 'Create timeseries between events'},
			\ {'word': 'GetVariable', 'info': 'Data from variable in Automation server workspace'},
			\ {'word': 'getvaropts', 'info': 'Get variable import options'},
			\ {'word': 'getVersion', 'info': 'Revision number of the CFITSIO library'},
			\ {'word': 'GetWorkspaceData', 'info': 'Data from Automation server workspace'},
			\ {'word': 'ginput', 'info': 'Identify axes coordinates'},
			\ {'word': 'global', 'info': 'Declare variables as global'},
			\ {'word': 'gmres', 'info': 'Generalized minimum residual method (with restarts)'},
			\ {'word': 'gobjects', 'info': 'Initialize array for graphics objects'},
			\ {'word': 'gplot', 'info': 'Plot nodes and links representing adjacency matrix'},
			\ {'word': 'grabcode', 'info': 'Extract MATLAB code from file published to HTML'},
			\ {'word': 'gradient', 'info': 'Numerical gradient'},
			\ {'word': 'graph', 'info': 'Graph with undirected edges'},
			\ {'word': 'GraphPlot', 'info': 'Graph plot for directed and undirected graphs'},
			\ {'word': 'gray', 'info': 'Gray colormap array'},
			\ {'word': 'graymon', 'info': 'Set default figure properties for grayscale monitors'},
			\ {'word': 'grid', 'info': 'Display or hide axes grid lines'},
			\ {'word': 'griddata', 'info': 'Interpolate 2-D or 3-D scattered data'},
			\ {'word': 'griddatan', 'info': 'Interpolate N-D scattered data'},
			\ {'word': 'griddedInterpolant', 'info': 'Gridded data interpolation'},
			\ {'word': 'groot', 'info': 'Graphics root object'},
			\ {'word': 'groupcounts', 'info': 'Number of group elements'},
			\ {'word': 'groupsummary', 'info': 'Group summary computations'},
			\ {'word': 'grouptransform', 'info': 'Transform by group'},
			\ {'word': 'gsvd', 'info': 'Generalized singular value decomposition'},
			\ {'word': 'gt', 'info': 'Determine greater than'},
			\ {'word': 'gtext', 'info': 'Add text to figure using mouse'},
			\ {'word': 'guidata', 'info': 'Store or retrieve UI data'},
			\ {'word': 'guide', 'info': 'Create or edit UI file in GUIDE'},
			\ {'word': 'guihandles', 'info': 'Create structure containing all child objects of Figure'},
			\ {'word': 'gunzip', 'info': 'Extract contents of GNU zip file'},
			\ {'word': 'gzip', 'info': 'Compress files into GNU zip files'},
			\ {'word': 'H5.close', 'info': 'Close HDF5 library'},
			\ {'word': 'H5.garbage_collect', 'info': 'Free unused memory in HDF5 library'},
			\ {'word': 'H5.get_libversion', 'info': 'Version of HDF5 library'},
			\ {'word': 'H5.open', 'info': 'Open HDF5 library'},
			\ {'word': 'H5.set_free_list_limits', 'info': 'Set size limits on free lists'},
			\ {'word': 'H5A.close', 'info': 'Close specified attribute'},
			\ {'word': 'H5A.create', 'info': 'Create attribute'},
			\ {'word': 'H5A.delete', 'info': 'Delete attribute'},
			\ {'word': 'H5A.get_info', 'info': 'Information about attribute'},
			\ {'word': 'H5A.get_name', 'info': 'Attribute name'},
			\ {'word': 'H5A.get_space', 'info': 'Copy of attribute data space'},
			\ {'word': 'H5A.get_type', 'info': 'Copy of attribute data type'},
			\ {'word': 'H5A.iterate', 'info': 'Execute function for attributes attached to object'},
			\ {'word': 'H5A.open', 'info': 'Open attribute'},
			\ {'word': 'H5A.open_by_idx', 'info': 'Open attribute specified by index'},
			\ {'word': 'H5A.open_by_name', 'info': 'Open attribute specified by name'},
			\ {'word': 'H5A.read', 'info': 'Read attribute'},
			\ {'word': 'H5A.write', 'info': 'Write attribute'},
			\ {'word': 'h5create', 'info': 'Create HDF5 data set'},
			\ {'word': 'H5D.close', 'info': 'Close dataset'},
			\ {'word': 'H5D.create', 'info': 'Create new dataset'},
			\ {'word': 'H5D.get_access_plist', 'info': 'Copy of dataset access property list'},
			\ {'word': 'H5D.get_create_plist', 'info': 'Copy of dataset creation property list'},
			\ {'word': 'H5D.get_offset', 'info': 'Location of dataset in file'},
			\ {'word': 'H5D.get_space', 'info': 'Copy of dataset data space'},
			\ {'word': 'H5D.get_space_status', 'info': 'Determine if space is allocated'},
			\ {'word': 'H5D.get_storage_size', 'info': 'Determine required storage size'},
			\ {'word': 'H5D.get_type', 'info': 'Copy of datatype'},
			\ {'word': 'H5D.open', 'info': 'Open specified dataset'},
			\ {'word': 'H5D.read', 'info': 'Read data from HDF5 dataset'},
			\ {'word': 'H5D.set_extent', 'info': 'Change size of dataset dimensions'},
			\ {'word': 'H5D.vlen_get_buf_size', 'info': 'Determine variable length storage requirements'},
			\ {'word': 'H5D.write', 'info': 'Write data to HDF5 dataset'},
			\ {'word': 'h5disp', 'info': 'Display contents of HDF5 file'},
			\ {'word': 'H5DS.attach_scale', 'info': 'Attach dimension scale to specific dataset dimension'},
			\ {'word': 'H5DS.detach_scale', 'info': 'Detach dimension scale from specific dataset dimension'},
			\ {'word': 'H5DS.get_label', 'info': 'Retrieve label from specific dataset dimension'},
			\ {'word': 'H5DS.get_num_scales', 'info': 'Number of scales attached to dataset dimension'},
			\ {'word': 'H5DS.get_scale_name', 'info': 'Name of dimension scale'},
			\ {'word': 'H5DS.is_scale', 'info': 'Determine if dataset is a dimension scale'},
			\ {'word': 'H5DS.iterate_scales', 'info': 'Iterate on scales attached to dataset dimension'},
			\ {'word': 'H5DS.set_label', 'info': 'Set label for dataset dimension'},
			\ {'word': 'H5DS.set_scale', 'info': 'Convert dataset to dimension scale'},
			\ {'word': 'H5E.clear', 'info': 'Clear error stack'},
			\ {'word': 'H5E.get_major', 'info': 'Description of major error number'},
			\ {'word': 'H5E.get_minor', 'info': 'Description of minor error number'},
			\ {'word': 'H5E.walk', 'info': 'Walk error stack'},
			\ {'word': 'H5F.close', 'info': 'Close HDF5 file'},
			\ {'word': 'H5F.create', 'info': 'Create HDF5 file'},
			\ {'word': 'H5F.flush', 'info': 'Flush buffers to disk'},
			\ {'word': 'H5F.get_access_plist', 'info': 'File access property list'},
			\ {'word': 'H5F.get_create_plist', 'info': 'File creation property list'},
			\ {'word': 'H5F.get_filesize', 'info': 'Size of HDF5 file'},
			\ {'word': 'H5F.get_freespace', 'info': 'Amount of free space in file'},
			\ {'word': 'H5F.get_info', 'info': 'Global information about file'},
			\ {'word': 'H5F.get_mdc_config', 'info': 'Metadata cache configuration'},
			\ {'word': 'H5F.get_mdc_hit_rate', 'info': 'Metadata cache hit-rate'},
			\ {'word': 'H5F.get_mdc_size', 'info': 'Metadata cache size data'},
			\ {'word': 'H5F.get_name', 'info': 'Name of HDF5 file'},
			\ {'word': 'H5F.get_obj_count', 'info': 'Number of open objects in HDF5 file'},
			\ {'word': 'H5F.get_obj_ids', 'info': 'List of open HDF5 file objects'},
			\ {'word': 'H5F.is_hdf5', 'info': 'Determine if file is HDF5'},
			\ {'word': 'H5F.mount', 'info': 'Mount HDF5 file onto specified location'},
			\ {'word': 'H5F.open', 'info': 'Open HDF5 file'},
			\ {'word': 'H5F.reopen', 'info': 'Reopen HDF5 file'},
			\ {'word': 'H5F.set_mdc_config', 'info': 'Configure HDF5 file metadata cache'},
			\ {'word': 'H5F.unmount', 'info': 'Unmount file or group from mount point'},
			\ {'word': 'H5G.close', 'info': 'Close group'},
			\ {'word': 'H5G.create', 'info': 'Create group'},
			\ {'word': 'H5G.get_info', 'info': 'Information about group'},
			\ {'word': 'H5G.open', 'info': 'Open specified group'},
			\ {'word': 'H5I.dec_ref', 'info': 'Decrement reference count'},
			\ {'word': 'H5I.get_file_id', 'info': 'File identifier for specified object'},
			\ {'word': 'H5I.get_name', 'info': 'Name of object'},
			\ {'word': 'H5I.get_ref', 'info': 'Reference count of object'},
			\ {'word': 'H5I.get_type', 'info': 'Type of object'},
			\ {'word': 'H5I.inc_ref', 'info': 'Increment reference count of specified object'},
			\ {'word': 'H5I.is_valid', 'info': 'Determine if specified identifier is valid'},
			\ {'word': 'h5info', 'info': 'Return information about HDF5 file'},
			\ {'word': 'H5L.copy', 'info': 'Copy link from source location to destination location'},
			\ {'word': 'H5L.create_external', 'info': 'Create soft link to external object'},
			\ {'word': 'H5L.create_hard', 'info': 'Create hard link'},
			\ {'word': 'H5L.create_soft', 'info': 'Create soft link'},
			\ {'word': 'H5L.delete', 'info': 'Remove link'},
			\ {'word': 'H5L.exists', 'info': 'Determine if link exists'},
			\ {'word': 'H5L.get_info', 'info': 'Information about link'},
			\ {'word': 'H5L.get_name_by_idx', 'info': 'Information about link specified by index'},
			\ {'word': 'H5L.get_val', 'info': 'Value of symbolic link'},
			\ {'word': 'H5L.iterate', 'info': 'Iterate over links'},
			\ {'word': 'H5L.iterate_by_name', 'info': 'Iterate through links in group specified by name'},
			\ {'word': 'H5L.move', 'info': 'Rename link'},
			\ {'word': 'H5L.visit', 'info': 'Recursively iterate through links in group specified by group identifier'},
			\ {'word': 'H5L.visit_by_name', 'info': 'Recursively iterate through links in group specified by location and group name'},
			\ {'word': 'H5ML.compare_values', 'info': 'Numerically compare two HDF5 values'},
			\ {'word': 'H5ML.get_constant_names', 'info': 'Constants known by HDF5 library'},
			\ {'word': 'H5ML.get_constant_value', 'info': 'Value corresponding to a string'},
			\ {'word': 'H5ML.get_function_names', 'info': 'Functions provided by HDF5 library'},
			\ {'word': 'H5ML.get_mem_datatype', 'info': 'Data type for dataset ID'},
			\ {'word': 'H5ML.hoffset', 'info': 'Determine the offset of a field within a structure'},
			\ {'word': 'H5ML.sizeof', 'info': 'Return the size (in bytes) of a variable as stored on disk'},
			\ {'word': 'H5O.close', 'info': 'Close object'},
			\ {'word': 'H5O.copy', 'info': 'Copy object from source location to destination location'},
			\ {'word': 'H5O.get_comment', 'info': 'Get comment for object specified by object identifier'},
			\ {'word': 'H5O.get_comment_by_name', 'info': 'Get comment for object specified by location and object name'},
			\ {'word': 'H5O.get_info', 'info': 'Object metadata'},
			\ {'word': 'H5O.link', 'info': 'Create hard link to specified object'},
			\ {'word': 'H5O.open', 'info': 'Open specified object'},
			\ {'word': 'H5O.open_by_idx', 'info': 'Open object specified by index'},
			\ {'word': 'H5O.set_comment', 'info': 'Set comment for object specified by object identifier'},
			\ {'word': 'H5O.set_comment_by_name', 'info': 'Set comment for object specified by location and object name'},
			\ {'word': 'H5O.visit', 'info': 'Visit objects specified by object identifier'},
			\ {'word': 'H5O.visit_by_name', 'info': 'Visit objects specified by location and object name'},
			\ {'word': 'H5P.all_filters_avail', 'info': 'Determine availability of all filters'},
			\ {'word': 'H5P.close', 'info': 'Close property list'},
			\ {'word': 'H5P.close_class', 'info': 'Close property list class'},
			\ {'word': 'H5P.copy', 'info': 'Copy of property list'},
			\ {'word': 'H5P.create', 'info': 'Create new property list'},
			\ {'word': 'H5P.equal', 'info': 'Determine equality of property lists'},
			\ {'word': 'H5P.exist', 'info': 'Determine if specified property exists in property list'},
			\ {'word': 'H5P.fill_value_defined', 'info': 'Determine if fill value is defined'},
			\ {'word': 'H5P.get', 'info': 'Value of specified property in property list'},
			\ {'word': 'H5P.get_alignment', 'info': 'Retrieve alignment properties'},
			\ {'word': 'H5P.get_alloc_time', 'info': 'Return timing of storage space allocation'},
			\ {'word': 'H5P.get_attr_creation_order', 'info': 'Return tracking order and indexing settings'},
			\ {'word': 'H5P.get_attr_phase_change', 'info': 'Retrieve attribute phase change thresholds'},
			\ {'word': 'H5P.get_btree_ratios', 'info': 'B-tree split ratios'},
			\ {'word': 'H5P.get_char_encoding', 'info': 'Return character encoding'},
			\ {'word': 'H5P.get_chunk', 'info': 'Return size of chunks'},
			\ {'word': 'H5P.get_chunk_cache', 'info': 'Raw data chunk cache parameters'},
			\ {'word': 'H5P.get_class', 'info': 'Property list class'},
			\ {'word': 'H5P.get_class_name', 'info': 'Name of property list class'},
			\ {'word': 'H5P.get_class_parent', 'info': 'Identifier for parent class'},
			\ {'word': 'H5P.get_copy_object', 'info': 'Return properties to be used when object is copied'},
			\ {'word': 'H5P.get_create_intermediate_group', 'info': 'Determine creation of intermediate groups'},
			\ {'word': 'H5P.get_driver', 'info': 'Low-level file driver'},
			\ {'word': 'H5P.get_edc_check', 'info': 'Determine if error detection is enabled'},
			\ {'word': 'H5P.get_external', 'info': 'Return information about external file'},
			\ {'word': 'H5P.get_external_count', 'info': 'Return count of external files'},
			\ {'word': 'H5P.get_family_offset', 'info': 'Offset for family file driver'},
			\ {'word': 'H5P.get_fapl_core', 'info': 'Information about core file driver properties'},
			\ {'word': 'H5P.get_fapl_family', 'info': 'File access property list information'},
			\ {'word': 'H5P.get_fapl_multi', 'info': 'Information about multifile access property list'},
			\ {'word': 'H5P.get_fclose_degree', 'info': 'File close degree'},
			\ {'word': 'H5P.get_fill_time', 'info': 'Return time when fill values are written to dataset'},
			\ {'word': 'H5P.get_fill_value', 'info': 'Return dataset fill value'},
			\ {'word': 'H5P.get_filter', 'info': 'Return information about filter in pipeline'},
			\ {'word': 'H5P.get_filter_by_id', 'info': 'Return information about specified filter'},
			\ {'word': 'H5P.get_gc_references', 'info': 'Garbage collection references setting'},
			\ {'word': 'H5P.get_hyper_vector_size', 'info': 'Number of I/O vectors'},
			\ {'word': 'H5P.get_istore_k', 'info': 'Return 1/2 rank of indexed storage B-tree'},
			\ {'word': 'H5P.get_layout', 'info': 'Determine layout of raw data for dataset'},
			\ {'word': 'H5P.get_libver_bounds', 'info': 'Library version bounds settings'},
			\ {'word': 'H5P.get_link_creation_order', 'info': 'Query if link creation order is tracked'},
			\ {'word': 'H5P.get_link_phase_change', 'info': 'Query settings for conversion between groups'},
			\ {'word': 'H5P.get_mdc_config', 'info': 'Metadata cache configuration'},
			\ {'word': 'H5P.get_meta_block_size', 'info': 'Metadata block size setting'},
			\ {'word': 'H5P.get_multi_type', 'info': 'Type of data property for MULTI driver'},
			\ {'word': 'H5P.get_nfilters', 'info': 'Return number of filters in pipeline'},
			\ {'word': 'H5P.get_nprops', 'info': 'Query number of properties in property list or class'},
			\ {'word': 'H5P.get_sieve_buf_size', 'info': 'Maximum data sieve buffer size'},
			\ {'word': 'H5P.get_size', 'info': 'Query size of property value in bytes'},
			\ {'word': 'H5P.get_sizes', 'info': 'Return size of offsets and lengths'},
			\ {'word': 'H5P.get_small_data_block_size', 'info': 'Small data block size setting'},
			\ {'word': 'H5P.get_sym_k', 'info': 'Return size of B-tree 1/2 rank and leaf node 1/2 size'},
			\ {'word': 'H5P.get_userblock', 'info': 'Return size of user block'},
			\ {'word': 'H5P.get_version', 'info': 'Return version information for file creation property list'},
			\ {'word': 'H5P.isa_class', 'info': 'Determine if property list is member of class'},
			\ {'word': 'H5P.iterate', 'info': 'Iterate over properties in property list'},
			\ {'word': 'H5P.modify_filter', 'info': 'Modify filter in pipeline'},
			\ {'word': 'H5P.remove_filter', 'info': 'Remove filter from property list'},
			\ {'word': 'H5P.set', 'info': 'Set property list value'},
			\ {'word': 'H5P.set_alignment', 'info': 'Set alignment properties for file access property list'},
			\ {'word': 'H5P.set_alloc_time', 'info': 'Set timing for storage space allocation'},
			\ {'word': 'H5P.set_attr_creation_order', 'info': 'Set tracking of attribute creation order'},
			\ {'word': 'H5P.set_attr_phase_change', 'info': 'Set attribute storage phase change thresholds'},
			\ {'word': 'H5P.set_btree_ratios', 'info': 'Set B-tree split ratios for dataset transfer'},
			\ {'word': 'H5P.set_char_encoding', 'info': 'Set character encoding used to encode strings'},
			\ {'word': 'H5P.set_chunk', 'info': 'Set chunk size'},
			\ {'word': 'H5P.set_chunk_cache', 'info': 'Set raw data chunk cache parameters'},
			\ {'word': 'H5P.set_copy_object', 'info': 'Set properties to be used when objects are copied'},
			\ {'word': 'H5P.set_create_intermediate_group', 'info': 'Set creation of intermediate groups'},
			\ {'word': 'H5P.set_deflate', 'info': 'Set compression method and compression level'},
			\ {'word': 'H5P.set_edc_check', 'info': 'Enable error detection for dataset transfer'},
			\ {'word': 'H5P.set_external', 'info': 'Add additional file to external file list'},
			\ {'word': 'H5P.set_family_offset', 'info': 'Set offset property for family of files'},
			\ {'word': 'H5P.set_fapl_core', 'info': 'Modify file access to use H5FD_CORE driver'},
			\ {'word': 'H5P.set_fapl_family', 'info': 'Set file access to use family driver'},
			\ {'word': 'H5P.set_fapl_log', 'info': 'Set use of logging driver'},
			\ {'word': 'H5P.set_fapl_multi', 'info': 'Set use of multifile driver'},
			\ {'word': 'H5P.set_fapl_sec2', 'info': 'Set file access for sec2 driver'},
			\ {'word': 'H5P.set_fapl_split', 'info': 'Set file access for emulation of split file driver'},
			\ {'word': 'H5P.set_fapl_stdio', 'info': 'Set file access for standard I/O driver'},
			\ {'word': 'H5P.set_fclose_degree', 'info': 'Set file access for file close degree'},
			\ {'word': 'H5P.set_fill_time', 'info': 'Set time when fill values are written to dataset'},
			\ {'word': 'H5P.set_fill_value', 'info': 'Set fill value for dataset creation property list'},
			\ {'word': 'H5P.set_filter', 'info': 'Add filter to filter pipeline'},
			\ {'word': 'H5P.set_fletcher32', 'info': 'Set Fletcher32 checksum filter in dataset creation'},
			\ {'word': 'H5P.set_gc_references', 'info': 'Set garbage collection references flag'},
			\ {'word': 'H5P.set_hyper_vector_size', 'info': 'Set number of I/O vectors for hyperslab I/O'},
			\ {'word': 'H5P.set_istore_k', 'info': 'Set size of parameter for indexing chunked datasets'},
			\ {'word': 'H5P.set_layout', 'info': 'Set type of storage for dataset'},
			\ {'word': 'H5P.set_libver_bounds', 'info': 'Set library version bounds for objects'},
			\ {'word': 'H5P.set_link_creation_order', 'info': 'Set creation order tracking and indexing'},
			\ {'word': 'H5P.set_link_phase_change', 'info': 'Set parameters for group conversion'},
			\ {'word': 'H5P.set_mdc_config', 'info': 'Set initial metadata cache configuration'},
			\ {'word': 'H5P.set_meta_block_size', 'info': 'Set minimum metadata block size'},
			\ {'word': 'H5P.set_multi_type', 'info': 'Specify type of data accessed with MULTI driver'},
			\ {'word': 'H5P.set_nbit', 'info': 'Set N-Bit filter'},
			\ {'word': 'H5P.set_scaleoffset', 'info': 'Set Scale-Offset filter'},
			\ {'word': 'H5P.set_shuffle', 'info': 'Set shuffle filter'},
			\ {'word': 'H5P.set_sieve_buf_size', 'info': 'Set maximum size of data sieve buffer'},
			\ {'word': 'H5P.set_sizes', 'info': 'Set byte size of offsets and lengths'},
			\ {'word': 'H5P.set_small_data_block_size', 'info': 'Set size of block reserved for small data'},
			\ {'word': 'H5P.set_sym_k', 'info': 'Set size of parameters used to control symbol table nodes'},
			\ {'word': 'H5P.set_userblock', 'info': 'Set user block size'},
			\ {'word': 'H5R.create', 'info': 'Create reference'},
			\ {'word': 'H5R.dereference', 'info': 'Open object specified by reference'},
			\ {'word': 'H5R.get_name', 'info': 'Name of referenced object'},
			\ {'word': 'H5R.get_obj_type', 'info': 'Type of referenced object'},
			\ {'word': 'H5R.get_region', 'info': 'Copy of data space of specified region'},
			\ {'word': 'h5read', 'info': 'Read data from HDF5 data set'},
			\ {'word': 'h5readatt', 'info': 'Read attribute from HDF5 file'},
			\ {'word': 'H5S.close', 'info': 'Close data space'},
			\ {'word': 'H5S.copy', 'info': 'Create copy of data space'},
			\ {'word': 'H5S.create', 'info': 'Create new data space'},
			\ {'word': 'H5S.create_simple', 'info': 'Create new simple data space'},
			\ {'word': 'H5S.extent_copy', 'info': 'Copy extent from source to destination data space'},
			\ {'word': 'H5S.get_select_bounds', 'info': 'Bounding box of data space selection'},
			\ {'word': 'H5S.get_select_elem_npoints', 'info': 'Number of element points in selection'},
			\ {'word': 'H5S.get_select_elem_pointlist', 'info': 'Element points in data space selection'},
			\ {'word': 'H5S.get_select_hyper_blocklist', 'info': 'List of hyperslab blocks'},
			\ {'word': 'H5S.get_select_hyper_nblocks', 'info': 'Number of hyperslab blocks'},
			\ {'word': 'H5S.get_select_npoints', 'info': 'Number of elements in data space selection'},
			\ {'word': 'H5S.get_select_type', 'info': 'Type of data space selection'},
			\ {'word': 'H5S.get_simple_extent_dims', 'info': 'Data space size and maximum size'},
			\ {'word': 'H5S.get_simple_extent_ndims', 'info': 'Data space rank'},
			\ {'word': 'H5S.get_simple_extent_npoints', 'info': 'Number of elements in data space'},
			\ {'word': 'H5S.get_simple_extent_type', 'info': 'Data space class'},
			\ {'word': 'H5S.is_simple', 'info': 'Determine if data space is simple'},
			\ {'word': 'H5S.offset_simple', 'info': 'Set offset of simple data space'},
			\ {'word': 'H5S.select_all', 'info': 'Select entire extent of data space'},
			\ {'word': 'H5S.select_elements', 'info': 'Specify coordinates to include in selection'},
			\ {'word': 'H5S.select_hyperslab', 'info': 'Select hyperslab region'},
			\ {'word': 'H5S.select_none', 'info': 'Reset selection region to include no elements'},
			\ {'word': 'H5S.select_valid', 'info': 'Determine validity of selection'},
			\ {'word': 'H5S.set_extent_none', 'info': 'Remove extent from data space'},
			\ {'word': 'H5S.set_extent_simple', 'info': 'Set size of data space'},
			\ {'word': 'H5T.array_create', 'info': 'Create array data type object'},
			\ {'word': 'H5T.close', 'info': 'Close data type'},
			\ {'word': 'H5T.commit', 'info': 'Commit transient data type'},
			\ {'word': 'H5T.committed', 'info': 'Determine if data type is committed'},
			\ {'word': 'H5T.copy', 'info': 'Copy data type'},
			\ {'word': 'H5T.create', 'info': 'Create new data type'},
			\ {'word': 'H5T.detect_class', 'info': 'Determine of data type contains specific class'},
			\ {'word': 'H5T.enum_create', 'info': 'Create new enumeration data type'},
			\ {'word': 'H5T.enum_insert', 'info': 'Insert enumeration data type member'},
			\ {'word': 'H5T.enum_nameof', 'info': 'Name of enumeration data type member'},
			\ {'word': 'H5T.enum_valueof', 'info': 'Value of enumeration data type member'},
			\ {'word': 'H5T.equal', 'info': 'Determine equality of data types'},
			\ {'word': 'H5T.get_array_dims', 'info': 'Array dimension extents'},
			\ {'word': 'H5T.get_array_ndims', 'info': 'Rank of array data type'},
			\ {'word': 'H5T.get_class', 'info': 'Data type class identifier'},
			\ {'word': 'H5T.get_create_plist', 'info': 'Copy of data type creation property list'},
			\ {'word': 'H5T.get_cset', 'info': 'Character set of string data type'},
			\ {'word': 'H5T.get_ebias', 'info': 'Exponent bias of floating-point type'},
			\ {'word': 'H5T.get_fields', 'info': 'Floating-point data type bit field information'},
			\ {'word': 'H5T.get_inpad', 'info': 'Internal padding type for floating-point data types'},
			\ {'word': 'H5T.get_member_class', 'info': 'Data type class for compound data type member'},
			\ {'word': 'H5T.get_member_index', 'info': 'Index of compound or enumeration type member'},
			\ {'word': 'H5T.get_member_name', 'info': 'Name of compound or enumeration type member'},
			\ {'word': 'H5T.get_member_offset', 'info': 'Offset of field of compound data type'},
			\ {'word': 'H5T.get_member_type', 'info': 'Data type of specified member'},
			\ {'word': 'H5T.get_member_value', 'info': 'Value of enumeration data type member'},
			\ {'word': 'H5T.get_native_type', 'info': 'Native data type of dataset data type'},
			\ {'word': 'H5T.get_nmembers', 'info': 'Number of elements in enumeration type'},
			\ {'word': 'H5T.get_norm', 'info': 'Mantissa normalization type'},
			\ {'word': 'H5T.get_offset', 'info': 'Bit offset of first significant bit'},
			\ {'word': 'H5T.get_order', 'info': 'Byte order of atomic data type'},
			\ {'word': 'H5T.get_pad', 'info': 'Padding type of least and most-significant bits'},
			\ {'word': 'H5T.get_precision', 'info': 'Precision of atomic data type'},
			\ {'word': 'H5T.get_sign', 'info': 'Sign type for integer data type'},
			\ {'word': 'H5T.get_size', 'info': 'Size of data type in bytes'},
			\ {'word': 'H5T.get_strpad', 'info': 'Storage mechanism for string data type'},
			\ {'word': 'H5T.get_super', 'info': 'Base data type'},
			\ {'word': 'H5T.get_tag', 'info': 'Tag associated with opaque data type'},
			\ {'word': 'H5T.insert', 'info': 'Add member to compound data type'},
			\ {'word': 'H5T.is_variable_str', 'info': 'Determine if data type is variable-length string'},
			\ {'word': 'H5T.lock', 'info': 'Lock data type'},
			\ {'word': 'H5T.open', 'info': 'Open named data type'},
			\ {'word': 'H5T.pack', 'info': 'Recursively remove padding from compound data type'},
			\ {'word': 'H5T.set_cset', 'info': 'Set character dataset for string data type'},
			\ {'word': 'H5T.set_ebias', 'info': 'Set exponent bias of floating-point data type'},
			\ {'word': 'H5T.set_fields', 'info': 'Set sizes and locations of floating-point bit fields'},
			\ {'word': 'H5T.set_inpad', 'info': 'Specify how unused internal bits are to be filled'},
			\ {'word': 'H5T.set_norm', 'info': 'Set mantissa normalization of floating-point data type'},
			\ {'word': 'H5T.set_offset', 'info': 'Set bit offset of first significant bit'},
			\ {'word': 'H5T.set_order', 'info': 'Set byte ordering of atomic data type'},
			\ {'word': 'H5T.set_pad', 'info': 'Set padding type for least and most significant bits'},
			\ {'word': 'H5T.set_precision', 'info': 'Set precision of atomic data type'},
			\ {'word': 'H5T.set_sign', 'info': 'Set sign property for integer data type'},
			\ {'word': 'H5T.set_size', 'info': 'Set size of data type in bytes'},
			\ {'word': 'H5T.set_strpad', 'info': 'Set storage mechanism for string data type'},
			\ {'word': 'H5T.set_tag', 'info': 'Tag opaque data type with description'},
			\ {'word': 'H5T.vlen_create', 'info': 'Create new variable-length data type'},
			\ {'word': 'h5write', 'info': 'Write to HDF5 data set'},
			\ {'word': 'h5writeatt', 'info': 'Write HDF5 attribute'},
			\ {'word': 'H5Z.filter_avail', 'info': 'Determine if filter is available'},
			\ {'word': 'H5Z.get_filter_info', 'info': 'Information about filter'},
			\ {'word': 'hadamard', 'info': 'Hadamard matrix'},
			\ {'word': 'handle', 'info': 'Superclass of all handle classes'},
			\ {'word': 'hankel', 'info': 'Hankel matrix'},
			\ {'word': 'hasdata', 'info': 'Determine if data is available to read'},
			\ {'word': 'hasdata', 'info': 'Determine if data is available to read'},
			\ {'word': 'hasFactoryValue', 'info': 'Determine whether the setting has a factory value set'},
			\ {'word': 'hasfile', 'info': 'Determine if more files are available in file-set object'},
			\ {'word': 'hasFrame', 'info': 'Determine if frame is available to read'},
			\ {'word': 'hasnext', 'info': 'Determine if ValueIterator has one or more values available'},
			\ {'word': 'hasPersonalValue', 'info': 'Determine whether the setting has a personal value set'},
			\ {'word': 'hasTemporaryValue', 'info': 'Determine whether the setting has a temporary value set'},
			\ {'word': 'hdf5info', 'info': 'Information about HDF5 file'},
			\ {'word': 'hdf5read', 'info': 'Read HDF5 file'},
			\ {'word': 'hdf5write', 'info': 'Write data to file in HDF5 format'},
			\ {'word': 'hdfan', 'info': 'Gateway to HDF multifile annotation (AN) interface'},
			\ {'word': 'hdfdf24', 'info': 'Gateway to HDF 24-bit raster image (DF24) interface'},
			\ {'word': 'hdfdfr8', 'info': 'Gateway to HDF 8-bit raster image (DFR8) interface'},
			\ {'word': 'hdfh', 'info': 'Gateway to HDF H interface'},
			\ {'word': 'hdfhd', 'info': 'Gateway to HDF HD interface'},
			\ {'word': 'hdfhe', 'info': 'Gateway to HDF HE interface'},
			\ {'word': 'hdfhx', 'info': 'Gateway to HDF external data (HX) interface'},
			\ {'word': 'hdfinfo', 'info': 'Information about HDF4 or HDF-EOS file'},
			\ {'word': 'hdfml', 'info': 'Utilities for working with MATLAB HDF gateway functions'},
			\ {'word': 'hdfpt', 'info': 'Interface to HDF-EOS Point object'},
			\ {'word': 'hdfread', 'info': 'Read data from HDF4 or HDF-EOS file'},
			\ {'word': 'hdftool', 'info': '(Not recommended) Browse and import data from HDF4 or HDF-EOS files'},
			\ {'word': 'hdfv', 'info': 'Gateway to HDF Vgroup (V) interface'},
			\ {'word': 'hdfvf', 'info': 'Gateway to VF functions in HDF Vdata interface'},
			\ {'word': 'hdfvh', 'info': 'Gateway to VH functions in HDF Vdata interface'},
			\ {'word': 'hdfvs', 'info': 'Gateway to VS functions in HDF Vdata interface'},
			\ {'word': 'head', 'info': 'Get top rows of table, timetable, or tall array'},
			\ {'word': 'heatmap', 'info': 'Create heatmap chart'},
			\ {'word': 'height', 'info': 'Number of table rows'},
			\ {'word': 'help', 'info': 'Help for functions in Command Window'},
			\ {'word': 'helpbrowser', 'info': 'Open Help browser to access online documentation'},
			\ {'word': 'helpdesk', 'info': 'Open Help browser'},
			\ {'word': 'helpdlg', 'info': 'Create help dialog box'},
			\ {'word': 'helpwin', 'info': 'Provide access to help comments for all functions'},
			\ {'word': 'hess', 'info': 'Hessenberg form of matrix'},
			\ {'word': 'hex2dec', 'info': 'Convert text representation of hexadecimal number to decimal number'},
			\ {'word': 'hex2num', 'info': 'Convert IEEE hexadecimal string to double-precision number'},
			\ {'word': 'hgexport', 'info': 'Export figure'},
			\ {'word': 'hggroup', 'info': 'Create group object'},
			\ {'word': 'hgload', 'info': 'Load graphics object hierarchy from file'},
			\ {'word': 'hgsave', 'info': 'Save graphics object hierarchy to file'},
			\ {'word': 'hgtransform', 'info': 'Create transform object'},
			\ {'word': 'hidden', 'info': 'Remove hidden lines from mesh plot'},
			\ {'word': 'highlight', 'info': 'Highlight nodes and edges in plotted graph'},
			\ {'word': 'hilb', 'info': 'Hilbert matrix'},
			\ {'word': 'hist', 'info': 'Histogram plot (not recommended; use histogram)'},
			\ {'word': 'histc', 'info': 'Histogram bin counts (not recommended; use histcounts)'},
			\ {'word': 'histcounts', 'info': 'Histogram bin counts'},
			\ {'word': 'histcounts2', 'info': 'Bivariate histogram bin counts'},
			\ {'word': 'histogram', 'info': 'Histogram plot'},
			\ {'word': 'histogram2', 'info': 'Bivariate histogram plot'},
			\ {'word': 'hms', 'info': 'Hour, minute, and second numbers of datetime or duration'},
			\ {'word': 'hold', 'info': 'Retain current plot when adding new plots'},
			\ {'word': 'holes', 'info': 'Convert polyshape hole boundaries to array of polyshape objects'},
			\ {'word': 'home', 'info': 'Send cursor home'},
			\ {'word': 'horzcat', 'info': 'Concatenate arrays horizontally'},
			\ {'word': 'horzcat', 'info': 'Horizontally concatenate tscollection objects'},
			\ {'word': 'horzcat', 'info': 'Horizontal concatenation for heterogeneous arrays'},
			\ {'word': 'hot', 'info': 'Hot colormap array'},
			\ {'word': 'hour', 'info': 'Hour number'},
			\ {'word': 'hours', 'info': 'Duration in hours'},
			\ {'word': 'hover', 'info': 'Perform hover gesture on UI component'},
			\ {'word': 'hsv', 'info': 'HSV colormap array'},
			\ {'word': 'hsv2rgb', 'info': 'Convert HSV colors to RGB'},
			\ {'word': 'hypot', 'info': 'Square root of sum of squares (hypotenuse)'},
			\ {'word': 'i', 'info': 'Imaginary unit'},
			\ {'word': 'ichol', 'info': 'Incomplete Cholesky factorization'},
			\ {'word': 'idealfilter', 'info': 'timeseries ideal filter'},
			\ {'word': 'idivide', 'info': 'Integer division with rounding option'},
			\ {'word': 'if, elseif, else', 'info': 'Execute statements if condition is true'},
			\ {'word': 'ifft', 'info': 'Inverse fast Fourier transform'},
			\ {'word': 'ifft2', 'info': '2-D inverse fast Fourier transform'},
			\ {'word': 'ifftn', 'info': 'Multidimensional inverse fast Fourier transform'},
			\ {'word': 'ifftshift', 'info': 'Inverse zero-frequency shift'},
			\ {'word': 'ilu', 'info': 'Incomplete LU factorization'},
			\ {'word': 'im2double', 'info': 'Convert image to double precision'},
			\ {'word': 'im2frame', 'info': 'Convert image to movie frame'},
			\ {'word': 'im2java', 'info': 'Convert image to Java image'},
			\ {'word': 'imag', 'info': 'Imaginary part of complex number'},
			\ {'word': 'image', 'info': 'Display image from array'},
			\ {'word': 'imageDatastore', 'info': 'Datastore for image data'},
			\ {'word': 'imagesc', 'info': 'Display image with scaled colors'},
			\ {'word': 'imapprox', 'info': 'Approximate indexed image by reducing number of colors'},
			\ {'word': 'imfinfo', 'info': 'Information about graphics file'},
			\ {'word': 'imformats', 'info': 'Manage image file format registry'},
			\ {'word': 'imgCompress', 'info': 'Compress HDU from one file into another'},
			\ {'word': 'import', 'info': 'Add package or class to current import list'},
			\ {'word': 'importdata', 'info': 'Load data from file'},
			\ {'word': 'imread', 'info': 'Read image from graphics file'},
			\ {'word': 'imresize', 'info': 'Resize image'},
			\ {'word': 'imshow', 'info': 'Display image'},
			\ {'word': 'imtile', 'info': 'Combine multiple image frames into one rectangular tiled image'},
			\ {'word': 'imwrite', 'info': 'Write image to graphics file'},
			\ {'word': 'incenter', 'info': 'Incenter of triangulation elements'},
			\ {'word': 'incenters', 'info': '(Not recommended) Incenters of specified simplices'},
			\ {'word': 'incidence', 'info': 'Graph incidence matrix'},
			\ {'word': 'ind2rgb', 'info': 'Convert indexed image to RGB image'},
			\ {'word': 'ind2sub', 'info': 'Subscripts from linear index'},
			\ {'word': 'indegree', 'info': 'In-degree of nodes'},
			\ {'word': 'inedges', 'info': 'Incoming edges to node'},
			\ {'word': 'Inf', 'info': 'Create array of all Inf values'},
			\ {'word': 'info', 'info': 'Information about contacting MathWorks'},
			\ {'word': 'infoImpl', 'info': 'Information about System object'},
			\ {'word': 'initialize', 'info': 'Prepare consumer for new HTTP payload'},
			\ {'word': 'initialize', 'info': 'Prepare ImageConsumer for new image in HTTP message'},
			\ {'word': 'initialize', 'info': 'Prepare JSONConsumer for new HTTP message'},
			\ {'word': 'initialize', 'info': 'Prepare MultipartConsumer for new HTTP message'},
			\ {'word': 'initialize', 'info': 'Prepare StringConsumer for new HTTP message'},
			\ {'word': 'initializeDatastore', 'info': '(Not recommended) Initialize datastore with information from Hadoop'},
			\ {'word': 'initializeDatastore', 'info': 'Initialize datastore with information from Hadoop'},
			\ {'word': 'inline', 'info': 'Construct inline object'},
			\ {'word': 'inmem', 'info': 'Names of functions, MEX-files, classes in memory'},
			\ {'word': 'inner2outer', 'info': 'Invert nested table-in-table hierarchy in tables or timetables'},
			\ {'word': 'innerjoin', 'info': 'Inner join between two tables or timetables'},
			\ {'word': 'inOutStatus', 'info': '(Not recommended) Status of triangles in 2-D constrained Delaunay triangulation'},
			\ {'word': 'inpolygon', 'info': 'Points located inside or on edge of polygonal region'},
			\ {'word': 'input', 'info': 'Request user input'},
			\ {'word': 'inputdlg', 'info': 'Create dialog box to gather user input'},
			\ {'word': 'inputname', 'info': 'Variable name of function input'},
			\ {'word': 'inputParser', 'info': 'Input parser for functions'},
			\ {'word': 'insertAfter', 'info': 'Insert strings after specified substrings'},
			\ {'word': 'insertATbl', 'info': 'Insert ASCII table after current HDU'},
			\ {'word': 'insertBefore', 'info': 'Insert strings before specified substrings'},
			\ {'word': 'insertBTbl', 'info': 'Insert binary table after current HDU'},
			\ {'word': 'insertCol', 'info': 'Insert column into table'},
			\ {'word': 'insertImg', 'info': 'Insert FITS image after current image'},
			\ {'word': 'insertRows', 'info': 'Insert rows into table'},
			\ {'word': 'inShape', 'info': 'Determine if point is inside alpha shape'},
			\ {'word': 'inspect', 'info': 'Open property inspector'},
			\ {'word': 'instrcallback', 'info': 'Event information when event occurs'},
			\ {'word': 'instrfind', 'info': 'Read serial port objects from memory to MATLAB workspace'},
			\ {'word': 'instrfindall', 'info': 'Find visible and hidden serial port objects'},
			\ {'word': 'int16', 'info': '16-bit signed integer arrays'},
			\ {'word': 'int2str', 'info': 'Convert integers to characters'},
			\ {'word': 'int32', 'info': '32-bit signed integer arrays'},
			\ {'word': 'int64', 'info': '64-bit signed integer arrays'},
			\ {'word': 'int8', 'info': '8-bit signed integer arrays'},
			\ {'word': 'integral', 'info': 'Numerical integration'},
			\ {'word': 'integral2', 'info': 'Numerically evaluate double integral'},
			\ {'word': 'integral3', 'info': 'Numerically evaluate triple integral'},
			\ {'word': 'interp1', 'info': '1-D data interpolation (table lookup)'},
			\ {'word': 'interp1q', 'info': 'Quick 1-D linear interpolation'},
			\ {'word': 'interp2', 'info': 'Interpolation for 2-D gridded data in meshgrid format'},
			\ {'word': 'interp3', 'info': 'Interpolation for 3-D gridded data in meshgrid format'},
			\ {'word': 'interpft', 'info': '1-D interpolation (FFT method)'},
			\ {'word': 'interpn', 'info': 'Interpolation for 1-D, 2-D, 3-D, and N-D gridded data in ndgrid format'},
			\ {'word': 'interpstreamspeed', 'info': 'Interpolate stream-line vertices from flow speed'},
			\ {'word': 'intersect', 'info': 'Intersection of polyshape objects'},
			\ {'word': 'intersect', 'info': 'Set intersection of two arrays'},
			\ {'word': 'intmax', 'info': 'Largest value of specified integer type'},
			\ {'word': 'intmin', 'info': 'Smallest value of specified integer type'},
			\ {'word': 'inv', 'info': 'Matrix inverse'},
			\ {'word': 'invhilb', 'info': 'Inverse of Hilbert matrix'},
			\ {'word': 'invoke', 'info': 'Invoke method on COM object or interface, or display methods'},
			\ {'word': 'ipermute', 'info': 'Inverse permute array dimensions'},
			\ {'word': 'iqr', 'info': 'Interquartile range of timeseries data'},
			\ {'word': 'is*', 'info': 'Detect state'},
			\ {'word': 'isa', 'info': 'Determine if input has specified data type'},
			\ {'word': 'isappdata', 'info': 'True if application-defined data exists'},
			\ {'word': 'isaUnderlying', 'info': 'Determine if tall array data is of specified class'},
			\ {'word': 'isbanded', 'info': 'Determine if matrix is within specific bandwidth'},
			\ {'word': 'isbetween', 'info': 'Determine elements within date and time interval'},
			\ {'word': 'iscalendarduration', 'info': 'Determine if input is calendar duration array'},
			\ {'word': 'iscategorical', 'info': 'Determine whether input is categorical array'},
			\ {'word': 'iscategory', 'info': 'Test for categorical array categories'},
			\ {'word': 'iscell', 'info': 'Determine if input is cell array'},
			\ {'word': 'iscellstr', 'info': 'Determine if input is cell array of character vectors'},
			\ {'word': 'ischange', 'info': 'Find abrupt changes in data'},
			\ {'word': 'ischar', 'info': 'Determine if input is character array'},
			\ {'word': 'iscolumn', 'info': 'Determine whether input is column vector'},
			\ {'word': 'iscom', 'info': 'Determine whether input is COM or ActiveX object'},
			\ {'word': 'isCompatible', 'info': 'Determine if two fixtures of the same class are interchangeable'},
			\ {'word': 'isCompressedImg', 'info': 'Determine if current image is compressed'},
			\ {'word': 'isConnected', 'info': 'Test if two vertices are connected by an edge'},
			\ {'word': 'isdag', 'info': 'Determine if graph is acyclic'},
			\ {'word': 'isdatetime', 'info': 'Determine if input is datetime array'},
			\ {'word': 'isdiag', 'info': 'Determine if matrix is diagonal'},
			\ {'word': 'isdir', 'info': '(Not recommended) Determine if input is folder on search path'},
			\ {'word': 'isDiscreteStateSpecificationMutableImpl', 'info': 'Control whether discrete states can change data type'},
			\ {'word': 'isDone', 'info': 'End-of-data status'},
			\ {'word': 'isDoneImpl', 'info': 'End-of-data flag'},
			\ {'word': 'isdst', 'info': 'Determine daylight saving time elements'},
			\ {'word': 'isduration', 'info': 'Determine if input is duration array'},
			\ {'word': 'isEdge', 'info': '(Not recommended) Test if vertices are joined by edge'},
			\ {'word': 'isempty', 'info': 'Determine if tscollection is empty'},
			\ {'word': 'isempty', 'info': 'Determine whether array is empty'},
			\ {'word': 'isenum', 'info': 'Determine if variable is enumeration'},
			\ {'word': 'isequal', 'info': 'Determine array equality'},
			\ {'word': 'isequaln', 'info': 'Determine array equality, treating NaN values as equal'},
			\ {'word': 'isequalwithequalnans', 'info': 'Test arrays for equality, treating NaNs as equal'},
			\ {'word': 'isevent', 'info': 'Determine whether input is COM object event'},
			\ {'word': 'isfield', 'info': 'Determine if input is structure array field'},
			\ {'word': 'isfile', 'info': 'Determine if input is file'},
			\ {'word': 'isfinite', 'info': 'Array elements that are finite'},
			\ {'word': 'isfloat', 'info': 'Determine if input is floating-point array'},
			\ {'word': 'isfolder', 'info': 'Determine if input is folder'},
			\ {'word': 'isfullfile', 'info': '(Not recommended) Check if datastore reads full files'},
			\ {'word': 'isfullfile', 'info': 'Check if datastore reads full files'},
			\ {'word': 'isgraphics', 'info': 'True for valid graphics object handles'},
			\ {'word': 'ishandle', 'info': 'Test for valid graphics or Java object handle'},
			\ {'word': 'ishermitian', 'info': 'Determine if matrix is Hermitian or skew-Hermitian'},
			\ {'word': 'ishghandle', 'info': 'True for graphics object handles'},
			\ {'word': 'ishold', 'info': 'Current hold state'},
			\ {'word': 'ishole', 'info': 'Determine if polyshape boundary is a hole'},
			\ {'word': 'isIllConditioned', 'info': 'Determine whether matrix is ill conditioned'},
			\ {'word': 'isInactivePropertyImpl', 'info': 'Status of inactive property'},
			\ {'word': 'isinf', 'info': 'Array elements that are infinite'},
			\ {'word': 'isInputComplexityMutableImpl', 'info': 'Set whether System object input complexity can change'},
			\ {'word': 'isInputDataTypeMutableImpl', 'info': 'Set whether System object input data type can change'},
			\ {'word': 'isInputDirectFeedthroughImpl', 'info': 'Direct feedthrough status of input'},
			\ {'word': 'isInputSizeLockedImpl', 'info': 'Status of locked input size'},
			\ {'word': 'isInputSizeMutableImpl', 'info': 'Set whether System object input size can change'},
			\ {'word': 'isinteger', 'info': 'Determine whether input is integer array'},
			\ {'word': 'isinterface', 'info': 'Determine whether input is COM interface'},
			\ {'word': 'isInterior', 'info': 'Query interior points of Delaunay triangulation'},
			\ {'word': 'isinterior', 'info': 'Query points inside polyshape'},
			\ {'word': 'isisomorphic', 'info': 'Determine whether two graphs are isomorphic'},
			\ {'word': 'isjava', 'info': 'Determine if input is Java object'},
			\ {'word': 'isKey', 'info': 'Determine if Map object contains key'},
			\ {'word': 'iskeyword', 'info': 'Determine whether input is MATLAB keyword'},
			\ {'word': 'isletter', 'info': 'Determine which characters are letters'},
			\ {'word': 'isLoaded', 'info': 'Determine if project is loaded'},
			\ {'word': 'islocalmax', 'info': 'Find local maxima'},
			\ {'word': 'islocalmin', 'info': 'Find local minima'},
			\ {'word': 'isLocked', 'info': 'Determine if System object is in use'},
			\ {'word': 'islogical', 'info': 'Determine if input is logical array'},
			\ {'word': 'ismac', 'info': 'Determine if version is for macOS platform'},
			\ {'word': 'ismatrix', 'info': 'Determine whether input is matrix'},
			\ {'word': 'ismember', 'info': 'Array elements that are members of set array'},
			\ {'word': 'ismembertol', 'info': 'Members of set within tolerance'},
			\ {'word': 'ismethod', 'info': 'Determine if method of object'},
			\ {'word': 'ismissing', 'info': 'Find missing values'},
			\ {'word': 'ismultigraph', 'info': 'Determine whether graph has multiple edges'},
			\ {'word': 'isnan', 'info': 'Array elements that are NaN'},
			\ {'word': 'isnat', 'info': 'Determine NaT (Not-a-Time) elements'},
			\ {'word': 'isNull', 'info': 'Points to NULL pointer'},
			\ {'word': 'isnumeric', 'info': 'Determine whether input is numeric array'},
			\ {'word': 'isobject', 'info': 'Determine if input is MATLAB object'},
			\ {'word': 'isocaps', 'info': 'Compute isosurface end-cap geometry'},
			\ {'word': 'isocolors', 'info': 'Calculate isosurface and patch colors'},
			\ {'word': 'isomorphism', 'info': 'Compute isomorphism between two graphs'},
			\ {'word': 'isonormals', 'info': 'Compute normals of isosurface vertices'},
			\ {'word': 'isordinal', 'info': 'Determine whether input is ordinal categorical array'},
			\ {'word': 'isosurface', 'info': 'Extract isosurface data from volume data'},
			\ {'word': 'isoutlier', 'info': 'Find outliers in data'},
			\ {'word': 'isOutputComplexImpl', 'info': 'Complexity of output ports'},
			\ {'word': 'isOutputFixedSizeImpl', 'info': 'Fixed- or variable-size output ports'},
			\ {'word': 'ispc', 'info': 'Determine if version is for Windows (PC) platform'},
			\ {'word': 'isplaying', 'info': 'Determine if playback is in progress'},
			\ {'word': 'ispref', 'info': 'Determine if custom preference exists'},
			\ {'word': 'isprime', 'info': 'Determine which array elements are prime'},
			\ {'word': 'isprop', 'info': 'True if property exists'},
			\ {'word': 'isprotected', 'info': 'Determine whether categories of categorical array are protected'},
			\ {'word': 'isreal', 'info': 'Determine whether array is real'},
			\ {'word': 'isrecording', 'info': 'Determine if recording is in progress'},
			\ {'word': 'isregular', 'info': 'Determine whether times in timetable are regular'},
			\ {'word': 'isrow', 'info': 'Determine whether input is row vector'},
			\ {'word': 'isscalar', 'info': 'Determine whether input is scalar'},
			\ {'word': 'issimplified', 'info': 'Determine if polyshape is well-defined'},
			\ {'word': 'issorted', 'info': 'Determine if array is sorted'},
			\ {'word': 'issortedrows', 'info': 'Determine if matrix or table rows are sorted'},
			\ {'word': 'isspace', 'info': 'Determine which characters are space characters'},
			\ {'word': 'issparse', 'info': 'Determine whether input is sparse'},
			\ {'word': 'isstr', 'info': '(Not recommended) Determine whether input is character array'},
			\ {'word': 'isstring', 'info': 'Determine if input is string array'},
			\ {'word': 'isStringScalar', 'info': 'Determine if input is string array with one element'},
			\ {'word': 'isstrprop', 'info': 'Determine which characters in input strings are of specified category'},
			\ {'word': 'isstruct', 'info': 'Determine if input is structure array'},
			\ {'word': 'isstudent', 'info': 'Determine if version is Student Version'},
			\ {'word': 'issymmetric', 'info': 'Determine if matrix is symmetric or skew-symmetric'},
			\ {'word': 'istable', 'info': 'Determine whether input is table'},
			\ {'word': 'istall', 'info': 'Determine if input is tall array'},
			\ {'word': 'istimetable', 'info': 'Determine if input is timetable'},
			\ {'word': 'istril', 'info': 'Determine if matrix is lower triangular'},
			\ {'word': 'istriu', 'info': 'Determine if matrix is upper triangular'},
			\ {'word': 'isTunablePropertyDataTypeMutableImpl', 'info': 'Set whether tunable properties can change data type'},
			\ {'word': 'isundefined', 'info': 'Find undefined elements in categorical array'},
			\ {'word': 'isunix', 'info': 'Determine if version is for Linux or Mac platforms'},
			\ {'word': 'isvalid', 'info': 'Determine timer object validity'},
			\ {'word': 'isvalid', 'info': 'Determine valid handles'},
			\ {'word': 'isvalid (serial)', 'info': 'Determine whether serial port objects are valid'},
			\ {'word': 'isvarname', 'info': 'Determine if input is valid variable name'},
			\ {'word': 'isvector', 'info': 'Determine whether input is vector'},
			\ {'word': 'isweekend', 'info': 'Determine weekend elements'},
			\ {'word': 'j', 'info': 'Imaginary unit'},
			\ {'word': 'javaaddpath', 'info': 'Add entries to dynamic Java class path'},
			\ {'word': 'javaArray', 'info': 'Construct Java array object'},
			\ {'word': 'javachk', 'info': 'Error message based on Java feature support'},
			\ {'word': 'javaclasspath', 'info': 'Return Java class path or specify dynamic path'},
			\ {'word': 'javaMethod', 'info': 'Call Java method'},
			\ {'word': 'javaMethodEDT', 'info': 'Call Java method from Event Dispatch Thread (EDT)'},
			\ {'word': 'javaObject', 'info': 'Call Java constructor'},
			\ {'word': 'javaObjectEDT', 'info': 'Call Java constructor on Event Dispatch Thread (EDT)'},
			\ {'word': 'javarmpath', 'info': 'Remove entries from dynamic Java class path'},
			\ {'word': 'jet', 'info': 'Jet colormap array'},
			\ {'word': 'join', 'info': 'Combine strings'},
			\ {'word': 'join', 'info': 'Combine two tables or timetables by rows using key variables'},
			\ {'word': 'join', 'info': 'Join multiple diagnostics into a single array'},
			\ {'word': 'jsondecode', 'info': 'Decode JSON-formatted text'},
			\ {'word': 'jsonencode', 'info': 'Create JSON-formatted text from structured MATLAB data'},
			\ {'word': 'juliandate', 'info': 'Convert MATLAB datetime to Julian date'},
			\ {'word': 'keepMeasuring', 'info': 'Measure code with automatic looping'},
			\ {'word': 'keyboard', 'info': 'Give control to keyboard'},
			\ {'word': 'keys', 'info': 'Return keys of Map object'},
			\ {'word': 'KeyValueDatastore', 'info': 'Datastore for key-value pair data for use with mapreduce'},
			\ {'word': 'KeyValueStore', 'info': 'Store key-value pairs for use with mapreduce'},
			\ {'word': 'kron', 'info': 'Kronecker tensor product'},
			\ {'word': 'labeledge', 'info': 'Label graph edges'},
			\ {'word': 'labelnode', 'info': 'Label graph nodes'},
			\ {'word': 'lag', 'info': 'Time-shift data in timetable'},
			\ {'word': 'laplacian', 'info': 'Graph Laplacian matrix'},
			\ {'word': 'lasterr', 'info': 'Last error message'},
			\ {'word': 'lasterror', 'info': 'Last error message and related information'},
			\ {'word': 'lastwarn', 'info': 'Last warning message'},
			\ {'word': 'layout', 'info': 'Change layout of graph plot'},
			\ {'word': 'lcm', 'info': 'Least common multiple'},
			\ {'word': 'ldivide', 'info': 'Left array division'},
			\ {'word': 'ldl', 'info': 'Block LDL'' factorization for Hermitian indefinite matrices'},
			\ {'word': 'le', 'info': 'Determine less than or equal to'},
			\ {'word': 'legend', 'info': 'Add legend to axes'},
			\ {'word': 'legendre', 'info': 'Associated Legendre functions'},
			\ {'word': 'length', 'info': 'Length of largest array dimension'},
			\ {'word': 'length', 'info': 'Length of tscollection time vector'},
			\ {'word': 'length', 'info': 'Number of key-value pairs in Map object'},
			\ {'word': 'length (serial)', 'info': 'Length of serial port object array'},
			\ {'word': 'lib.pointer', 'info': 'Pointer object compatible with C pointer'},
			\ {'word': 'libfunctions', 'info': 'Return information on functions in shared C library'},
			\ {'word': 'libfunctionsview', 'info': 'Display shared C library function signatures in window'},
			\ {'word': 'libisloaded', 'info': 'Determine if shared C library is loaded'},
			\ {'word': 'libpointer', 'info': 'Pointer object for use with shared C library'},
			\ {'word': 'libstruct', 'info': 'Convert MATLAB structure to C-style structure for use with shared C library'},
			\ {'word': 'license', 'info': 'Get license number or perform licensing task'},
			\ {'word': 'light', 'info': 'Create light'},
			\ {'word': 'lightangle', 'info': 'Create or position light object in spherical coordinates'},
			\ {'word': 'lighting', 'info': 'Specify lighting algorithm'},
			\ {'word': 'lin2mu', 'info': 'Convert linear audio signal to mu-law'},
			\ {'word': 'line', 'info': 'Create primitive line'},
			\ {'word': 'lines', 'info': 'Lines colormap array'},
			\ {'word': 'LineSpec (Line Specification)', 'info': 'Line specification'},
			\ {'word': 'linkaxes', 'info': 'Synchronize limits of specified 2-D axes'},
			\ {'word': 'linkdata', 'info': 'Automatically update graphs when variables change'},
			\ {'word': 'linkprop', 'info': 'Keep same value for corresponding properties of graphics objects'},
			\ {'word': 'linsolve', 'info': 'Solve linear system of equations'},
			\ {'word': 'linspace', 'info': 'Generate linearly spaced vector'},
			\ {'word': 'listdlg', 'info': 'Create list selection dialog box'},
			\ {'word': 'listener', 'info': 'Create event listener without binding to event source'},
			\ {'word': 'listfonts', 'info': 'List available system fonts'},
			\ {'word': 'listModifiedFiles', 'info': 'List modified files in project'},
			\ {'word': 'listRequiredFiles', 'info': 'Get project file dependencies'},
			\ {'word': 'load', 'info': 'Initialize COM control object from file'},
			\ {'word': 'load', 'info': 'Load variables from file into workspace'},
			\ {'word': 'load (serial)', 'info': 'Load serial port objects and variables into MATLAB workspace'},
			\ {'word': 'loadlibrary', 'info': 'Load C shared library into MATLAB'},
			\ {'word': 'loadobj', 'info': 'Customize load process for objects'},
			\ {'word': 'loadObjectImpl', 'info': 'Load System object from MAT file'},
			\ {'word': 'localfunctions', 'info': 'Function handles to all local functions in MATLAB file'},
			\ {'word': 'log', 'info': 'Natural logarithm'},
			\ {'word': 'log', 'info': 'Record diagnostic information'},
			\ {'word': 'log', 'info': 'Record diagnostic information'},
			\ {'word': 'log10', 'info': 'Common logarithm (base 10)'},
			\ {'word': 'log1p', 'info': 'Compute log(1+x) accurately for small values of x'},
			\ {'word': 'log2', 'info': 'Base 2 logarithm and floating-point number dissection'},
			\ {'word': 'logical', 'info': 'Convert numeric values to logicals'},
			\ {'word': 'Logical Operators: Short-circuit', 'info': 'Logical operations with short-circuiting'},
			\ {'word': 'loglog', 'info': 'Log-log scale plot'},
			\ {'word': 'logm', 'info': 'Matrix logarithm'},
			\ {'word': 'logspace', 'info': 'Generate logarithmically spaced vector'},
			\ {'word': 'lookfor', 'info': 'Search for keyword in all help entries'},
			\ {'word': 'lower', 'info': 'Convert strings to lowercase'},
			\ {'word': 'ls', 'info': 'List folder contents'},
			\ {'word': 'lscov', 'info': 'Least-squares solution in presence of known covariance'},
			\ {'word': 'lsqminnorm', 'info': 'Minimum norm least-squares solution to linear equation'},
			\ {'word': 'lsqnonneg', 'info': 'Solve nonnegative linear least-squares problem'},
			\ {'word': 'lsqr', 'info': 'LSQR method'},
			\ {'word': 'lt', 'info': 'Determine less than'},
			\ {'word': 'lu', 'info': 'LU matrix factorization'},
			\ {'word': 'magic', 'info': 'Magic square'},
			\ {'word': 'makehgtform', 'info': 'Create 4-by-4 transform matrix'},
			\ {'word': 'mapreduce', 'info': 'Programming technique for analyzing data sets that do not fit in memory'},
			\ {'word': 'mapreducer', 'info': 'Define execution environment for mapreduce or tall arrays'},
			\ {'word': 'mat2cell', 'info': 'Convert array to cell array whose cells contain subarrays'},
			\ {'word': 'mat2str', 'info': 'Convert matrix to characters'},
			\ {'word': 'matchpairs', 'info': 'Solve linear assignment problem'},
			\ {'word': 'material', 'info': 'Control reflectance properties of surfaces and patches'},
			\ {'word': 'matfile', 'info': 'Access and change variables directly in MAT-files, without loading into memory'},
			\ {'word': 'matlab (Linux)', 'info': 'Start MATLAB program from Linux system prompt'},
			\ {'word': 'matlab (macOS)', 'info': 'Start MATLAB program from macOS Terminal'},
			\ {'word': 'matlab (Windows)', 'info': 'Start MATLAB program from Windows system prompt'},
			\ {'word': 'matlab.addons.disableAddon', 'info': 'Disable installed add-on'},
			\ {'word': 'matlab.addons.enableAddon', 'info': 'Enable installed add-on'},
			\ {'word': 'matlab.addons.install', 'info': 'Install add-on'},
			\ {'word': 'matlab.addons.installedAddons', 'info': 'Get list of installed add-ons'},
			\ {'word': 'matlab.addons.isAddonEnabled', 'info': 'Determine if add-on is enabled'},
			\ {'word': 'matlab.addons.toolbox.installedToolboxes', 'info': 'Return information about installed toolboxes'},
			\ {'word': 'matlab.addons.toolbox.installToolbox', 'info': 'Install toolbox file'},
			\ {'word': 'matlab.addons.toolbox.packageToolbox', 'info': 'Package toolbox project'},
			\ {'word': 'matlab.addons.toolbox.toolboxVersion', 'info': 'Query or modify version of toolbox'},
			\ {'word': 'matlab.addons.toolbox.uninstallToolbox', 'info': 'Uninstall toolbox'},
			\ {'word': 'matlab.addons.uninstall', 'info': 'Uninstall add-on'},
			\ {'word': 'matlab.apputil.create', 'info': 'Create or modify app project file for packaging app into .mlappinstall file using interactive dialog box'},
			\ {'word': 'matlab.apputil.getInstalledAppInfo', 'info': 'List installed app information'},
			\ {'word': 'matlab.apputil.install', 'info': 'Install app from a .mlappinstall file'},
			\ {'word': 'matlab.apputil.package', 'info': 'Package app files into .mlappinstall file'},
			\ {'word': 'matlab.apputil.run', 'info': 'Run app programmatically'},
			\ {'word': 'matlab.apputil.uninstall', 'info': 'Uninstall app'},
			\ {'word': 'matlab.codetools.requiredFilesAndProducts', 'info': 'List dependencies of MATLAB program files'},
			\ {'word': 'matlab.engine.connect_matlab', 'info': 'Connect shared MATLAB session to MATLAB Engine for Python'},
			\ {'word': 'matlab.engine.engineName', 'info': 'Return name of shared MATLAB session'},
			\ {'word': 'matlab.engine.find_matlab', 'info': 'Find shared MATLAB sessions to connect to MATLAB Engine for Python'},
			\ {'word': 'matlab.engine.FutureResult', 'info': 'Results of asynchronous call to MATLAB function stored in Python object'},
			\ {'word': 'matlab.engine.isEngineShared', 'info': 'Determine if MATLAB session is shared'},
			\ {'word': 'matlab.engine.MatlabEngine', 'info': 'Python object using MATLAB as computational engine within Python session'},
			\ {'word': 'matlab.engine.shareEngine', 'info': 'Convert running MATLAB session to shared session'},
			\ {'word': 'matlab.engine.start_matlab', 'info': 'Start MATLAB Engine for Python'},
			\ {'word': 'matlab.exception.JavaException', 'info': 'Capture error information for Java exception'},
			\ {'word': 'matlab.exception.PyException', 'info': 'Capture error information for Python exception'},
			\ {'word': 'matlab.graphics.Graphics', 'info': 'Common base class for graphics objects'},
			\ {'word': 'matlab.graphics.GraphicsPlaceholder', 'info': 'Default graphics object'},
			\ {'word': 'matlab.io.Datastore', 'info': 'Base datastore class'},
			\ {'word': 'matlab.io.datastore.DsFileReader', 'info': 'File-reader object for files in a datastore'},
			\ {'word': 'matlab.io.datastore.DsFileSet', 'info': 'File-set object for collection of files in datastore'},
			\ {'word': 'matlab.io.datastore.HadoopFileBased', 'info': '(Not recommended) Add Hadoop file support to datastore'},
			\ {'word': 'matlab.io.datastore.HadoopLocationBased', 'info': 'Add Hadoop support to datastore'},
			\ {'word': 'matlab.io.datastore.Partitionable', 'info': 'Add parallelization support to datastore'},
			\ {'word': 'matlab.io.datastore.Shuffleable', 'info': 'Add shuffling support to datastore'},
			\ {'word': 'matlab.io.hdf4.sd', 'info': 'Interact directly with HDF4 multifile scientific data set (SD) interface'},
			\ {'word': 'matlab.io.hdf4.sd.attrInfo', 'info': 'Information about attribute'},
			\ {'word': 'matlab.io.hdf4.sd.close', 'info': 'Terminate access to SD interface'},
			\ {'word': 'matlab.io.hdf4.sd.create', 'info': 'Create new data set'},
			\ {'word': 'matlab.io.hdf4.sd.dimInfo', 'info': 'Information about dimension'},
			\ {'word': 'matlab.io.hdf4.sd.endAccess', 'info': 'Terminate access to data set'},
			\ {'word': 'matlab.io.hdf4.sd.fileInfo', 'info': 'Number of data sets and global attributes in file'},
			\ {'word': 'matlab.io.hdf4.sd.findAttr', 'info': 'Index of specified attribute'},
			\ {'word': 'matlab.io.hdf4.sd.getCal', 'info': 'Data set calibration information'},
			\ {'word': 'matlab.io.hdf4.sd.getChunkInfo', 'info': 'Chunk size for data set'},
			\ {'word': 'matlab.io.hdf4.sd.getCompInfo', 'info': 'Information about data set compression'},
			\ {'word': 'matlab.io.hdf4.sd.getDataStrs', 'info': 'Predefined attributes for data set'},
			\ {'word': 'matlab.io.hdf4.sd.getDimID', 'info': 'Dimension identifier'},
			\ {'word': 'matlab.io.hdf4.sd.getDimScale', 'info': 'Scale data for dimension'},
			\ {'word': 'matlab.io.hdf4.sd.getDimStrs', 'info': 'Predefined attributes for dimension'},
			\ {'word': 'matlab.io.hdf4.sd.getFilename', 'info': 'Name of file'},
			\ {'word': 'matlab.io.hdf4.sd.getFillValue', 'info': 'Fill value for data set'},
			\ {'word': 'matlab.io.hdf4.sd.getInfo', 'info': 'Information about data set'},
			\ {'word': 'matlab.io.hdf4.sd.getRange', 'info': 'Maximum and minimum range values'},
			\ {'word': 'matlab.io.hdf4.sd.idToRef', 'info': 'Reference number corresponding to data set identifier'},
			\ {'word': 'matlab.io.hdf4.sd.idType', 'info': 'Type of object'},
			\ {'word': 'matlab.io.hdf4.sd.isCoordVar', 'info': 'Determine if data set is a coordinate variable'},
			\ {'word': 'matlab.io.hdf4.sd.isRecord', 'info': 'Determine if data set is appendable'},
			\ {'word': 'matlab.io.hdf4.sd.nameToIndex', 'info': 'Index value of named data set'},
			\ {'word': 'matlab.io.hdf4.sd.nameToIndices', 'info': 'List of data sets with same name'},
			\ {'word': 'matlab.io.hdf4.sd.readAttr', 'info': 'Read attribute value'},
			\ {'word': 'matlab.io.hdf4.sd.readChunk', 'info': 'Read chunk from data set'},
			\ {'word': 'matlab.io.hdf4.sd.readData', 'info': 'Read subsample of data'},
			\ {'word': 'matlab.io.hdf4.sd.refToIndex', 'info': 'Index of data set corresponding to reference number'},
			\ {'word': 'matlab.io.hdf4.sd.select', 'info': 'Identifier of data set with specified index'},
			\ {'word': 'matlab.io.hdf4.sd.setAttr', 'info': 'Write attribute value'},
			\ {'word': 'matlab.io.hdf4.sd.setCal', 'info': 'Set data set calibration information'},
			\ {'word': 'matlab.io.hdf4.sd.setChunk', 'info': 'Set chunk size and compression method of data set'},
			\ {'word': 'matlab.io.hdf4.sd.setCompress', 'info': 'Set compression method of data set'},
			\ {'word': 'matlab.io.hdf4.sd.setDataStrs', 'info': 'Set predefined attributes for data set'},
			\ {'word': 'matlab.io.hdf4.sd.setDimName', 'info': 'Associate name with dimension'},
			\ {'word': 'matlab.io.hdf4.sd.setDimScale', 'info': 'Set scale values for dimension'},
			\ {'word': 'matlab.io.hdf4.sd.setDimStrs', 'info': 'Set label, unit, and format attributes'},
			\ {'word': 'matlab.io.hdf4.sd.setExternalFile', 'info': 'Store data in external file'},
			\ {'word': 'matlab.io.hdf4.sd.setFillMode', 'info': 'Set current fill mode of file'},
			\ {'word': 'matlab.io.hdf4.sd.setFillValue', 'info': 'Set fill value for data set'},
			\ {'word': 'matlab.io.hdf4.sd.setNBitDataSet', 'info': 'Specify nonstandard bit length for data set values'},
			\ {'word': 'matlab.io.hdf4.sd.setRange', 'info': 'Set maximum and minimum range value for data set'},
			\ {'word': 'matlab.io.hdf4.sd.start', 'info': 'Open HDF file and initialize SD interface'},
			\ {'word': 'matlab.io.hdf4.sd.writeChunk', 'info': 'Write chunk to data set'},
			\ {'word': 'matlab.io.hdf4.sd.writeData', 'info': 'Write to data set'},
			\ {'word': 'matlab.io.hdfeos.gd', 'info': 'Low-level access to HDF-EOS grid data'},
			\ {'word': 'matlab.io.hdfeos.gd.attach', 'info': 'Attach to existing grid'},
			\ {'word': 'matlab.io.hdfeos.gd.close', 'info': 'Close HDF-EOS grid file'},
			\ {'word': 'matlab.io.hdfeos.gd.compInfo', 'info': 'Compression information for field'},
			\ {'word': 'matlab.io.hdfeos.gd.create', 'info': 'Create new grid structure'},
			\ {'word': 'matlab.io.hdfeos.gd.defBoxRegion', 'info': 'Define region of interest by latitude and longitude'},
			\ {'word': 'matlab.io.hdfeos.gd.defComp', 'info': 'Set grid field compression'},
			\ {'word': 'matlab.io.hdfeos.gd.defDim', 'info': 'Define new dimension within grid'},
			\ {'word': 'matlab.io.hdfeos.gd.defField', 'info': 'Define new data field within grid'},
			\ {'word': 'matlab.io.hdfeos.gd.defOrigin', 'info': 'Define origin of pixels in grid'},
			\ {'word': 'matlab.io.hdfeos.gd.defPixReg', 'info': 'Define pixel registration within grid'},
			\ {'word': 'matlab.io.hdfeos.gd.defProj', 'info': 'Define grid projection'},
			\ {'word': 'matlab.io.hdfeos.gd.defTile', 'info': 'Define tiling parameters'},
			\ {'word': 'matlab.io.hdfeos.gd.defVrtRegion', 'info': 'Define vertical subset region'},
			\ {'word': 'matlab.io.hdfeos.gd.detach', 'info': 'Detach from existing grid'},
			\ {'word': 'matlab.io.hdfeos.gd.dimInfo', 'info': 'Length of dimension'},
			\ {'word': 'matlab.io.hdfeos.gd.extractRegion', 'info': 'Read region of interest from field'},
			\ {'word': 'matlab.io.hdfeos.gd.fieldInfo', 'info': 'Information about data field'},
			\ {'word': 'matlab.io.hdfeos.gd.getFillValue', 'info': 'Fill value for specified field'},
			\ {'word': 'matlab.io.hdfeos.gd.getPixels', 'info': 'Pixel rows and columns for latitude/longitude pairs'},
			\ {'word': 'matlab.io.hdfeos.gd.getPixValues', 'info': 'Read data values for specified pixels'},
			\ {'word': 'matlab.io.hdfeos.gd.gridInfo', 'info': 'Position and size of grid'},
			\ {'word': 'matlab.io.hdfeos.gd.ij2ll', 'info': 'Convert row and column space to latitude and longitude'},
			\ {'word': 'matlab.io.hdfeos.gd.inqAttrs', 'info': 'Names of grid attributes'},
			\ {'word': 'matlab.io.hdfeos.gd.inqDims', 'info': 'Information about dimensions defined in grid'},
			\ {'word': 'matlab.io.hdfeos.gd.inqFields', 'info': 'Information about data fields defined in grid'},
			\ {'word': 'matlab.io.hdfeos.gd.inqGrid', 'info': 'Names of grids in file'},
			\ {'word': 'matlab.io.hdfeos.gd.interpolate', 'info': 'Bilinear interpolation on a grid field'},
			\ {'word': 'matlab.io.hdfeos.gd.ll2ij', 'info': 'Convert latitude and longitude to row and column space'},
			\ {'word': 'matlab.io.hdfeos.gd.nEntries', 'info': 'Number of specified objects'},
			\ {'word': 'matlab.io.hdfeos.gd.open', 'info': 'Open grid file'},
			\ {'word': 'matlab.io.hdfeos.gd.originInfo', 'info': 'Origin code'},
			\ {'word': 'matlab.io.hdfeos.gd.pixRegInfo', 'info': 'Pixel registration code'},
			\ {'word': 'matlab.io.hdfeos.gd.projInfo', 'info': 'GCTP projection information about grid'},
			\ {'word': 'matlab.io.hdfeos.gd.readAttr', 'info': 'Read grid attribute'},
			\ {'word': 'matlab.io.hdfeos.gd.readBlkSomOffset', 'info': 'Read Block SOM offset'},
			\ {'word': 'matlab.io.hdfeos.gd.readField', 'info': 'Read data from grid field'},
			\ {'word': 'matlab.io.hdfeos.gd.readTile', 'info': 'Read single tile of data from field'},
			\ {'word': 'matlab.io.hdfeos.gd.regionInfo', 'info': 'Information about subsetted region'},
			\ {'word': 'matlab.io.hdfeos.gd.setFillValue', 'info': 'Set fill value for specified field'},
			\ {'word': 'matlab.io.hdfeos.gd.setTileComp', 'info': 'Set tiling and compression for field with fill value'},
			\ {'word': 'matlab.io.hdfeos.gd.sphereCodeToName', 'info': 'Name corresponding to GCTP sphere code'},
			\ {'word': 'matlab.io.hdfeos.gd.sphereNameToCode', 'info': 'Numeric GCTP code corresponding to sphere name'},
			\ {'word': 'matlab.io.hdfeos.gd.tileInfo', 'info': 'Tile size of grid field'},
			\ {'word': 'matlab.io.hdfeos.gd.writeAttr', 'info': 'Write grid attribute'},
			\ {'word': 'matlab.io.hdfeos.gd.writeBlkSomOffset', 'info': 'Write Block SOM offset'},
			\ {'word': 'matlab.io.hdfeos.gd.writeField', 'info': 'Write data to grid field'},
			\ {'word': 'matlab.io.hdfeos.gd.writeTile', 'info': 'Write tile to field'},
			\ {'word': 'matlab.io.hdfeos.sw', 'info': 'Low-level access to HDF-EOS swath files'},
			\ {'word': 'matlab.io.hdfeos.sw.attach', 'info': 'Attach to swath data set'},
			\ {'word': 'matlab.io.hdfeos.sw.close', 'info': 'Close swath file'},
			\ {'word': 'matlab.io.hdfeos.sw.compInfo', 'info': 'Compression information for field'},
			\ {'word': 'matlab.io.hdfeos.sw.create', 'info': 'Create new swath structure'},
			\ {'word': 'matlab.io.hdfeos.sw.defBoxRegion', 'info': 'Define latitude-longitude region for swath'},
			\ {'word': 'matlab.io.hdfeos.sw.defComp', 'info': 'Set grid field compression'},
			\ {'word': 'matlab.io.hdfeos.sw.defDataField', 'info': 'Define new data field within swath'},
			\ {'word': 'matlab.io.hdfeos.sw.defDim', 'info': 'Define new dimension within swath'},
			\ {'word': 'matlab.io.hdfeos.sw.defDimMap', 'info': 'Define mapping between geolocation and data dimensions'},
			\ {'word': 'matlab.io.hdfeos.sw.defGeoField', 'info': 'Define new data field within swath'},
			\ {'word': 'matlab.io.hdfeos.sw.defTimePeriod', 'info': 'Define time period of interest'},
			\ {'word': 'matlab.io.hdfeos.sw.defVrtRegion', 'info': 'Subset on monotonic field or dimension'},
			\ {'word': 'matlab.io.hdfeos.sw.detach', 'info': 'Detach from swath'},
			\ {'word': 'matlab.io.hdfeos.sw.dimInfo', 'info': 'Size of dimension'},
			\ {'word': 'matlab.io.hdfeos.sw.extractPeriod', 'info': 'Read data from subsetted time period'},
			\ {'word': 'matlab.io.hdfeos.sw.extractRegion', 'info': 'Read subsetted region'},
			\ {'word': 'matlab.io.hdfeos.sw.fieldInfo', 'info': 'Information about swath field'},
			\ {'word': 'matlab.io.hdfeos.sw.geoMapInfo', 'info': 'Type of dimension mapping for named dimension'},
			\ {'word': 'matlab.io.hdfeos.sw.getFillValue', 'info': 'Fill value for specified field'},
			\ {'word': 'matlab.io.hdfeos.sw.idxMapInfo', 'info': 'Indexed array of geolocation mapping'},
			\ {'word': 'matlab.io.hdfeos.sw.inqAttrs', 'info': 'Names of swath attributes'},
			\ {'word': 'matlab.io.hdfeos.sw.inqDataFields', 'info': 'Information about geolocation fields'},
			\ {'word': 'matlab.io.hdfeos.sw.inqDims', 'info': 'Information about dimensions defined in swath'},
			\ {'word': 'matlab.io.hdfeos.sw.inqGeoFields', 'info': 'Information about geolocation fields'},
			\ {'word': 'matlab.io.hdfeos.sw.inqIdxMaps', 'info': 'Information about swath indexed geolocation mapping'},
			\ {'word': 'matlab.io.hdfeos.sw.inqMaps', 'info': 'Information about swath geolocation relations'},
			\ {'word': 'matlab.io.hdfeos.sw.inqSwath', 'info': 'Names of swaths in file'},
			\ {'word': 'matlab.io.hdfeos.sw.mapInfo', 'info': 'Offset and increment of specific geolocation mapping'},
			\ {'word': 'matlab.io.hdfeos.sw.nEntries', 'info': 'Number of entries for specific type'},
			\ {'word': 'matlab.io.hdfeos.sw.open', 'info': 'Open swath file'},
			\ {'word': 'matlab.io.hdfeos.sw.periodInfo', 'info': 'Information about subsetted period'},
			\ {'word': 'matlab.io.hdfeos.sw.readAttr', 'info': 'Read swath attribute'},
			\ {'word': 'matlab.io.hdfeos.sw.readField', 'info': 'Read data from swath field'},
			\ {'word': 'matlab.io.hdfeos.sw.regionInfo', 'info': 'Information about subsetted region'},
			\ {'word': 'matlab.io.hdfeos.sw.setFillValue', 'info': 'Set fill value for the specified field'},
			\ {'word': 'matlab.io.hdfeos.sw.writeAttr', 'info': 'Write swath attribute'},
			\ {'word': 'matlab.io.hdfeos.sw.writeField', 'info': 'Write data to swath field'},
			\ {'word': 'matlab.io.MatFile', 'info': 'Load and save parts of variables in MAT-files'},
			\ {'word': 'matlab.io.saveVariablesToScript', 'info': 'Save workspace variables to MATLAB script'},
			\ {'word': 'matlab.lang.correction.AppendArgumentsCorrection', 'info': 'Correct error by appending missing input arguments'},
			\ {'word': 'matlab.lang.makeUniqueStrings', 'info': 'Construct unique strings from input strings'},
			\ {'word': 'matlab.lang.makeValidName', 'info': 'Construct valid MATLAB identifiers from input strings'},
			\ {'word': 'matlab.lang.OnOffSwitchState', 'info': 'Represent on and off states with logical values'},
			\ {'word': 'matlab.mex.MexHost', 'info': 'Out-of-process host for C++ MEX function execution'},
			\ {'word': 'matlab.mixin.Copyable', 'info': 'Superclass providing copy functionality for handle objects'},
			\ {'word': 'matlab.mixin.CustomDisplay', 'info': 'Interface for customizing object display'},
			\ {'word': 'matlab.mixin.CustomDisplay.convertDimensionsToString', 'info': 'Return array dimensions as text'},
			\ {'word': 'matlab.mixin.CustomDisplay.displayPropertyGroups', 'info': 'Display titles and property groups as defined'},
			\ {'word': 'matlab.mixin.CustomDisplay.getClassNameForHeader', 'info': 'Return class name for display'},
			\ {'word': 'matlab.mixin.CustomDisplay.getDeletedHandleText', 'info': 'Returns text for handle to deleted object display'},
			\ {'word': 'matlab.mixin.CustomDisplay.getDetailedFooter', 'info': 'Returns default detailed footer for object display'},
			\ {'word': 'matlab.mixin.CustomDisplay.getDetailedHeader', 'info': 'Returns default detailed header for object display'},
			\ {'word': 'matlab.mixin.CustomDisplay.getHandleText', 'info': 'Return text ''handle'' with link to documentation'},
			\ {'word': 'matlab.mixin.CustomDisplay.getSimpleHeader', 'info': 'Return simple header for object display'},
			\ {'word': 'matlab.mixin.Heterogeneous', 'info': 'Superclass for heterogeneous array formation'},
			\ {'word': 'matlab.mixin.Heterogeneous.getDefaultScalarElement', 'info': 'Return default object for heterogeneous array operations'},
			\ {'word': 'matlab.mixin.SetGet', 'info': 'Provide handle classes with set and get methods'},
			\ {'word': 'matlab.mixin.SetGetExactNames', 'info': 'Require exact name match for set and get methods'},
			\ {'word': 'matlab.mixin.util.PropertyGroup', 'info': 'Custom property list for object display'},
			\ {'word': 'matlab.mock.actions.AssignOutputs', 'info': 'Define return values for method called or property accessed'},
			\ {'word': 'matlab.mock.actions.Invoke', 'info': 'Invoke function handle when method is called'},
			\ {'word': 'matlab.mock.actions.ReturnStoredValue', 'info': 'Return stored property value'},
			\ {'word': 'matlab.mock.actions.StoreValue', 'info': 'Store property value'},
			\ {'word': 'matlab.mock.actions.ThrowException', 'info': 'Throw exception when method is called or when property is set or accessed'},
			\ {'word': 'matlab.mock.AnyArguments', 'info': 'Match any number of arguments'},
			\ {'word': 'matlab.mock.constraints.Occurred', 'info': 'Constraint qualifying mock object interactions'},
			\ {'word': 'matlab.mock.constraints.WasAccessed', 'info': 'Constraint determining property get access'},
			\ {'word': 'matlab.mock.constraints.WasCalled', 'info': 'Constraint determining method call'},
			\ {'word': 'matlab.mock.constraints.WasSet', 'info': 'Constraint determining property set interaction'},
			\ {'word': 'matlab.mock.history.MethodCall', 'info': 'Representation of mock object method call'},
			\ {'word': 'matlab.mock.history.PropertyAccess', 'info': 'Representation of mock object property access'},
			\ {'word': 'matlab.mock.history.PropertyModification', 'info': 'Representation of mock object property modification'},
			\ {'word': 'matlab.mock.history.SuccessfulMethodCall', 'info': 'Representation of successful mock object method call'},
			\ {'word': 'matlab.mock.history.SuccessfulPropertyAccess', 'info': 'Representation of successful mock object property access'},
			\ {'word': 'matlab.mock.history.SuccessfulPropertyModification', 'info': 'Representation of successful mock object property modification'},
			\ {'word': 'matlab.mock.history.UnsuccessfulMethodCall', 'info': 'Representation of unsuccessful mock object method call'},
			\ {'word': 'matlab.mock.history.UnsuccessfulPropertyAccess', 'info': 'Representation of unsuccessful mock object property access'},
			\ {'word': 'matlab.mock.history.UnsuccessfulPropertyModification', 'info': 'Representation of unsuccessful mock object property modification'},
			\ {'word': 'matlab.mock.InteractionHistory', 'info': 'Interface for mock object interaction history'},
			\ {'word': 'matlab.mock.InteractionHistory.forMock', 'info': 'Return history from mock object'},
			\ {'word': 'matlab.mock.MethodCallBehavior', 'info': 'Specify mock object method behavior and qualify method calls'},
			\ {'word': 'matlab.mock.PropertyBehavior', 'info': 'Specify mock object property behavior and qualify interactions'},
			\ {'word': 'matlab.mock.PropertyGetBehavior', 'info': 'Specify mock property get behavior'},
			\ {'word': 'matlab.mock.PropertySetBehavior', 'info': 'Specify mock object set behavior'},
			\ {'word': 'matlab.mock.TestCase', 'info': 'TestCase to write tests with mocking framework'},
			\ {'word': 'matlab.mock.TestCase.forInteractiveUse', 'info': 'Create TestCase for interactive use'},
			\ {'word': 'matlab.net.ArrayFormat', 'info': 'Convert arrays in HTTP queries'},
			\ {'word': 'matlab.net.base64decode', 'info': 'Base 64 decoding of string'},
			\ {'word': 'matlab.net.base64encode', 'info': 'Base 64 encoding of byte string or vector'},
			\ {'word': 'matlab.net.http.AuthenticationScheme', 'info': 'HTTP Authentication scheme'},
			\ {'word': 'matlab.net.http.AuthInfo', 'info': 'Authentication or authorization information in HTTP messages'},
			\ {'word': 'matlab.net.http.Cookie', 'info': 'HTTP cookie received from server'},
			\ {'word': 'matlab.net.http.CookieInfo', 'info': 'HTTP cookie information'},
			\ {'word': 'matlab.net.http.CookieInfo.collectFromLog', 'info': 'Latest CookieInfo objects from HTTP response message history'},
			\ {'word': 'matlab.net.http.Credentials', 'info': 'Credentials for authenticating HTTP requests'},
			\ {'word': 'matlab.net.http.Disposition', 'info': 'Results in HTTP log record'},
			\ {'word': 'matlab.net.http.field.AcceptField', 'info': 'HTTP Accept header field'},
			\ {'word': 'matlab.net.http.field.AuthenticateField', 'info': 'HTTP WWW-Authenticate or Proxy-Authenticate header field'},
			\ {'word': 'matlab.net.http.field.AuthenticationInfoField', 'info': 'HTTP Authentication-Info header field in response message'},
			\ {'word': 'matlab.net.http.field.AuthorizationField', 'info': 'HTTP Authorization or Proxy-Authorization header field'},
			\ {'word': 'matlab.net.http.field.ContentDispositionField', 'info': 'HTTP Content-Disposition header field'},
			\ {'word': 'matlab.net.http.field.ContentLengthField', 'info': 'HTTP Content-Length field'},
			\ {'word': 'matlab.net.http.field.ContentLocationField', 'info': 'HTTP Content-Location header field'},
			\ {'word': 'matlab.net.http.field.ContentTypeField', 'info': 'HTTP Content-Type header field'},
			\ {'word': 'matlab.net.http.field.CookieField', 'info': 'HTTP Cookie header field'},
			\ {'word': 'matlab.net.http.field.DateField', 'info': 'HTTP Date header field'},
			\ {'word': 'matlab.net.http.field.GenericField', 'info': 'HTTP header field with any name and value'},
			\ {'word': 'matlab.net.http.field.GenericParameterizedField', 'info': 'GenericField to support parameterized syntax'},
			\ {'word': 'matlab.net.http.field.HTTPDateField', 'info': 'HTTP header field containing date'},
			\ {'word': 'matlab.net.http.field.IntegerField', 'info': 'Base class for HTTP header fields containing nonnegative integers'},
			\ {'word': 'matlab.net.http.field.LocationField', 'info': 'HTTP Location header field'},
			\ {'word': 'matlab.net.http.field.MediaRangeField', 'info': 'Base class for HTTP Content-Type and Accept header fields'},
			\ {'word': 'matlab.net.http.field.SetCookieField', 'info': 'HTTP Set-Cookie header field'},
			\ {'word': 'matlab.net.http.field.URIReferenceField', 'info': 'Base class for HTTP header fields containing URI components'},
			\ {'word': 'matlab.net.http.HeaderField', 'info': 'Header field of HTTP message'},
			\ {'word': 'matlab.net.http.HeaderField.displaySubclasses', 'info': 'Display supported HeaderField subclasses'},
			\ {'word': 'matlab.net.http.HTTPException', 'info': 'Exception thrown by HTTP services'},
			\ {'word': 'matlab.net.http.HTTPOptions', 'info': 'Options controlling HTTP message exchange'},
			\ {'word': 'matlab.net.http.io.BinaryConsumer', 'info': 'Consumer for binary data in HTTP messages'},
			\ {'word': 'matlab.net.http.io.ContentConsumer', 'info': 'Consumer for HTTP message payloads'},
			\ {'word': 'matlab.net.http.io.ContentProvider', 'info': 'ContentProvider for HTTP message payloads'},
			\ {'word': 'matlab.net.http.io.FileConsumer', 'info': 'Consumer for files in HTTP messages'},
			\ {'word': 'matlab.net.http.io.FileProvider', 'info': 'ContentProvider to send files'},
			\ {'word': 'matlab.net.http.io.FormProvider', 'info': 'ContentProvider that sends form data'},
			\ {'word': 'matlab.net.http.io.GenericConsumer', 'info': 'Consumer for multiple content types in HTTP messages'},
			\ {'word': 'matlab.net.http.io.GenericProvider', 'info': 'Generic ContentProvider for HTTP payloads'},
			\ {'word': 'matlab.net.http.io.ImageConsumer', 'info': 'Consumer for image data in HTTP payloads'},
			\ {'word': 'matlab.net.http.io.ImageProvider', 'info': 'ContentProvider to send MATLAB image data'},
			\ {'word': 'matlab.net.http.io.JSONConsumer', 'info': 'Content consumer that converts JSON input into MATLAB data'},
			\ {'word': 'matlab.net.http.io.JSONProvider', 'info': 'ContentProvider to send MATLAB data as JSON string'},
			\ {'word': 'matlab.net.http.io.MultipartConsumer', 'info': 'Helper for multipart content types in HTTP messages'},
			\ {'word': 'matlab.net.http.io.MultipartFormProvider', 'info': 'ContentProvider to send multipart/form-data messages'},
			\ {'word': 'matlab.net.http.io.MultipartProvider', 'info': 'ContentProvider to send multipart/mixed HTTP messages'},
			\ {'word': 'matlab.net.http.io.StringConsumer', 'info': 'String consumer for HTTP payloads'},
			\ {'word': 'matlab.net.http.io.StringProvider', 'info': 'ContentProvider to send MATLAB strings'},
			\ {'word': 'matlab.net.http.LogRecord', 'info': 'HTTP history log record'},
			\ {'word': 'matlab.net.http.MediaType', 'info': 'Internet media type used in HTTP headers'},
			\ {'word': 'matlab.net.http.Message', 'info': 'HTTP request or response message'},
			\ {'word': 'matlab.net.http.MessageBody', 'info': 'Body of HTTP message'},
			\ {'word': 'matlab.net.http.MessageType', 'info': 'HTTP message type'},
			\ {'word': 'matlab.net.http.ProgressMonitor', 'info': 'Progress monitor for HTTP message exchange'},
			\ {'word': 'matlab.net.http.ProtocolVersion', 'info': 'HTTP protocol version'},
			\ {'word': 'matlab.net.http.RequestLine', 'info': 'First line of HTTP request message'},
			\ {'word': 'matlab.net.http.RequestMessage', 'info': 'HTTP request message'},
			\ {'word': 'matlab.net.http.RequestMethod', 'info': 'HTTP request method'},
			\ {'word': 'matlab.net.http.ResponseMessage', 'info': 'HTTP response message'},
			\ {'word': 'matlab.net.http.StartLine', 'info': 'First line of HTTP message'},
			\ {'word': 'matlab.net.http.StatusClass', 'info': 'Status class of HTTP response'},
			\ {'word': 'matlab.net.http.StatusCode', 'info': 'Status code in HTTP response'},
			\ {'word': 'matlab.net.http.StatusCode.fromValue', 'info': 'Create StatusCode object from string or number'},
			\ {'word': 'matlab.net.http.StatusLine', 'info': 'First line of HTTP response message'},
			\ {'word': 'matlab.net.QueryParameter', 'info': 'Parameter in query portion of uniform resource identifier (URI)'},
			\ {'word': 'matlab.net.URI', 'info': 'Uniform resource identifier (URI)'},
			\ {'word': 'matlab.perftest.FixedTimeExperiment', 'info': 'TimeExperiment that collects fixed number of measurements'},
			\ {'word': 'matlab.perftest.FrequentistTimeExperiment', 'info': 'TimeExperiment that collects variable number of measurements'},
			\ {'word': 'matlab.perftest.TestCase', 'info': 'Superclass of matlab.perftest performance test classes'},
			\ {'word': 'matlab.perftest.TimeExperiment', 'info': 'Interface for measuring execution time of code under test'},
			\ {'word': 'matlab.perftest.TimeExperiment.limitingSamplingError', 'info': 'Construct time experiment for specified margin of error and confidence level'},
			\ {'word': 'matlab.perftest.TimeExperiment.withFixedSampleSize', 'info': 'Construct time experiment with fixed number of measurements'},
			\ {'word': 'matlab.perftest.TimeResult', 'info': 'Result from running time experiment'},
			\ {'word': 'matlab.project.createProject', 'info': 'Create blank project'},
			\ {'word': 'matlab.project.loadProject', 'info': 'Load project'},
			\ {'word': 'matlab.project.Project', 'info': 'Project object'},
			\ {'word': 'matlab.project.rootProject', 'info': 'Get root project'},
			\ {'word': 'matlab.System', 'info': 'Base class for System objects'},
			\ {'word': 'matlab.system.display.Action', 'info': 'Custom button'},
			\ {'word': 'matlab.system.display.Header', 'info': 'Header for System objects properties'},
			\ {'word': 'matlab.system.display.Icon', 'info': 'Custom icon image'},
			\ {'word': 'matlab.system.display.Section', 'info': 'Property group section for System objects'},
			\ {'word': 'matlab.system.display.SectionGroup', 'info': 'Section group for System objects'},
			\ {'word': 'matlab.system.mixin.CustomIcon', 'info': 'Custom icon mixin class'},
			\ {'word': 'matlab.system.mixin.FiniteSource', 'info': 'Finite source mixin class'},
			\ {'word': 'matlab.system.mixin.Nondirect', 'info': 'Nondirect feedthrough mixin class'},
			\ {'word': 'matlab.system.mixin.Propagates', 'info': 'Signal characteristics propagation mixin class'},
			\ {'word': 'matlab.system.mixin.SampleTime', 'info': 'Control sample time for System objects in Simulink'},
			\ {'word': 'matlab.system.StringSet', 'info': 'Set of valid character vector values'},
			\ {'word': 'matlab.tall.blockMovingWindow', 'info': 'Apply moving window function and block reduction to padded blocks of data'},
			\ {'word': 'matlab.tall.movingWindow', 'info': 'Apply moving window function to blocks of data'},
			\ {'word': 'matlab.tall.reduce', 'info': 'Reduce arrays by applying reduction algorithm to blocks of data'},
			\ {'word': 'matlab.tall.transform', 'info': 'Transform array by applying function handle to blocks of data'},
			\ {'word': 'matlab.test.behavior.Missing', 'info': 'Test if class satisfies contract for missing values'},
			\ {'word': 'matlab.uitest.TestCase', 'info': 'TestCase to write tests with app testing framework'},
			\ {'word': 'matlab.uitest.TestCase.forInteractiveUse', 'info': 'Create a TestCase object for interactive use'},
			\ {'word': 'matlab.uitest.unlock', 'info': 'Unlock figure locked by app testing framework'},
			\ {'word': 'matlab.unittest.constraints.AbsoluteTolerance', 'info': 'Absolute numeric tolerance'},
			\ {'word': 'matlab.unittest.constraints.AnyCellOf', 'info': 'Test if any element of cell array meets constraint'},
			\ {'word': 'matlab.unittest.constraints.AnyElementOf', 'info': 'Test if any element of array meets constraint'},
			\ {'word': 'matlab.unittest.constraints.BooleanConstraint', 'info': 'Interface class for boolean combinations of constraints'},
			\ {'word': 'matlab.unittest.constraints.CellComparator', 'info': 'Comparator for cell arrays'},
			\ {'word': 'matlab.unittest.constraints.Constraint', 'info': 'Fundamental interface class for comparisons'},
			\ {'word': 'matlab.unittest.constraints.ContainsSubstring', 'info': 'Constraint specifying string containing substring'},
			\ {'word': 'matlab.unittest.constraints.EndsWithSubstring', 'info': 'Constraint specifying string ending with substring'},
			\ {'word': 'matlab.unittest.constraints.Eventually', 'info': 'Poll for value to asynchronously satisfy constraint'},
			\ {'word': 'matlab.unittest.constraints.EveryCellOf', 'info': 'Test if all elements of cell array meet constraint'},
			\ {'word': 'matlab.unittest.constraints.EveryElementOf', 'info': 'Test if all elements of array meet constraint'},
			\ {'word': 'matlab.unittest.constraints.HasElementCount', 'info': 'Constraint specifying expected number of elements'},
			\ {'word': 'matlab.unittest.constraints.HasField', 'info': 'Constraint specifying structure containing particular field'},
			\ {'word': 'matlab.unittest.constraints.HasInf', 'info': 'Constraint specifying array containing any infinite value'},
			\ {'word': 'matlab.unittest.constraints.HasLength', 'info': 'Constraint specifying expected length of array'},
			\ {'word': 'matlab.unittest.constraints.HasNaN', 'info': 'Constraint specifying array containing NaN value'},
			\ {'word': 'matlab.unittest.constraints.HasSize', 'info': 'Constraint specifying expected size of array'},
			\ {'word': 'matlab.unittest.constraints.HasUniqueElements', 'info': 'Constraint specifying set contains unique elements'},
			\ {'word': 'matlab.unittest.constraints.IsAnything', 'info': 'Constraint specifying any value'},
			\ {'word': 'matlab.unittest.constraints.IsEmpty', 'info': 'Constraint specifying empty value'},
			\ {'word': 'matlab.unittest.constraints.IsEqualTo', 'info': 'General constraint to compare for equality'},
			\ {'word': 'matlab.unittest.constraints.IsFalse', 'info': 'Constraint specifying false value'},
			\ {'word': 'matlab.unittest.constraints.IsFile', 'info': 'Constraint specifying value points to file'},
			\ {'word': 'matlab.unittest.constraints.IsFinite', 'info': 'Constraint specifying finite value'},
			\ {'word': 'matlab.unittest.constraints.IsFolder', 'info': 'Constraint specifying value points to folder'},
			\ {'word': 'matlab.unittest.constraints.IsGreaterThan', 'info': 'Constraint specifying value greater than another value'},
			\ {'word': 'matlab.unittest.constraints.IsGreaterThanOrEqualTo', 'info': 'Constraint specifying value greater than or equal to another value'},
			\ {'word': 'matlab.unittest.constraints.IsInstanceOf', 'info': 'Constraint specifying inclusion in given class hierarchy'},
			\ {'word': 'matlab.unittest.constraints.IsLessThan', 'info': 'Constraint specifying value less than another value'},
			\ {'word': 'matlab.unittest.constraints.IsLessThanOrEqualTo', 'info': 'Constraint specifying value less than or equal to another value'},
			\ {'word': 'matlab.unittest.constraints.IsOfClass', 'info': 'Constraint specifying class type'},
			\ {'word': 'matlab.unittest.constraints.IsReal', 'info': 'Constraint specifying real valued array'},
			\ {'word': 'matlab.unittest.constraints.IsSameHandleAs', 'info': 'Constraint specifying handle instance same as another'},
			\ {'word': 'matlab.unittest.constraints.IsSameSetAs', 'info': 'Constraint specifying set contains same elements as another set'},
			\ {'word': 'matlab.unittest.constraints.IsScalar', 'info': 'Constraint specifying scalar value'},
			\ {'word': 'matlab.unittest.constraints.IsSparse', 'info': 'Constraint specifying sparse array'},
			\ {'word': 'matlab.unittest.constraints.IsSubsetOf', 'info': 'Constraint specifying actual set is subset of expected set'},
			\ {'word': 'matlab.unittest.constraints.IsSubstringOf', 'info': 'Constraint specifying substring of another string'},
			\ {'word': 'matlab.unittest.constraints.IssuesNoWarnings', 'info': 'Constraint specifying function that issues no warnings'},
			\ {'word': 'matlab.unittest.constraints.IssuesWarnings', 'info': 'Constraint specifying function that issues expected warning profile'},
			\ {'word': 'matlab.unittest.constraints.IsSupersetOf', 'info': 'Constraint specifying actual set is superset of expected set'},
			\ {'word': 'matlab.unittest.constraints.IsTrue', 'info': 'Constraint specifying true value'},
			\ {'word': 'matlab.unittest.constraints.LogicalComparator', 'info': 'Comparator for two logical values'},
			\ {'word': 'matlab.unittest.constraints.Matches', 'info': 'Constraint specifying string matches regular expression'},
			\ {'word': 'matlab.unittest.constraints.NumericComparator', 'info': 'Comparator for numeric data types'},
			\ {'word': 'matlab.unittest.constraints.ObjectComparator', 'info': 'Comparator for MATLAB or Java objects'},
			\ {'word': 'matlab.unittest.constraints.PublicPropertyComparator', 'info': 'Comparator for public properties of MATLAB objects'},
			\ {'word': 'matlab.unittest.constraints.PublicPropertyComparator.supportingAllValues', 'info': 'Comparator for public properties that supports any value in recursion'},
			\ {'word': 'matlab.unittest.constraints.RelativeTolerance', 'info': 'Relative numeric tolerance'},
			\ {'word': 'matlab.unittest.constraints.ReturnsTrue', 'info': 'Constraint specifying function handle that returns true'},
			\ {'word': 'matlab.unittest.constraints.StartsWithSubstring', 'info': 'Constraint specifying string starting with substring'},
			\ {'word': 'matlab.unittest.constraints.StringComparator', 'info': 'Comparator for two strings, character arrays, or cell arrays of character arrays'},
			\ {'word': 'matlab.unittest.constraints.StructComparator', 'info': 'Comparator for MATLAB structure arrays'},
			\ {'word': 'matlab.unittest.constraints.TableComparator', 'info': 'Comparator for MATLAB tables'},
			\ {'word': 'matlab.unittest.constraints.Throws', 'info': 'Constraint specifying function handle that throws MException'},
			\ {'word': 'matlab.unittest.constraints.Tolerance', 'info': 'Abstract interface class for tolerances'},
			\ {'word': 'matlab.unittest.diagnostics.ConstraintDiagnostic', 'info': 'Diagnostic with fields common to most constraints'},
			\ {'word': 'matlab.unittest.diagnostics.ConstraintDiagnostic.getDisplayableString', 'info': 'Convert object to string for display'},
			\ {'word': 'matlab.unittest.diagnostics.Diagnostic', 'info': 'Fundamental interface class for matlab.unittest diagnostics'},
			\ {'word': 'matlab.unittest.diagnostics.DiagnosticResult', 'info': 'Result of a diagnosed Diagnostic instance'},
			\ {'word': 'matlab.unittest.diagnostics.DisplayDiagnostic', 'info': 'Diagnostic using a value''s displayed output'},
			\ {'word': 'matlab.unittest.diagnostics.FigureDiagnostic', 'info': 'Diagnostic to save specified figure'},
			\ {'word': 'matlab.unittest.diagnostics.FileArtifact', 'info': 'Artifact associated with a file on disk'},
			\ {'word': 'matlab.unittest.diagnostics.FrameworkDiagnostic', 'info': 'Diagnostic provided by testing framework'},
			\ {'word': 'matlab.unittest.diagnostics.FunctionHandleDiagnostic', 'info': 'Diagnostic using a function''s displayed output'},
			\ {'word': 'matlab.unittest.diagnostics.LoggedDiagnosticEventData', 'info': 'Event data for DiagnosticLogged event listeners'},
			\ {'word': 'matlab.unittest.diagnostics.ScreenshotDiagnostic', 'info': 'Diagnostic to capture screen as image file'},
			\ {'word': 'matlab.unittest.diagnostics.StringDiagnostic', 'info': 'Diagnostic using string'},
			\ {'word': 'matlab.unittest.fixtures.CurrentFolderFixture', 'info': 'Fixture for changing current working folder'},
			\ {'word': 'matlab.unittest.fixtures.Fixture', 'info': 'Interface class for test fixtures'},
			\ {'word': 'matlab.unittest.fixtures.PathFixture', 'info': 'Fixture for adding a folder to the MATLAB path'},
			\ {'word': 'matlab.unittest.fixtures.ProjectFixture', 'info': 'Fixture for loading project'},
			\ {'word': 'matlab.unittest.fixtures.SuppressedWarningsFixture', 'info': 'Fixture to suppress display of warnings'},
			\ {'word': 'matlab.unittest.fixtures.TemporaryFolderFixture', 'info': 'Fixture for creating a temporary folder'},
			\ {'word': 'matlab.unittest.fixtures.WorkingFolderFixture', 'info': 'Fixture for creating and changing to temporary working folder'},
			\ {'word': 'matlab.unittest.measurement.DefaultMeasurementResult', 'info': 'Default implementation of MeasurementResultclass'},
			\ {'word': 'matlab.unittest.measurement.MeasurementResult', 'info': 'Base class for classes holding measurement results'},
			\ {'word': 'matlab.unittest.parameters.ClassSetupParameter', 'info': 'Specification of Class Setup Parameter'},
			\ {'word': 'matlab.unittest.parameters.EmptyParameter', 'info': 'Empty parameter implementation'},
			\ {'word': 'matlab.unittest.parameters.MethodSetupParameter', 'info': 'Specification of Method Setup Parameter'},
			\ {'word': 'matlab.unittest.parameters.Parameter', 'info': 'Base class for parameters'},
			\ {'word': 'matlab.unittest.parameters.Parameter.fromData', 'info': 'Create parameters from data'},
			\ {'word': 'matlab.unittest.parameters.TestParameter', 'info': 'Specification of Test Parameter'},
			\ {'word': 'matlab.unittest.plugins.codecoverage.CoberturaFormat', 'info': 'Format to create code coverage report using Cobertura XML format'},
			\ {'word': 'matlab.unittest.plugins.codecoverage.CoverageReport', 'info': 'Format for code coverage report'},
			\ {'word': 'matlab.unittest.plugins.codecoverage.ProfileReport', 'info': 'Format to create MATLAB Profiler Coverage Report'},
			\ {'word': 'matlab.unittest.plugins.CodeCoveragePlugin', 'info': 'Plugin that produces a code coverage report'},
			\ {'word': 'matlab.unittest.plugins.CodeCoveragePlugin.forFile', 'info': 'Construct CodeCoveragePlugin for files'},
			\ {'word': 'matlab.unittest.plugins.CodeCoveragePlugin.forFolder', 'info': 'Construct CodeCoveragePlugin for folders'},
			\ {'word': 'matlab.unittest.plugins.CodeCoveragePlugin.forPackage', 'info': 'Construct CodeCoveragePlugin for packages'},
			\ {'word': 'matlab.unittest.plugins.diagnosticrecord.DiagnosticRecord', 'info': 'Diagnostic information'},
			\ {'word': 'matlab.unittest.plugins.diagnosticrecord.ExceptionDiagnosticRecord', 'info': 'Diagnostic information about errors'},
			\ {'word': 'matlab.unittest.plugins.diagnosticrecord.LoggedDiagnosticRecord', 'info': 'Diagnostic information about logged events'},
			\ {'word': 'matlab.unittest.plugins.diagnosticrecord.QualificationDiagnosticRecord', 'info': 'Diagnostic information about qualification events'},
			\ {'word': 'matlab.unittest.plugins.DiagnosticsOutputPlugin', 'info': 'Plugin to direct diagnostics to output stream'},
			\ {'word': 'matlab.unittest.plugins.DiagnosticsRecordingPlugin', 'info': 'Plugin to record diagnostics on test results'},
			\ {'word': 'matlab.unittest.plugins.DiagnosticsValidationPlugin', 'info': 'Plugin to help validate diagnostic code'},
			\ {'word': 'matlab.unittest.plugins.FailOnWarningsPlugin', 'info': 'Plugin to fail tests that issue warnings'},
			\ {'word': 'matlab.unittest.plugins.LoggingPlugin', 'info': 'Plugin to report diagnostic messages'},
			\ {'word': 'matlab.unittest.plugins.LoggingPlugin.withVerbosity', 'info': 'Construct LoggingPlugin for messages of specified verbosity'},
			\ {'word': 'matlab.unittest.plugins.OutputStream', 'info': 'Interface that determines where to send text output'},
			\ {'word': 'matlab.unittest.plugins.plugindata.FinalizedResultPluginData', 'info': 'Plugin data containing finalized test result information'},
			\ {'word': 'matlab.unittest.plugins.plugindata.ImplicitFixturePluginData', 'info': 'Plugin data containing test setup and teardown information'},
			\ {'word': 'matlab.unittest.plugins.plugindata.PluginData', 'info': 'Data object passed to TestRunnerPlugin methods'},
			\ {'word': 'matlab.unittest.plugins.plugindata.QualificationContext', 'info': 'Context for QualifyingPlugins'},
			\ {'word': 'matlab.unittest.plugins.plugindata.SharedTestFixturePluginData', 'info': 'Plugin data containing shared test fixture information'},
			\ {'word': 'matlab.unittest.plugins.plugindata.TestContentCreationPluginData', 'info': 'Plugin data containing test content creation information'},
			\ {'word': 'matlab.unittest.plugins.plugindata.TestSuiteRunPluginData', 'info': 'Plugin data containing selected test information'},
			\ {'word': 'matlab.unittest.plugins.QualifyingPlugin', 'info': 'Interface for plugins that perform system-wide qualifications'},
			\ {'word': 'matlab.unittest.plugins.StopOnFailuresPlugin', 'info': 'Plugin to debug test failures'},
			\ {'word': 'matlab.unittest.plugins.TAPPlugin', 'info': 'Plugin that produces Test Anything Protocol stream'},
			\ {'word': 'matlab.unittest.plugins.TAPPlugin.producingOriginalFormat', 'info': 'Construct TAPPlugin for original TAP format'},
			\ {'word': 'matlab.unittest.plugins.TAPPlugin.producingVersion13', 'info': 'Construct TAPPlugin for version 13 TAP format'},
			\ {'word': 'matlab.unittest.plugins.testreport.DOCXTestReportPlugin', 'info': 'TestReportPlugin that creates a test report in .docx format'},
			\ {'word': 'matlab.unittest.plugins.testreport.HTMLTestReportPlugin', 'info': 'TestReportPlugin that creates a test report in .html format'},
			\ {'word': 'matlab.unittest.plugins.testreport.PDFTestReportPlugin', 'info': 'TestReportPlugin that creates a test report in .pdf format'},
			\ {'word': 'matlab.unittest.plugins.TestReportPlugin', 'info': 'Plugin that produces a test result report'},
			\ {'word': 'matlab.unittest.plugins.TestReportPlugin.producingDOCX', 'info': 'Constructs plugin that produces .docx report'},
			\ {'word': 'matlab.unittest.plugins.TestReportPlugin.producingHTML', 'info': 'Constructs plugin that produces .html report'},
			\ {'word': 'matlab.unittest.plugins.TestReportPlugin.producingPDF', 'info': 'Constructs plugin that produces .pdf report'},
			\ {'word': 'matlab.unittest.plugins.TestRunnerPlugin', 'info': 'Plugin interface for extending TestRunner'},
			\ {'word': 'matlab.unittest.plugins.TestRunProgressPlugin', 'info': 'Plugin that reports test run progress'},
			\ {'word': 'matlab.unittest.plugins.ToFile', 'info': 'Output stream to write text output to file'},
			\ {'word': 'matlab.unittest.plugins.ToStandardOutput', 'info': 'Output stream to display text information to screen'},
			\ {'word': 'matlab.unittest.plugins.ToUniqueFile', 'info': 'Output stream to write text output to unique file'},
			\ {'word': 'matlab.unittest.plugins.XMLPlugin', 'info': 'Plugin that writes test results in XML format'},
			\ {'word': 'matlab.unittest.plugins.XMLPlugin.producingJUnitFormat', 'info': 'Construct plugin to write test results in XML format'},
			\ {'word': 'matlab.unittest.qualifications.Assertable', 'info': 'Qualification to validate preconditions of a test'},
			\ {'word': 'matlab.unittest.qualifications.AssertionFailedException', 'info': 'Exception used for assertion failures'},
			\ {'word': 'matlab.unittest.qualifications.Assumable', 'info': 'Qualification to filter test content'},
			\ {'word': 'matlab.unittest.qualifications.AssumptionFailedException', 'info': 'Exception used for assumption failures'},
			\ {'word': 'matlab.unittest.qualifications.ExceptionEventData', 'info': 'Event data for ExceptionThrown event listeners'},
			\ {'word': 'matlab.unittest.qualifications.FatalAssertable', 'info': 'Qualification to abort test execution'},
			\ {'word': 'matlab.unittest.qualifications.FatalAssertionFailedException', 'info': 'Exception used for fatal assertion failures'},
			\ {'word': 'matlab.unittest.qualifications.QualificationEventData', 'info': 'Event data for qualification event listeners'},
			\ {'word': 'matlab.unittest.qualifications.Verifiable', 'info': 'Qualification to produce soft failure conditions'},
			\ {'word': 'matlab.unittest.Scope', 'info': 'Test scope enumeration class'},
			\ {'word': 'matlab.unittest.selectors.AndSelector', 'info': 'Boolean conjunction of two selectors'},
			\ {'word': 'matlab.unittest.selectors.HasBaseFolder', 'info': 'Selector for TestSuite elements determined by folder'},
			\ {'word': 'matlab.unittest.selectors.HasName', 'info': 'Selector for TestSuite elements determined by name'},
			\ {'word': 'matlab.unittest.selectors.HasParameter', 'info': 'Selector for TestSuite elements determined by parameterization'},
			\ {'word': 'matlab.unittest.selectors.HasProcedureName', 'info': 'Selector for TestSuite elements determined by procedure name'},
			\ {'word': 'matlab.unittest.selectors.HasSharedTestFixture', 'info': 'Selector for TestSuite elements that use shared test fixture'},
			\ {'word': 'matlab.unittest.selectors.HasSuperclass', 'info': 'Selector for TestSuite elements determined by test class hierarchy'},
			\ {'word': 'matlab.unittest.selectors.HasTag', 'info': 'Selector for TestSuite elements determined by tag'},
			\ {'word': 'matlab.unittest.selectors.NotSelector', 'info': 'Boolean complement of selector'},
			\ {'word': 'matlab.unittest.selectors.OrSelector', 'info': 'Boolean disjunction of two selectors'},
			\ {'word': 'matlab.unittest.Test', 'info': 'Specification of a single test method'},
			\ {'word': 'matlab.unittest.TestCase', 'info': 'Superclass of all matlab.unittest test classes'},
			\ {'word': 'matlab.unittest.TestCase.forInteractiveUse', 'info': 'Create TestCase for interactive use'},
			\ {'word': 'matlab.unittest.TestResult', 'info': 'Result of running test suite'},
			\ {'word': 'matlab.unittest.TestRunner', 'info': 'Class for running tests in matlab.unittest framework'},
			\ {'word': 'matlab.unittest.TestRunner.withNoPlugins', 'info': 'Create simplest runner possible'},
			\ {'word': 'matlab.unittest.TestRunner.withTextOutput', 'info': 'Create TestRunner object for command window output'},
			\ {'word': 'matlab.unittest.TestSuite', 'info': 'Class for grouping tests to run'},
			\ {'word': 'matlab.unittest.TestSuite.fromClass', 'info': 'Create suite from TestCase class'},
			\ {'word': 'matlab.unittest.TestSuite.fromFile', 'info': 'Create TestSuite array from test file'},
			\ {'word': 'matlab.unittest.TestSuite.fromFolder', 'info': 'Create TestSuite array from all tests in folder'},
			\ {'word': 'matlab.unittest.TestSuite.fromMethod', 'info': 'Create TestSuite array from single test method'},
			\ {'word': 'matlab.unittest.TestSuite.fromName', 'info': 'Create Test object from name of test element'},
			\ {'word': 'matlab.unittest.TestSuite.fromPackage', 'info': 'Create TestSuite array from all tests in package'},
			\ {'word': 'matlab.unittest.TestSuite.fromProject', 'info': 'Create test suite array from tests in project'},
			\ {'word': 'matlab.unittest.Verbosity', 'info': 'Verbosity level enumeration class'},
			\ {'word': 'matlab.wsdl.createWSDLClient', 'info': 'Create interface to SOAP-based web service'},
			\ {'word': 'matlab.wsdl.setWSDLToolPath', 'info': 'Location of WSDL tools'},
			\ {'word': 'matlabrc', 'info': 'System administrator-defined start up script for MATLAB'},
			\ {'word': 'matlabroot', 'info': 'MATLAB root folder'},
			\ {'word': 'matlabshared.supportpkg.checkForUpdate', 'info': 'List of support packages that can be updated (Not recommended)'},
			\ {'word': 'matlabshared.supportpkg.getInstalled', 'info': 'List of installed support packages'},
			\ {'word': 'matlabshared.supportpkg.getSupportPackageRoot', 'info': 'Get root folder of support packages'},
			\ {'word': 'matlabshared.supportpkg.setSupportPackageRoot', 'info': 'Set root folder of support packages'},
			\ {'word': 'max', 'info': 'Maximum elements of an array'},
			\ {'word': 'max', 'info': 'Maximum of timeseries data'},
			\ {'word': 'maxflow', 'info': 'Maximum flow in graph'},
			\ {'word': 'MaximizeCommandWindow', 'info': 'Open Automation server window'},
			\ {'word': 'maxk', 'info': 'Find k largest elements of array'},
			\ {'word': 'maxNumCompThreads', 'info': 'Control maximum number of computational threads'},
			\ {'word': 'maxpartitions', 'info': 'Maximum number of partitions'},
			\ {'word': 'maxpartitions', 'info': 'Maximum number of partitions possible'},
			\ {'word': 'mean', 'info': 'Average or mean value of array'},
			\ {'word': 'mean', 'info': 'Mean of timeseries data'},
			\ {'word': 'median', 'info': 'Median of timeseries data'},
			\ {'word': 'median', 'info': 'Median value of array'},
			\ {'word': 'memmapfile', 'info': 'Create memory map to a file'},
			\ {'word': 'memoize', 'info': 'Add memoization semantics to function handle'},
			\ {'word': 'MemoizedFunction', 'info': 'Call memoized function and cache results'},
			\ {'word': 'memory', 'info': 'Display memory information'},
			\ {'word': 'menu', 'info': '(Not recommended) Create multiple-choice dialog box'},
			\ {'word': 'mergecats', 'info': 'Merge categories in categorical array'},
			\ {'word': 'mergevars', 'info': 'Combine table or timetable variables into multicolumn variable'},
			\ {'word': 'mesh', 'info': 'Mesh plot'},
			\ {'word': 'meshc', 'info': 'Plot a contour graph under mesh graph'},
			\ {'word': 'meshgrid', 'info': '2-D and 3-D grids'},
			\ {'word': 'meshz', 'info': 'Plot a curtain around mesh plot'},
			\ {'word': 'meta.abstractDetails', 'info': 'Find abstract methods and properties'},
			\ {'word': 'meta.ArrayDimension', 'info': 'Size information for property validation'},
			\ {'word': 'meta.class', 'info': 'Describe MATLAB class'},
			\ {'word': 'meta.class.fromName', 'info': 'Return meta.class object associated with named class'},
			\ {'word': 'meta.DynamicProperty', 'info': 'Describe dynamic property of MATLAB object'},
			\ {'word': 'meta.EnumeratedValue', 'info': 'Describe enumeration member of MATLAB class'},
			\ {'word': 'meta.event', 'info': 'Describe event of MATLAB class'},
			\ {'word': 'meta.FixedDimension', 'info': 'Fixed dimension in property size specification'},
			\ {'word': 'meta.MetaData', 'info': 'Superclass for MATLAB object metadata'},
			\ {'word': 'meta.method', 'info': 'Describe method of MATLAB class'},
			\ {'word': 'meta.package', 'info': 'Describe MATLAB package'},
			\ {'word': 'meta.package.fromName', 'info': 'Return meta.package object for specified package'},
			\ {'word': 'meta.package.getAllPackages', 'info': 'Get all top-level packages'},
			\ {'word': 'meta.property', 'info': 'Describe property of MATLAB class'},
			\ {'word': 'meta.UnrestrictedDimension', 'info': 'Unrestricted dimension in property size specification'},
			\ {'word': 'meta.Validation', 'info': 'Describes property validation'},
			\ {'word': 'metaclass', 'info': 'Obtain meta.class object'},
			\ {'word': 'methods', 'info': 'Class method names'},
			\ {'word': 'methodsview', 'info': 'View class methods'},
			\ {'word': 'mex', 'info': 'Build MEX function or engine application'},
			\ {'word': 'mex.getCompilerConfigurations', 'info': 'Get compiler configuration information for building MEX files'},
			\ {'word': 'MException', 'info': 'Capture error information'},
			\ {'word': 'MException.last', 'info': 'Return last uncaught exception'},
			\ {'word': 'mexext', 'info': 'Binary MEX file-name extension'},
			\ {'word': 'mexhost', 'info': 'Create host process for C++ MEX function'},
			\ {'word': 'mfilename', 'info': 'File name of currently running code'},
			\ {'word': 'mget', 'info': 'Download files from FTP server'},
			\ {'word': 'milliseconds', 'info': 'Duration in milliseconds'},
			\ {'word': 'min', 'info': 'Minimum elements of an array'},
			\ {'word': 'min', 'info': 'Minimum of timeseries data'},
			\ {'word': 'MinimizeCommandWindow', 'info': 'Minimize size of Automation server window'},
			\ {'word': 'mink', 'info': 'Find k smallest elements of array'},
			\ {'word': 'minres', 'info': 'Minimum residual method'},
			\ {'word': 'minspantree', 'info': 'Minimum spanning tree of graph'},
			\ {'word': 'minus', 'info': 'Subtraction'},
			\ {'word': 'minute', 'info': 'Minute number'},
			\ {'word': 'minutes', 'info': 'Duration in minutes'},
			\ {'word': 'mislocked', 'info': 'Determine if function or script is locked in memory'},
			\ {'word': 'missing', 'info': 'Create missing values'},
			\ {'word': 'mkdir', 'info': 'Make new folder'},
			\ {'word': 'mkdir', 'info': 'Make new folder on FTP server'},
			\ {'word': 'mkpp', 'info': 'Make piecewise polynomial'},
			\ {'word': 'mldivide', 'info': 'Solve systems of linear equations Ax = B for x'},
			\ {'word': 'mlint', 'info': 'Check MATLAB code files for possible problems'},
			\ {'word': 'mlintrpt', 'info': 'Run checkcode for file or folder'},
			\ {'word': 'mlock', 'info': 'Prevent clearing function or script from memory'},
			\ {'word': 'mmfileinfo', 'info': 'Information about multimedia file'},
			\ {'word': 'mod', 'info': 'Remainder after division (modulo operation)'},
			\ {'word': 'mode', 'info': 'Most frequent values in array'},
			\ {'word': 'month', 'info': 'Month number and name'},
			\ {'word': 'more', 'info': 'Control paged output in Command Window'},
			\ {'word': 'morebins', 'info': 'Increase number of histogram bins'},
			\ {'word': 'movAbsHDU', 'info': 'Move to absolute HDU number'},
			\ {'word': 'move', 'info': 'Move or resize control in parent window'},
			\ {'word': 'move', 'info': 'Move tree node'},
			\ {'word': 'movefile', 'info': 'Move or rename file or folder'},
			\ {'word': 'movegui', 'info': 'Move figure to specified location on screen'},
			\ {'word': 'movevars', 'info': 'Move variables in table or timetable'},
			\ {'word': 'movie', 'info': 'Play recorded movie frames'},
			\ {'word': 'movmad', 'info': 'Moving median absolute deviation'},
			\ {'word': 'movmax', 'info': 'Moving maximum'},
			\ {'word': 'movmean', 'info': 'Moving mean'},
			\ {'word': 'movmedian', 'info': 'Moving median'},
			\ {'word': 'movmin', 'info': 'Moving minimum'},
			\ {'word': 'movNamHDU', 'info': 'Move to first HDU having specific type and keyword values'},
			\ {'word': 'movprod', 'info': 'Moving product'},
			\ {'word': 'movRelHDU', 'info': 'Move relative number of HDUs from current HDU'},
			\ {'word': 'movstd', 'info': 'Moving standard deviation'},
			\ {'word': 'movsum', 'info': 'Moving sum'},
			\ {'word': 'movvar', 'info': 'Moving variance'},
			\ {'word': 'mpower', 'info': 'Matrix power'},
			\ {'word': 'mput', 'info': 'Upload file or folder to FTP server'},
			\ {'word': 'mrdivide', 'info': 'Solve systems of linear equations xA = B for x'},
			\ {'word': 'msgbox', 'info': 'Create message dialog box'},
			\ {'word': 'mtimes', 'info': 'Matrix multiplication'},
			\ {'word': 'mu2lin', 'info': 'Convert mu-law audio signal to linear'},
			\ {'word': 'multibandread', 'info': 'Read band-interleaved data from binary file'},
			\ {'word': 'multibandwrite', 'info': 'Write band-interleaved data to file'},
			\ {'word': 'munlock', 'info': 'Allow clearing function or script from memory'},
			\ {'word': 'mustBeFinite', 'info': 'Validate that value is finite or issue error'},
			\ {'word': 'mustBeGreaterThan', 'info': 'Validate that value is greater than another value or issue error'},
			\ {'word': 'mustBeGreaterThanOrEqual', 'info': 'Validate that value is greater than or equal to another value or issue error'},
			\ {'word': 'mustBeInteger', 'info': 'Validate that value is integer or issue error'},
			\ {'word': 'mustBeLessThan', 'info': 'Validate that value is less than another value or issue error'},
			\ {'word': 'mustBeLessThanOrEqual', 'info': 'Validate that value is less than or equal to another value or issue error'},
			\ {'word': 'mustBeMember', 'info': 'Validate that value is member of specified set'},
			\ {'word': 'mustBeNegative', 'info': 'Validate that value is negative or issue error'},
			\ {'word': 'mustBeNonempty', 'info': 'Validate that value is nonempty or issue error'},
			\ {'word': 'mustBeNonNan', 'info': 'Validate that value is nonNaN'},
			\ {'word': 'mustBeNonnegative', 'info': 'Validate that value is nonnegative or issue error'},
			\ {'word': 'mustBeNonpositive', 'info': 'Validate that value is nonpositive or issue error'},
			\ {'word': 'mustBeNonsparse', 'info': 'Validate that value is nonsparse or issue error'},
			\ {'word': 'mustBeNonzero', 'info': 'Validate that value is nonzero or issue error'},
			\ {'word': 'mustBeNumeric', 'info': 'Validate that value is numeric or issue error'},
			\ {'word': 'mustBeNumericOrLogical', 'info': 'Validate that value is numeric or logical or issue error'},
			\ {'word': 'mustBePositive', 'info': 'Validate that value is positive or issue error'},
			\ {'word': 'mustBeReal', 'info': 'Validate that value is real or issue error'},
			\ {'word': 'namelengthmax', 'info': 'Maximum identifier length'},
			\ {'word': 'NaN', 'info': 'Create array of all NaN values'},
			\ {'word': 'nargchk', 'info': 'Validate number of input arguments'},
			\ {'word': 'nargin', 'info': 'Number of function input arguments'},
			\ {'word': 'nargin', 'info': 'Number of input arguments for System object'},
			\ {'word': 'narginchk', 'info': 'Validate number of input arguments'},
			\ {'word': 'nargout', 'info': 'Number of function output arguments'},
			\ {'word': 'nargout', 'info': 'Number of output arguments for System object'},
			\ {'word': 'nargoutchk', 'info': 'Validate number of output arguments'},
			\ {'word': 'NaT', 'info': 'Not-a-Time'},
			\ {'word': 'native2unicode', 'info': 'Convert numeric bytes to Unicode character representation'},
			\ {'word': 'nccreate', 'info': 'Create variable in NetCDF file'},
			\ {'word': 'ncdisp', 'info': 'Display contents of NetCDF data source in Command Window'},
			\ {'word': 'nchoosek', 'info': 'Binomial coefficient or all combinations'},
			\ {'word': 'ncinfo', 'info': 'Return information about NetCDF data source'},
			\ {'word': 'ncread', 'info': 'Read data from variable in NetCDF data source'},
			\ {'word': 'ncreadatt', 'info': 'Read attribute value from NetCDF data source'},
			\ {'word': 'ncwrite', 'info': 'Write data to NetCDF file'},
			\ {'word': 'ncwriteatt', 'info': 'Write attribute to NetCDF file'},
			\ {'word': 'ncwriteschema', 'info': 'Add NetCDF schema definitions to NetCDF file'},
			\ {'word': 'ndgrid', 'info': 'Rectangular grid in N-D space'},
			\ {'word': 'ndims', 'info': 'Number of array dimensions'},
			\ {'word': 'ne', 'info': 'Determine inequality'},
			\ {'word': 'nearest', 'info': 'Nearest neighbors within radius'},
			\ {'word': 'nearestNeighbor', 'info': 'Closest vertex'},
			\ {'word': 'nearestNeighbor', 'info': 'Determine nearest alpha shape boundary point'},
			\ {'word': 'nearestNeighbor', 'info': '(Not recommended) Point closest to specified location'},
			\ {'word': 'nearestvertex', 'info': 'Query nearest polyshape vertex'},
			\ {'word': 'neighbors', 'info': 'Neighbors of graph node'},
			\ {'word': 'neighbors', 'info': 'Triangle or tetrahedron neighbors'},
			\ {'word': 'neighbors', 'info': '(Not recommended) Simplex neighbor information'},
			\ {'word': 'NET', 'info': 'Summary of functions in MATLAB .NET interface'},
			\ {'word': 'NET.addAssembly', 'info': 'Make .NET assembly visible to MATLAB'},
			\ {'word': 'NET.Assembly', 'info': 'Members of .NET assembly'},
			\ {'word': 'NET.convertArray', 'info': 'Convert numeric MATLAB array to .NET array'},
			\ {'word': 'NET.createArray', 'info': 'Array for nonprimitive .NET types'},
			\ {'word': 'NET.createGeneric', 'info': 'Create instance of specialized .NET generic type'},
			\ {'word': 'NET.disableAutoRelease', 'info': 'Lock .NET object representing a RunTime Callable Wrapper (COM Wrapper) so that MATLAB does not release COM object'},
			\ {'word': 'NET.enableAutoRelease', 'info': 'Unlock .NET object representing a RunTime Callable Wrapper (COM Wrapper) so that MATLAB releases COM object'},
			\ {'word': 'NET.GenericClass', 'info': 'Represent parameterized generic type definitions'},
			\ {'word': 'NET.invokeGenericMethod', 'info': 'Invoke generic method of object'},
			\ {'word': 'NET.isNETSupported', 'info': 'Check for supported Microsoft .NET Framework'},
			\ {'word': 'NET.NetException', 'info': 'Capture error information for .NET exception'},
			\ {'word': 'NET.setStaticProperty', 'info': 'Static property or field name'},
			\ {'word': 'netcdf.abort', 'info': 'Revert recent netCDF file definitions'},
			\ {'word': 'netcdf.close', 'info': 'Close netCDF file'},
			\ {'word': 'netcdf.copyAtt', 'info': 'Copy attribute to new location'},
			\ {'word': 'netcdf.create', 'info': 'Create new NetCDF dataset'},
			\ {'word': 'netcdf.defDim', 'info': 'Create netCDF dimension'},
			\ {'word': 'netcdf.defGrp', 'info': 'Create group in NetCDF file'},
			\ {'word': 'netcdf.defVar', 'info': 'Create NetCDF variable'},
			\ {'word': 'netcdf.defVarChunking', 'info': 'Define chunking behavior for NetCDF variable'},
			\ {'word': 'netcdf.defVarDeflate', 'info': 'Define compression parameters for NetCDF variable'},
			\ {'word': 'netcdf.defVarFill', 'info': 'Define fill parameters for NetCDF variable'},
			\ {'word': 'netcdf.defVarFletcher32', 'info': 'Define checksum parameters for NetCDF variable'},
			\ {'word': 'netcdf.delAtt', 'info': 'Delete netCDF attribute'},
			\ {'word': 'netcdf.endDef', 'info': 'End netCDF file define mode'},
			\ {'word': 'netcdf.getAtt', 'info': 'Return netCDF attribute'},
			\ {'word': 'netcdf.getChunkCache', 'info': 'Retrieve chunk cache settings for NetCDF library'},
			\ {'word': 'netcdf.getConstant', 'info': 'Return numeric value of named constant'},
			\ {'word': 'netcdf.getConstantNames', 'info': 'Return list of constants known to netCDF library'},
			\ {'word': 'netcdf.getVar', 'info': 'Read data from NetCDF variable'},
			\ {'word': 'netcdf.inq', 'info': 'Return information about netCDF file'},
			\ {'word': 'netcdf.inqAtt', 'info': 'Return information about netCDF attribute'},
			\ {'word': 'netcdf.inqAttID', 'info': 'Return ID of netCDF attribute'},
			\ {'word': 'netcdf.inqAttName', 'info': 'Return name of netCDF attribute'},
			\ {'word': 'netcdf.inqDim', 'info': 'Return netCDF dimension name and length'},
			\ {'word': 'netcdf.inqDimID', 'info': 'Return dimension ID'},
			\ {'word': 'netcdf.inqDimIDs', 'info': 'Retrieve list of dimension identifiers in group'},
			\ {'word': 'netcdf.inqFormat', 'info': 'Determine format of NetCDF file'},
			\ {'word': 'netcdf.inqGrpName', 'info': 'Retrieve name of group'},
			\ {'word': 'netcdf.inqGrpNameFull', 'info': 'Complete pathname of group'},
			\ {'word': 'netcdf.inqGrpParent', 'info': 'Retrieve ID of parent group.'},
			\ {'word': 'netcdf.inqGrps', 'info': 'Retrieve array of child group IDs'},
			\ {'word': 'netcdf.inqLibVers', 'info': 'Return NetCDF library version information'},
			\ {'word': 'netcdf.inqNcid', 'info': 'Return ID of named group'},
			\ {'word': 'netcdf.inqUnlimDims', 'info': 'Return list of unlimited dimensions in group'},
			\ {'word': 'netcdf.inqVar', 'info': 'Information about variable'},
			\ {'word': 'netcdf.inqVarChunking', 'info': 'Determine chunking settings for NetCDF variable'},
			\ {'word': 'netcdf.inqVarDeflate', 'info': 'Determine compression settings for NetCDF variable'},
			\ {'word': 'netcdf.inqVarFill', 'info': 'Determine values of fill parameters for NetCDF variable'},
			\ {'word': 'netcdf.inqVarFletcher32', 'info': 'Fletcher32 checksum setting for NetCDF variable'},
			\ {'word': 'netcdf.inqVarID', 'info': 'Return ID associated with variable name'},
			\ {'word': 'netcdf.inqVarIDs', 'info': 'IDs of all variables in group'},
			\ {'word': 'netcdf.open', 'info': 'Open NetCDF data source'},
			\ {'word': 'netcdf.putAtt', 'info': 'Write netCDF attribute'},
			\ {'word': 'netcdf.putVar', 'info': 'Write data to netCDF variable'},
			\ {'word': 'netcdf.reDef', 'info': 'Put open netCDF file into define mode'},
			\ {'word': 'netcdf.renameAtt', 'info': 'Change name of attribute'},
			\ {'word': 'netcdf.renameDim', 'info': 'Change name of netCDF dimension'},
			\ {'word': 'netcdf.renameVar', 'info': 'Change name of netCDF variable'},
			\ {'word': 'netcdf.setChunkCache', 'info': 'Set default chunk cache settings for NetCDF library'},
			\ {'word': 'netcdf.setDefaultFormat', 'info': 'Change default netCDF file format'},
			\ {'word': 'netcdf.setFill', 'info': 'Set netCDF fill mode'},
			\ {'word': 'netcdf.sync', 'info': 'Synchronize netCDF file to disk'},
			\ {'word': 'newline', 'info': 'Create newline character'},
			\ {'word': 'newplot', 'info': 'Determine where to draw graphics objects'},
			\ {'word': 'nextfile', 'info': 'Information on next file or file chunk'},
			\ {'word': 'nextpow2', 'info': 'Exponent of next higher power of 2'},
			\ {'word': 'nnz', 'info': 'Number of nonzero matrix elements'},
			\ {'word': 'nonzeros', 'info': 'Nonzero matrix elements'},
			\ {'word': 'norm', 'info': 'Vector and matrix norms'},
			\ {'word': 'normalize', 'info': 'Normalize data'},
			\ {'word': 'normest', 'info': '2-norm estimate'},
			\ {'word': 'not', 'info': 'Find logical NOT'},
			\ {'word': 'notebook', 'info': '(Removed) Open MATLAB Notebook in Microsoft Word software (on Microsoft Windows platforms)'},
			\ {'word': 'notify', 'info': 'Notify listeners that event is occurring'},
			\ {'word': 'now', 'info': 'Current date and time as serial date number'},
			\ {'word': 'nsidedpoly', 'info': 'Regular polygon'},
			\ {'word': 'nthroot', 'info': 'Real nth root of real numbers'},
			\ {'word': 'null', 'info': 'Null space of matrix'},
			\ {'word': 'num2cell', 'info': 'Convert array to cell array with consistently sized cells'},
			\ {'word': 'num2hex', 'info': 'Convert singles and doubles to IEEE hexadecimal strings'},
			\ {'word': 'num2ruler', 'info': 'Convert numeric data for use with specific ruler'},
			\ {'word': 'num2str', 'info': 'Convert numbers to character array'},
			\ {'word': 'numArgumentsFromSubscript', 'info': 'Number of arguments for customized indexing methods'},
			\ {'word': 'numboundaries', 'info': 'Number of polyshape boundaries'},
			\ {'word': 'numedges', 'info': 'Number of edges in graph'},
			\ {'word': 'numel', 'info': 'Number of array elements'},
			\ {'word': 'numnodes', 'info': 'Number of nodes in graph'},
			\ {'word': 'numpartitions', 'info': 'Number of datastore partitions'},
			\ {'word': 'numpartitions', 'info': 'Default number of partitions'},
			\ {'word': 'numRegions', 'info': 'Number of regions in alpha shape'},
			\ {'word': 'numsides', 'info': 'Number of polyshape sides'},
			\ {'word': 'nzmax', 'info': 'Amount of storage allocated for nonzero matrix elements'},
			\ {'word': 'ode113', 'info': 'Solve nonstiff differential equations — variable order method'},
			\ {'word': 'ode15i', 'info': 'Solve fully implicit differential equations — variable order method'},
			\ {'word': 'ode15s', 'info': 'Solve stiff differential equations and DAEs — variable order method'},
			\ {'word': 'ode23', 'info': 'Solve nonstiff differential equations — low order method'},
			\ {'word': 'ode23s', 'info': 'Solve stiff differential equations — low order method'},
			\ {'word': 'ode23t', 'info': 'Solve moderately stiff ODEs and DAEs — trapezoidal rule'},
			\ {'word': 'ode23tb', 'info': 'Solve stiff differential equations — trapezoidal rule + backward differentiation formula'},
			\ {'word': 'ode45', 'info': 'Solve nonstiff differential equations — medium order method'},
			\ {'word': 'odeget', 'info': 'Extract ODE option values'},
			\ {'word': 'odeset', 'info': 'Create or modify options structure for ODE solvers'},
			\ {'word': 'odextend', 'info': 'Extend solution to ODE'},
			\ {'word': 'onCleanup', 'info': 'Cleanup tasks upon function completion'},
			\ {'word': 'ones', 'info': 'Create array of all ones'},
			\ {'word': 'onFailure', 'info': 'Dynamically add diagnostics for test failures'},
			\ {'word': 'onFailure', 'info': 'Dynamically add diagnostics for test failures'},
			\ {'word': 'open', 'info': 'Open file for writing video data'},
			\ {'word': 'open', 'info': 'Open file in appropriate application'},
			\ {'word': 'openDiskFile', 'info': 'Open FITS file'},
			\ {'word': 'openfig', 'info': 'Open figure saved in FIG-file'},
			\ {'word': 'openFile', 'info': 'Open FITS file'},
			\ {'word': 'opengl', 'info': 'Control OpenGL rendering'},
			\ {'word': 'openProject', 'info': 'Load an existing project'},
			\ {'word': 'openvar', 'info': 'Open workspace variable in Variables editor or other graphical editing tool'},
			\ {'word': 'optimget', 'info': 'Optimization options values'},
			\ {'word': 'optimset', 'info': 'Create or modify optimization options structure'},
			\ {'word': 'or', 'info': 'Find logical OR'},
			\ {'word': 'ordeig', 'info': 'Eigenvalues of quasitriangular matrices'},
			\ {'word': 'orderfields', 'info': 'Order fields of structure array'},
			\ {'word': 'ordqz', 'info': 'Reorder eigenvalues in QZ factorization'},
			\ {'word': 'ordschur', 'info': 'Reorder eigenvalues in Schur factorization'},
			\ {'word': 'orient', 'info': 'Paper orientation for printing or saving'},
			\ {'word': 'orth', 'info': 'Orthonormal basis for range of matrix'},
			\ {'word': 'outdegree', 'info': 'Out-degree of nodes'},
			\ {'word': 'outedges', 'info': 'Outgoing edges from node'},
			\ {'word': 'outerjoin', 'info': 'Outer join between two tables or timetables'},
			\ {'word': 'outputImpl', 'info': 'Output calculation from input or internal state of System object'},
			\ {'word': 'overlaps', 'info': 'Determine whether polyshape objects overlap'},
			\ {'word': 'pack', 'info': 'Consolidate workspace memory'},
			\ {'word': 'pad', 'info': 'Add leading or trailing characters to strings'},
			\ {'word': 'padecoef', 'info': 'Padé approximation of time delays'},
			\ {'word': 'pagesetupdlg', 'info': 'Page setup dialog box'},
			\ {'word': 'pan', 'info': 'Pan view of graph interactively'},
			\ {'word': 'panInteraction', 'info': 'Pan interaction'},
			\ {'word': 'parallelplot', 'info': 'Create parallel coordinates plot'},
			\ {'word': 'pareto', 'info': 'Pareto chart'},
			\ {'word': 'parfor', 'info': 'Parallel for loop'},
			\ {'word': 'parquetDatastore', 'info': 'Datastore for collection of Parquet files'},
			\ {'word': 'parquetinfo', 'info': 'Get information about Parquet file'},
			\ {'word': 'parquetread', 'info': 'Read columnar data from a Parquet file'},
			\ {'word': 'parquetwrite', 'info': 'Write columnar data to Parquet file'},
			\ {'word': 'parse', 'info': 'Parse function inputs'},
			\ {'word': 'parse', 'info': 'Parse header field value and return as strings'},
			\ {'word': 'parseSoapResponse', 'info': 'Convert response string from SOAP (Simple Object Access Protocol) server into MATLAB types'},
			\ {'word': 'partition', 'info': 'Partition a datastore'},
			\ {'word': 'partition', 'info': 'Partition a datastore'},
			\ {'word': 'partition', 'info': 'Partition file-set object'},
			\ {'word': 'parula', 'info': 'Parula colormap array'},
			\ {'word': 'pascal', 'info': 'Pascal matrix'},
			\ {'word': 'patch', 'info': 'Create one or more filled polygons'},
			\ {'word': 'path', 'info': 'View or change search path'},
			\ {'word': 'path2rc', 'info': 'Save current search path to pathdef.m file'},
			\ {'word': 'pathsep', 'info': 'Search path separator for current platform'},
			\ {'word': 'pathtool', 'info': 'Open Set Path dialog box to view and change search path'},
			\ {'word': 'pause', 'info': 'Pause playback or recording'},
			\ {'word': 'pause', 'info': 'Stop MATLAB execution temporarily'},
			\ {'word': 'pbaspect', 'info': 'Control relative lengths of each axis'},
			\ {'word': 'pcg', 'info': 'Preconditioned conjugate gradients method'},
			\ {'word': 'pchip', 'info': 'Piecewise Cubic Hermite Interpolating Polynomial (PCHIP)'},
			\ {'word': 'pcode', 'info': 'Create protected function file'},
			\ {'word': 'pcolor', 'info': 'Pseudocolor plot'},
			\ {'word': 'pdepe', 'info': 'Solve initial-boundary value problems for parabolic-elliptic PDEs in 1-D'},
			\ {'word': 'pdeval', 'info': 'Evaluate numerical solution of PDE using output of pdepe'},
			\ {'word': 'peaks', 'info': 'Example function of two variables'},
			\ {'word': 'perimeter', 'info': 'Perimeter of 2-D alpha shape'},
			\ {'word': 'perimeter', 'info': 'Perimeter of polyshape'},
			\ {'word': 'perl', 'info': 'Call Perl script using operating system executable'},
			\ {'word': 'perms', 'info': 'All possible permutations'},
			\ {'word': 'permute', 'info': 'Permute array dimensions'},
			\ {'word': 'persistent', 'info': 'Define persistent variable'},
			\ {'word': 'pi', 'info': 'Ratio of circle''s circumference to its diameter'},
			\ {'word': 'pie', 'info': 'Pie chart'},
			\ {'word': 'pie3', 'info': '3-D pie chart'},
			\ {'word': 'pink', 'info': 'Pink colormap array'},
			\ {'word': 'pinv', 'info': 'Moore-Penrose pseudoinverse'},
			\ {'word': 'planerot', 'info': 'Givens plane rotation'},
			\ {'word': 'play', 'info': 'Play audio from audioplayer object'},
			\ {'word': 'play', 'info': 'Play audio from audiorecorder object'},
			\ {'word': 'playblocking', 'info': 'Play audio from audioplayer object, hold control until playback completes'},
			\ {'word': 'plot', 'info': '2-D line plot'},
			\ {'word': 'plot', 'info': 'Plot alpha shape'},
			\ {'word': 'plot', 'info': 'Plot graph nodes and edges'},
			\ {'word': 'plot', 'info': 'Plot polyshape'},
			\ {'word': 'plot', 'info': 'Plot timeseries'},
			\ {'word': 'plot3', 'info': '3-D point or line plot'},
			\ {'word': 'plotbrowser', 'info': 'Show or hide figure Plot Browser'},
			\ {'word': 'plotedit', 'info': 'Interactively edit and annotate plots'},
			\ {'word': 'plotmatrix', 'info': 'Scatter plot matrix'},
			\ {'word': 'plottools', 'info': 'Show or hide plot tools'},
			\ {'word': 'plotyy', 'info': '(Not recommended) Create graph with two y-axes'},
			\ {'word': 'plus', 'info': 'Addition'},
			\ {'word': 'plus', 'info': '+ (plus) operator for pointer arithmetic'},
			\ {'word': 'pointLocation', 'info': 'Triangle or tetrahedron enclosing point'},
			\ {'word': 'pointLocation', 'info': '(Not recommended) Simplex containing specified location'},
			\ {'word': 'pol2cart', 'info': 'Transform polar or cylindrical coordinates to Cartesian'},
			\ {'word': 'polar', 'info': '(Not recommended) Polar coordinate plot'},
			\ {'word': 'polaraxes', 'info': 'Create polar axes'},
			\ {'word': 'polarhistogram', 'info': 'Histogram chart in polar coordinates'},
			\ {'word': 'polarplot', 'info': 'Plot line in polar coordinates'},
			\ {'word': 'polarscatter', 'info': 'Scatter chart in polar coordinates'},
			\ {'word': 'poly', 'info': 'Polynomial with specified roots or characteristic polynomial'},
			\ {'word': 'polyarea', 'info': 'Area of polygon'},
			\ {'word': 'polybuffer', 'info': 'Create buffer around points, lines, or polyshape objects'},
			\ {'word': 'polyder', 'info': 'Polynomial differentiation'},
			\ {'word': 'polyeig', 'info': 'Polynomial eigenvalue problem'},
			\ {'word': 'polyfit', 'info': 'Polynomial curve fitting'},
			\ {'word': 'polyint', 'info': 'Polynomial integration'},
			\ {'word': 'polyshape', 'info': '2-D polygons'},
			\ {'word': 'polyval', 'info': 'Polynomial evaluation'},
			\ {'word': 'polyvalm', 'info': 'Matrix polynomial evaluation'},
			\ {'word': 'posixtime', 'info': 'Convert MATLAB datetime to POSIX time'},
			\ {'word': 'pow2', 'info': 'Base 2 power and scale floating-point numbers'},
			\ {'word': 'power', 'info': 'Element-wise power'},
			\ {'word': 'ppval', 'info': 'Evaluate piecewise polynomial'},
			\ {'word': 'predecessors', 'info': 'Node predecessors'},
			\ {'word': 'prefdir', 'info': 'Folder containing preferences, settings, history, and layout files'},
			\ {'word': 'preferences', 'info': 'Open Preferences dialog box'},
			\ {'word': 'preferredBufferSize', 'info': 'Preferred buffer size for ContentProvider'},
			\ {'word': 'preferredBufferSize', 'info': 'Preferred buffer size for GenericProvider'},
			\ {'word': 'press', 'info': 'Perform press gesture on UI component'},
			\ {'word': 'preview', 'info': 'Preview eight rows from file using import options'},
			\ {'word': 'preview', 'info': 'Subset of data in datastore'},
			\ {'word': 'primes', 'info': 'Prime numbers less than or equal to input value'},
			\ {'word': 'print', 'info': 'Print figure or save to specific file format'},
			\ {'word': 'print', 'info': 'Print text to output stream'},
			\ {'word': 'printdlg', 'info': 'Open figure Print dialog box'},
			\ {'word': 'printopt', 'info': 'Configure printer defaults'},
			\ {'word': 'printpreview', 'info': 'Open figure Print Preview dialog box'},
			\ {'word': 'prism', 'info': 'Prism colormap array'},
			\ {'word': 'processInputSpecificationChangeImpl', 'info': 'Perform actions when input size, complexity, or data type change'},
			\ {'word': 'processTunedPropertiesImpl', 'info': 'Action when tunable properties change'},
			\ {'word': 'prod', 'info': 'Product of array elements'},
			\ {'word': 'profile', 'info': 'Profile execution time for functions'},
			\ {'word': 'profsave', 'info': 'Save profile report in HTML format'},
			\ {'word': 'progress', 'info': 'Determine how much data has been read'},
			\ {'word': 'propagatedInputComplexity', 'info': 'Complexity of input during Simulink propagation'},
			\ {'word': 'propagatedInputDataType', 'info': 'Data type of input during Simulink propagation'},
			\ {'word': 'propagatedInputFixedSize', 'info': 'Fixed-size status of input during Simulink propagation'},
			\ {'word': 'propagatedInputSize', 'info': 'Size of input during Simulink propagation'},
			\ {'word': 'propedit', 'info': 'Open built-in property page for COM control'},
			\ {'word': 'propedit', 'info': 'Open Property Editor'},
			\ {'word': 'properties', 'info': 'Class property names'},
			\ {'word': 'propertyeditor', 'info': 'Show or hide Property Editor'},
			\ {'word': 'psi', 'info': 'Psi (polygamma) function'},
			\ {'word': 'publish', 'info': 'Generate view of MATLAB file in specified format'},
			\ {'word': 'PutCharArray', 'info': 'Character array in Automation server'},
			\ {'word': 'putData', 'info': 'Append next buffer of string data to response'},
			\ {'word': 'putData', 'info': 'Process next buffer of data for MultipartConsumer'},
			\ {'word': 'putData', 'info': 'Process or save next buffer of data for ContentConsumer'},
			\ {'word': 'putData', 'info': 'Save data for ImageConsumer'},
			\ {'word': 'putData', 'info': 'Save next buffer of data for BinaryConsumer'},
			\ {'word': 'putData', 'info': 'Save next buffer of data for GenericConsumer'},
			\ {'word': 'putData', 'info': 'Save next buffer of data to file for FileConsumer'},
			\ {'word': 'putData', 'info': 'Save next buffer of JSON data for JSONConsumer'},
			\ {'word': 'PutFullMatrix', 'info': 'Matrix in Automation server workspace'},
			\ {'word': 'PutWorkspaceData', 'info': 'Data in Automation server workspace'},
			\ {'word': 'pwd', 'info': 'Identify current folder'},
			\ {'word': 'pyargs', 'info': 'Create keyword argument for Python function'},
			\ {'word': 'pyversion', 'info': 'Change default version of Python interpreter'},
			\ {'word': 'qmr', 'info': 'Quasi-minimal residual method'},
			\ {'word': 'qr', 'info': 'Orthogonal-triangular decomposition'},
			\ {'word': 'qrdelete', 'info': 'Remove column or row from QR factorization'},
			\ {'word': 'qrinsert', 'info': 'Insert column or row into QR factorization'},
			\ {'word': 'qrupdate', 'info': 'Rank 1 update to QR factorization'},
			\ {'word': 'quad', 'info': '(Not recommended) Numerically evaluate integral, adaptive Simpson quadrature'},
			\ {'word': 'quad2d', 'info': 'Numerically evaluate double integral — tiled method'},
			\ {'word': 'quadgk', 'info': 'Numerically evaluate integral, adaptive Gauss-Kronrod quadrature'},
			\ {'word': 'quadl', 'info': '(Not recommended) Numerically evaluate integral, adaptive Lobatto quadrature'},
			\ {'word': 'quadv', 'info': '(Not recommended) Vectorized quadrature'},
			\ {'word': 'quarter', 'info': 'Quarter number'},
			\ {'word': 'questdlg', 'info': 'Create question dialog box'},
			\ {'word': 'Quit', 'info': 'Terminate MATLAB Automation server'},
			\ {'word': 'quit', 'info': 'Terminate MATLAB program'},
			\ {'word': 'quiver', 'info': 'Quiver or velocity plot'},
			\ {'word': 'quiver3', 'info': '3-D quiver or velocity plot'},
			\ {'word': 'qz', 'info': 'QZ factorization for generalized eigenvalues'},
			\ {'word': 'rad2deg', 'info': 'Convert angle from radians to degrees'},
			\ {'word': 'rand', 'info': 'Uniformly distributed random numbers'},
			\ {'word': 'rand (RandStream)', 'info': 'Uniformly distributed random numbers'},
			\ {'word': 'randi', 'info': 'Uniformly distributed pseudorandom integers'},
			\ {'word': 'randi (RandStream)', 'info': 'Uniformly distributed pseudorandom integers'},
			\ {'word': 'randn', 'info': 'Normally distributed random numbers'},
			\ {'word': 'randn (RandStream)', 'info': 'Normally distributed pseudorandom numbers'},
			\ {'word': 'randperm', 'info': 'Random permutation'},
			\ {'word': 'randperm (RandStream)', 'info': 'Random permutation'},
			\ {'word': 'RandStream', 'info': 'Random number stream'},
			\ {'word': 'RandStream', 'info': 'Random number stream'},
			\ {'word': 'RandStream.create', 'info': 'Create random number streams'},
			\ {'word': 'RandStream.getGlobalStream', 'info': 'Current global random number stream'},
			\ {'word': 'RandStream.list', 'info': 'Random number generator algorithms'},
			\ {'word': 'RandStream.setGlobalStream', 'info': 'Set global random number stream'},
			\ {'word': 'rank', 'info': 'Rank of matrix'},
			\ {'word': 'rat', 'info': 'Rational fraction approximation'},
			\ {'word': 'rats', 'info': 'Rational output'},
			\ {'word': 'rbbox', 'info': 'Create rubberband box for area selection'},
			\ {'word': 'rcond', 'info': 'Reciprocal condition number'},
			\ {'word': 'rdivide', 'info': 'Right array division'},
			\ {'word': 'read', 'info': 'Read data from remote host over TCP/IP'},
			\ {'word': 'read', 'info': 'Read data in datastore'},
			\ {'word': 'read', 'info': 'Read entire TIFF image'},
			\ {'word': 'read', 'info': 'Read video frame data from file'},
			\ {'word': 'read', 'info': 'Read bytes from file'},
			\ {'word': 'readall', 'info': 'Read all data in datastore'},
			\ {'word': 'readasync', 'info': 'Read data asynchronously from device'},
			\ {'word': 'readATblHdr', 'info': 'Read header information from current ASCII table'},
			\ {'word': 'readBTblHdr', 'info': 'Read header information from current binary table'},
			\ {'word': 'readCard', 'info': 'Header record of keyword'},
			\ {'word': 'readcell', 'info': 'Read cell array from file'},
			\ {'word': 'readCol', 'info': 'Read rows of ASCII or binary table column'},
			\ {'word': 'readFrame', 'info': 'Read video frame from video file'},
			\ {'word': 'readimage', 'info': 'Read specified image from datastore'},
			\ {'word': 'readImg', 'info': 'Read image data'},
			\ {'word': 'readKey', 'info': 'Keyword'},
			\ {'word': 'readKeyCmplx', 'info': 'Keyword as complex scalar value'},
			\ {'word': 'readKeyDbl', 'info': 'Keyword as double precision value'},
			\ {'word': 'readKeyLongLong', 'info': 'Keyword as int64'},
			\ {'word': 'readKeyLongStr', 'info': 'Long string value'},
			\ {'word': 'readKeyUnit', 'info': 'Physical units string from keyword'},
			\ {'word': 'readmatrix', 'info': 'Read matrix from file'},
			\ {'word': 'readRecord', 'info': 'Header record specified by number'},
			\ {'word': 'readtable', 'info': 'Create table from file'},
			\ {'word': 'readtimetable', 'info': 'Create timetable from file'},
			\ {'word': 'readvars', 'info': 'Read variables from file'},
			\ {'word': 'real', 'info': 'Real part of complex number'},
			\ {'word': 'reallog', 'info': 'Natural logarithm for nonnegative real arrays'},
			\ {'word': 'realmax', 'info': 'Largest positive floating-point number'},
			\ {'word': 'realmin', 'info': 'Smallest positive normalized floating-point number'},
			\ {'word': 'realpow', 'info': 'Array power for real-only output'},
			\ {'word': 'realsqrt', 'info': 'Square root for nonnegative real arrays'},
			\ {'word': 'record', 'info': 'Record data and event information to file'},
			\ {'word': 'record', 'info': 'Record audio to audiorecorder object'},
			\ {'word': 'recordblocking', 'info': 'Record audio to audiorecorder object, hold control until recording completes'},
			\ {'word': 'rectangle', 'info': 'Create rectangle with sharp or curved corners'},
			\ {'word': 'rectint', 'info': 'Rectangle intersection area'},
			\ {'word': 'recycle', 'info': 'Set option to move deleted files to recycle folder'},
			\ {'word': 'reducepatch', 'info': 'Reduce number of patch faces'},
			\ {'word': 'reducevolume', 'info': 'Reduce number of elements in volume data set'},
			\ {'word': 'refresh', 'info': 'Redraw current figure'},
			\ {'word': 'refreshdata', 'info': 'Refresh data in graph when data source is specified'},
			\ {'word': 'refreshSourceControl', 'info': 'Update source control status of project files'},
			\ {'word': 'regexp', 'info': 'Match regular expression (case sensitive)'},
			\ {'word': 'regexpi', 'info': 'Match regular expression (case insensitive)'},
			\ {'word': 'regexprep', 'info': 'Replace text using regular expression'},
			\ {'word': 'regexptranslate', 'info': 'Translate text into regular expression'},
			\ {'word': 'regions', 'info': 'Access polyshape regions'},
			\ {'word': 'regionZoomInteraction', 'info': 'Region-zoom interaction'},
			\ {'word': 'registerevent', 'info': 'Associate event handler for COM object event at run time'},
			\ {'word': 'regmatlabserver', 'info': 'Register current MATLAB as Automation server'},
			\ {'word': 'rehash', 'info': 'Refresh function and file system path caches'},
			\ {'word': 'relationaloperators', 'info': 'Determine equality or sort handle objects'},
			\ {'word': 'release', 'info': 'Release COM interface'},
			\ {'word': 'release', 'info': 'Release resources and allow changes to System object property values and input characteristics'},
			\ {'word': 'releaseImpl', 'info': 'Release resources'},
			\ {'word': 'reload', 'info': 'Reload project'},
			\ {'word': 'rem', 'info': 'Remainder after division'},
			\ {'word': 'Remove', 'info': 'Convenience function for static .NET System.Delegate Remove method'},
			\ {'word': 'remove', 'info': 'Delete key-value pairs from Map object'},
			\ {'word': 'RemoveAll', 'info': 'Convenience function for static .NET System.Delegate RemoveAll method'},
			\ {'word': 'removeCategory', 'info': 'Remove project category of labels'},
			\ {'word': 'removecats', 'info': 'Remove categories from categorical array'},
			\ {'word': 'removeFields', 'info': 'Remove fields from header field array'},
			\ {'word': 'removeFields', 'info': 'Remove fields from message header'},
			\ {'word': 'removeFile', 'info': 'Remove file from project'},
			\ {'word': 'removeLabel', 'info': 'Remove label from project'},
			\ {'word': 'removeParameter', 'info': 'Remove AuthInfo parameter'},
			\ {'word': 'removeParameter', 'info': 'Remove parameter from field'},
			\ {'word': 'removePath', 'info': 'Remove folder from project path'},
			\ {'word': 'removeReference', 'info': 'Remove project reference'},
			\ {'word': 'removeShortcut', 'info': 'Remove shortcut from project'},
			\ {'word': 'removeShutdownFile', 'info': 'Remove shutdown file from project shutdown list'},
			\ {'word': 'removeStartupFile', 'info': 'Remove startup file from project startup list'},
			\ {'word': 'removeToolbarExplorationButtons', 'info': 'Remove data exploration buttons from figure toolbar'},
			\ {'word': 'removets', 'info': 'Remove timeseries from tscollection'},
			\ {'word': 'removevars', 'info': 'Delete variables from table or timetable'},
			\ {'word': 'rename', 'info': 'Rename file on FTP server'},
			\ {'word': 'renamecats', 'info': 'Rename categories in categorical array'},
			\ {'word': 'rendererinfo', 'info': 'Graphics renderer information'},
			\ {'word': 'reordercats', 'info': 'Reorder categories in categorical array'},
			\ {'word': 'reordernodes', 'info': 'Reorder graph nodes'},
			\ {'word': 'repeat', 'info': 'Repeat same action multiple times'},
			\ {'word': 'repeat', 'info': 'Repeat same action multiple times'},
			\ {'word': 'repeat', 'info': 'Repeat same action multiple times'},
			\ {'word': 'repeat', 'info': 'Repeat same action multiple times'},
			\ {'word': 'repeat', 'info': 'Repeat same action multiple times'},
			\ {'word': 'repelem', 'info': 'Repeat copies of array elements'},
			\ {'word': 'replace', 'info': 'Find and replace one or more substrings'},
			\ {'word': 'replaceBetween', 'info': 'Replace substrings between start and end points'},
			\ {'word': 'replaceFields', 'info': 'Change values in or add fields to array of HeaderFields'},
			\ {'word': 'replaceFields', 'info': 'Change values in or add fields to message header'},
			\ {'word': 'repmat', 'info': 'Repeat copies of array'},
			\ {'word': 'reportFinalizedResult', 'info': 'Enable reporting of finalized TestResults'},
			\ {'word': 'resample', 'info': 'Resample timeseries time vector'},
			\ {'word': 'resample', 'info': 'Resample tscollection time vector'},
			\ {'word': 'rescale', 'info': 'Scale range of array elements'},
			\ {'word': 'reset', 'info': 'Reset datastore to initial state'},
			\ {'word': 'reset', 'info': 'Reset graphics object properties to their defaults'},
			\ {'word': 'reset', 'info': 'Reset internal states of System object'},
			\ {'word': 'reset', 'info': 'Reset the file-set object'},
			\ {'word': 'reset (RandStream)', 'info': 'Reset random number stream'},
			\ {'word': 'resetImpl', 'info': 'Reset System object states'},
			\ {'word': 'reshape', 'info': 'Reshape array'},
			\ {'word': 'reshape', 'info': 'Reshape lib.pointer array'},
			\ {'word': 'residue', 'info': 'Partial fraction expansion (partial fraction decomposition)'},
			\ {'word': 'resolve', 'info': 'Information on all files in file-set object'},
			\ {'word': 'restartable', 'info': 'Indicate whether ContentProvider is restartable'},
			\ {'word': 'restartable', 'info': 'Indicate whether GenericProvider is restartable'},
			\ {'word': 'restartable', 'info': 'Indicate whether ImageProvider is restartable'},
			\ {'word': 'restoredefaultpath', 'info': 'Restore search path to factory-installed state'},
			\ {'word': 'result', 'info': 'Result of asynchronous call to MATLAB function from Python'},
			\ {'word': 'resume', 'info': 'Resume playback or recording from paused state'},
			\ {'word': 'rethrow', 'info': 'Reissue error'},
			\ {'word': 'rethrow', 'info': 'Rethrow previously caught exception'},
			\ {'word': 'retime', 'info': 'Resample or aggregate data in timetable, and resolve duplicate or irregular times'},
			\ {'word': 'return', 'info': 'Return control to invoking function'},
			\ {'word': 'returnStoredValueWhen', 'info': 'Return stored property value'},
			\ {'word': 'reusable', 'info': 'Indicate whether ContentProvider is reusable'},
			\ {'word': 'reusable', 'info': 'Indicate whether GenericProvider is reusable'},
			\ {'word': 'reusable', 'info': 'Indicate whether ImageProvider is reusable'},
			\ {'word': 'reverse', 'info': 'Reverse order of characters in strings'},
			\ {'word': 'rgb2gray', 'info': 'Convert RGB image or colormap to grayscale'},
			\ {'word': 'rgb2hsv', 'info': 'Convert RGB colors to HSV'},
			\ {'word': 'rgb2ind', 'info': 'Convert RGB image to indexed image'},
			\ {'word': 'rgbplot', 'info': 'Plot colormap'},
			\ {'word': 'ribbon', 'info': 'Ribbon plot'},
			\ {'word': 'rlim', 'info': 'Set or query r-axis limits for polar axes'},
			\ {'word': 'rmappdata', 'info': 'Remove application-defined data'},
			\ {'word': 'rmboundary', 'info': 'Remove polyshape boundary'},
			\ {'word': 'rmdir', 'info': 'Remove folder'},
			\ {'word': 'rmdir', 'info': 'Remove folder on FTP server'},
			\ {'word': 'rmedge', 'info': 'Remove edge from graph'},
			\ {'word': 'rmfield', 'info': 'Remove fields from structure'},
			\ {'word': 'rmholes', 'info': 'Remove holes in polyshape'},
			\ {'word': 'rmmissing', 'info': 'Remove missing entries'},
			\ {'word': 'rmnode', 'info': 'Remove node from graph'},
			\ {'word': 'rmoutliers', 'info': 'Detect and remove outliers in data'},
			\ {'word': 'rmpath', 'info': 'Remove folders from search path'},
			\ {'word': 'rmpref', 'info': 'Remove custom preference'},
			\ {'word': 'rmprop', 'info': 'Remove custom properties from table or timetable'},
			\ {'word': 'rmslivers', 'info': 'Remove polyshape boundary outliers'},
			\ {'word': 'rng', 'info': 'Control random number generation'},
			\ {'word': 'roots', 'info': 'Polynomial roots'},
			\ {'word': 'rose', 'info': 'Angle histogram plot'},
			\ {'word': 'rosser', 'info': 'Classic symmetric eigenvalue test problem'},
			\ {'word': 'rot90', 'info': 'Rotate array 90 degrees'},
			\ {'word': 'rotate', 'info': 'Rotate object about specified origin and direction'},
			\ {'word': 'rotate', 'info': 'Rotate polyshape'},
			\ {'word': 'rotate3d', 'info': 'Rotate 3-D view using mouse'},
			\ {'word': 'rotateInteraction', 'info': 'Rotate interaction'},
			\ {'word': 'round', 'info': 'Round to nearest decimal or integer'},
			\ {'word': 'rowfun', 'info': 'Apply function to table or timetable rows'},
			\ {'word': 'rows2vars', 'info': 'Reorient table or timetable so that rows become variables'},
			\ {'word': 'rref', 'info': 'Reduced row echelon form (Gauss-Jordan elimination)'},
			\ {'word': 'rsf2csf', 'info': 'Convert real Schur form to complex Schur form'},
			\ {'word': 'rtickangle', 'info': 'Rotate r-axis tick labels'},
			\ {'word': 'rtickformat', 'info': 'Specify r-axis tick label format'},
			\ {'word': 'rticklabels', 'info': 'Set or query r-axis tick labels'},
			\ {'word': 'rticks', 'info': 'Set or query r-axis tick values'},
			\ {'word': 'ruler2num', 'info': 'Convert data from specific ruler to numeric data'},
			\ {'word': 'rulerPanInteraction', 'info': 'Ruler-pan interaction'},
			\ {'word': 'run', 'info': 'Run MATLAB script'},
			\ {'word': 'run', 'info': 'Run all tests in TestSuite array'},
			\ {'word': 'run', 'info': 'Run TestCase test'},
			\ {'word': 'run', 'info': 'Run TestSuite array using TestRunner object configured for text output'},
			\ {'word': 'run', 'info': 'Run time experiment on test suite'},
			\ {'word': 'runInParallel', 'info': 'Run all tests in TestSuite array in parallel'},
			\ {'word': 'runperf', 'info': 'Run set of tests for performance measurement'},
			\ {'word': 'runTest', 'info': 'Extend running of single TestSuite element'},
			\ {'word': 'runTestClass', 'info': 'Extend running of TestSuite array from same class or function'},
			\ {'word': 'runTestMethod', 'info': 'Extend running of single Test method'},
			\ {'word': 'runtests', 'info': 'Run set of tests'},
			\ {'word': 'runTestSuite', 'info': 'Extend running of TestSuite array'},
			\ {'word': 'samplefun', 'info': 'Apply function across samples of MeasurementResult array'},
			\ {'word': 'sampleSummary', 'info': 'Create table of summary statistics from MeasurementResult array'},
			\ {'word': 'satisfiedBy', 'info': 'Determine whether two values are within tolerance'},
			\ {'word': 'satisfiedBy', 'info': 'Determine whether value satisfies constraint'},
			\ {'word': 'save', 'info': 'Save workspace variables to file'},
			\ {'word': 'save', 'info': 'Serialize COM control object to file'},
			\ {'word': 'save (serial)', 'info': 'Save serial port objects and variables to file'},
			\ {'word': 'saveas', 'info': 'Save figure to specific file format'},
			\ {'word': 'savefig', 'info': 'Save figure and contents to FIG-file'},
			\ {'word': 'saveobj', 'info': 'Modify save process for object'},
			\ {'word': 'saveObjectImpl', 'info': 'Save System object in MAT file'},
			\ {'word': 'savepath', 'info': 'Save current search path'},
			\ {'word': 'scale', 'info': 'Scale polyshape'},
			\ {'word': 'scatter', 'info': 'Scatter plot'},
			\ {'word': 'scatter3', 'info': '3-D scatter plot'},
			\ {'word': 'scatteredInterpolant', 'info': 'Interpolate 2-D or 3-D scattered data'},
			\ {'word': 'scatterhistogram', 'info': 'Create scatter plot with histograms'},
			\ {'word': 'schur', 'info': 'Schur decomposition'},
			\ {'word': 'scroll', 'info': 'Scroll to location within container, list box, or tree'},
			\ {'word': 'sec', 'info': 'Secant of angle in radians'},
			\ {'word': 'secd', 'info': 'Secant of argument in degrees'},
			\ {'word': 'sech', 'info': 'Hyperbolic secant'},
			\ {'word': 'second', 'info': 'Second number'},
			\ {'word': 'seconds', 'info': 'Duration in seconds'},
			\ {'word': 'seek', 'info': 'Seek to a position in the file'},
			\ {'word': 'selectFailed', 'info': 'Return diagnostic records for failed events'},
			\ {'word': 'selectIf', 'info': 'Select test suite elements that satisfy conditions'},
			\ {'word': 'selectIncomplete', 'info': 'Return diagnostic records for incomplete events'},
			\ {'word': 'selectLogged', 'info': 'Return diagnostic records for logged events'},
			\ {'word': 'selectmoveresize', 'info': 'Select, move, resize, or copy axes and uicontrol graphics objects'},
			\ {'word': 'selectPassed', 'info': 'Return diagnostic records for passed events'},
			\ {'word': 'semilogx', 'info': 'Semilogarithmic plot'},
			\ {'word': 'semilogy', 'info': 'Semilogarithmic plot'},
			\ {'word': 'send', 'info': 'Send HTTP request message and receive response'},
			\ {'word': 'sendmail', 'info': 'Send email message to address list'},
			\ {'word': 'serial', 'info': 'Create serial port object'},
			\ {'word': 'serialbreak', 'info': 'Send break to device connected to serial port'},
			\ {'word': 'seriallist', 'info': 'List of serial ports connected to your system'},
			\ {'word': 'set', 'info': 'Set graphics object properties'},
			\ {'word': 'set', 'info': 'Set timeseries properties'},
			\ {'word': 'set', 'info': 'Set tscollection properties'},
			\ {'word': 'set', 'info': 'Set tsdata.event properties'},
			\ {'word': 'set', 'info': 'Assign specified property-name/property-value pairs'},
			\ {'word': 'set', 'info': 'Construct object to define mock property set behavior'},
			\ {'word': 'set', 'info': 'Set property values for audioplayer object'},
			\ {'word': 'set', 'info': 'Set property values for audiorecorder object'},
			\ {'word': 'set', 'info': 'Set property values for timer object'},
			\ {'word': 'set (RandStream)', 'info': 'Set random number stream property'},
			\ {'word': 'set (serial)', 'info': 'Configure or display serial port object properties'},
			\ {'word': 'setabstime', 'info': 'Set timeseries times as date character vectors'},
			\ {'word': 'setabstime', 'info': 'Set tscollection times as date character vectors'},
			\ {'word': 'setappdata', 'info': 'Store application-defined data'},
			\ {'word': 'setBscale', 'info': 'Reset image scaling'},
			\ {'word': 'setcats', 'info': 'Set categories in categorical array'},
			\ {'word': 'setCompressionType', 'info': 'Set image compression type'},
			\ {'word': 'setdatatype', 'info': 'Initialize type and size of lib.pointer object'},
			\ {'word': 'setdiff', 'info': 'Set difference of two arrays'},
			\ {'word': 'setdisp', 'info': 'Customize set method display'},
			\ {'word': 'setenv', 'info': 'Set environment variable'},
			\ {'word': 'setfield', 'info': 'Assign value to structure array field'},
			\ {'word': 'setHCompScale', 'info': 'Set scale parameter for HCOMPRESS algorithm'},
			\ {'word': 'setHCompSmooth', 'info': 'Set smoothing for images compressed with HCOMPRESS'},
			\ {'word': 'setinterpmethod', 'info': 'Set default interpolation method for timeseries object'},
			\ {'word': 'setParameter', 'info': 'Set value of AuthInfo parameter'},
			\ {'word': 'setParameter', 'info': 'Set value of media type parameter'},
			\ {'word': 'setParameter', 'info': 'Set value of parameter in field'},
			\ {'word': 'setpixelposition', 'info': 'Set component position in pixels'},
			\ {'word': 'setpref', 'info': 'Set custom preference value'},
			\ {'word': 'setProperties', 'info': 'Set property values using name-value pairs when creating System object'},
			\ {'word': 'setstr', 'info': '(Not recommended) Convert numeric values or strings into character representation'},
			\ {'word': 'setTileDim', 'info': 'Set tile dimensions'},
			\ {'word': 'settimeseriesnames', 'info': 'Rename timeseries in tscollection'},
			\ {'word': 'Setting', 'info': 'Setting object'},
			\ {'word': 'settings', 'info': 'Access the SettingsGroup root object'},
			\ {'word': 'SettingsGroup', 'info': 'Group of settings and subgroup objects'},
			\ {'word': 'setToValue', 'info': 'Construct object to define behavior when mocked property is set to specific value'},
			\ {'word': 'setTscale', 'info': 'Reset image scaling'},
			\ {'word': 'setuniformtime', 'info': 'Modify uniform timeseries time vector'},
			\ {'word': 'setup', 'info': 'Set up fixture'},
			\ {'word': 'setupImpl', 'info': 'Initialize System object'},
			\ {'word': 'setupSharedTestFixture', 'info': 'Extend setting up shared test fixture'},
			\ {'word': 'setupTestClass', 'info': 'Extend setting up test class'},
			\ {'word': 'setupTestMethod', 'info': 'Extend setting up of test method'},
			\ {'word': 'setvaropts', 'info': 'Set variable import options'},
			\ {'word': 'setvartype', 'info': 'Set variable data types'},
			\ {'word': 'setxor', 'info': 'Set exclusive OR of two arrays'},
			\ {'word': 'sgtitle', 'info': 'Add title to subplot grid'},
			\ {'word': 'shading', 'info': 'Set color shading properties'},
			\ {'word': 'sheetnames', 'info': 'Query sheet names from datastore'},
			\ {'word': 'shg', 'info': 'Show most recent graph window'},
			\ {'word': 'shiftdim', 'info': 'Shift array dimensions'},
			\ {'word': 'shortestpath', 'info': 'Shortest path between two single nodes'},
			\ {'word': 'shortestpathtree', 'info': 'Shortest path tree from node'},
			\ {'word': 'show', 'info': 'Display ContentProvider information'},
			\ {'word': 'show', 'info': 'Display or return formatted version of message'},
			\ {'word': 'show', 'info': 'Display or return formatted version of message body data'},
			\ {'word': 'show', 'info': 'Display or return human-readable version of vector of LogRecords'},
			\ {'word': 'showFiSettingsImpl', 'info': 'Fixed point data type tab visibility for System objects'},
			\ {'word': 'showplottool', 'info': 'Show or hide figure plot tool'},
			\ {'word': 'showSimulateUsingImpl', 'info': 'Visibility of Simulate using parameter'},
			\ {'word': 'shrinkfaces', 'info': 'Reduce size of patch faces'},
			\ {'word': 'shuffle', 'info': 'Shuffle files in ImageDatastore'},
			\ {'word': 'shuffle', 'info': 'Return a shuffled version of a datastore'},
			\ {'word': 'sign', 'info': 'Sign function (signum function)'},
			\ {'word': 'simplify', 'info': 'Reduce multigraph to simple graph'},
			\ {'word': 'simplify', 'info': 'Simplify polyshape boundaries'},
			\ {'word': 'sin', 'info': 'Sine of argument in radians'},
			\ {'word': 'sind', 'info': 'Sine of argument in degrees'},
			\ {'word': 'single', 'info': 'Single-precision arrays'},
			\ {'word': 'sinh', 'info': 'Hyperbolic sine'},
			\ {'word': 'sinpi', 'info': 'Compute sin(X*pi) accurately'},
			\ {'word': 'size', 'info': 'Array size'},
			\ {'word': 'size', 'info': 'Size of Map object'},
			\ {'word': 'size', 'info': 'Size of triangulation connectivity list'},
			\ {'word': 'size', 'info': 'Size of tscollection'},
			\ {'word': 'size', 'info': '(Not recommended) Size of triangulation matrix'},
			\ {'word': 'size', 'info': 'Array dimensions'},
			\ {'word': 'size (serial)', 'info': 'Size of serial port object array'},
			\ {'word': 'slice', 'info': 'Volume slice planes'},
			\ {'word': 'smooth3', 'info': 'Smooth 3-D data'},
			\ {'word': 'smoothdata', 'info': 'Smooth noisy data'},
			\ {'word': 'snapnow', 'info': 'Take snapshot of image for inclusion in published document'},
			\ {'word': 'sort', 'info': 'Sort array elements'},
			\ {'word': 'sortboundaries', 'info': 'Sort polyshape boundaries'},
			\ {'word': 'sortByFixtures', 'info': 'Reorder test suite based on shared fixtures'},
			\ {'word': 'sortregions', 'info': 'Sort polyshape regions'},
			\ {'word': 'sortrows', 'info': 'Sort rows of matrix or table'},
			\ {'word': 'sortx', 'info': 'Sort elements in heatmap row'},
			\ {'word': 'sorty', 'info': 'Sort elements in heatmap column'},
			\ {'word': 'sound', 'info': 'Convert matrix of signal data to sound'},
			\ {'word': 'soundsc', 'info': 'Scale data and play as sound'},
			\ {'word': 'spalloc', 'info': 'Allocate space for sparse matrix'},
			\ {'word': 'sparse', 'info': 'Create sparse matrix'},
			\ {'word': 'spaugment', 'info': 'Form least-squares augmented system'},
			\ {'word': 'spconvert', 'info': 'Import from sparse matrix external format'},
			\ {'word': 'spdiags', 'info': 'Extract and create sparse band and diagonal matrices'},
			\ {'word': 'specular', 'info': 'Calculate specular reflectance'},
			\ {'word': 'speye', 'info': 'Sparse identity matrix'},
			\ {'word': 'spfun', 'info': 'Apply function to nonzero sparse matrix elements'},
			\ {'word': 'sph2cart', 'info': 'Transform spherical coordinates to Cartesian'},
			\ {'word': 'sphere', 'info': 'Generate sphere'},
			\ {'word': 'spinmap', 'info': 'Rotate colormap colors'},
			\ {'word': 'spline', 'info': 'Cubic spline data interpolation'},
			\ {'word': 'split', 'info': 'Split calendar duration into numeric and duration units'},
			\ {'word': 'split', 'info': 'Split strings at delimiters'},
			\ {'word': 'splitapply', 'info': 'Split data into groups and apply function'},
			\ {'word': 'splitEachLabel', 'info': 'Split ImageDatastore labels by proportions'},
			\ {'word': 'splitlines', 'info': 'Split strings at newline characters'},
			\ {'word': 'splitvars', 'info': 'Split multicolumn variables in table or timetable'},
			\ {'word': 'spones', 'info': 'Replace nonzero sparse matrix elements with ones'},
			\ {'word': 'spparms', 'info': 'Set parameters for sparse matrix routines'},
			\ {'word': 'sprand', 'info': 'Sparse uniformly distributed random matrix'},
			\ {'word': 'sprandn', 'info': 'Sparse normally distributed random matrix'},
			\ {'word': 'sprandsym', 'info': 'Sparse symmetric random matrix'},
			\ {'word': 'sprank', 'info': 'Structural rank'},
			\ {'word': 'spreadsheetDatastore', 'info': 'Datastore for spreadsheet files'},
			\ {'word': 'spreadsheetImportOptions', 'info': 'Import options object for Spreadsheets'},
			\ {'word': 'spring', 'info': 'Spring colormap array'},
			\ {'word': 'sprintf', 'info': 'Format data into string or character vector'},
			\ {'word': 'spy', 'info': 'Visualize sparsity pattern'},
			\ {'word': 'sqrt', 'info': 'Square root'},
			\ {'word': 'sqrtm', 'info': 'Matrix square root'},
			\ {'word': 'squeeze', 'info': 'Remove dimensions of length 1'},
			\ {'word': 'ss2tf', 'info': 'Convert state-space representation to transfer function'},
			\ {'word': 'sscanf', 'info': 'Read formatted data from strings'},
			\ {'word': 'stack', 'info': 'Stack data from multiple variables into single variable'},
			\ {'word': 'stackedplot', 'info': 'Stacked plot of several variables with common x-axis'},
			\ {'word': 'stairs', 'info': 'Stairstep graph'},
			\ {'word': 'standardizeMissing', 'info': 'Insert standard missing values'},
			\ {'word': 'start', 'info': 'Start data transfer from ContentProvider'},
			\ {'word': 'start', 'info': 'Start data transfer from ImageProvider'},
			\ {'word': 'start', 'info': 'Start data transfer from JSONProvider'},
			\ {'word': 'start', 'info': 'Start data transfer from MultipartProvider'},
			\ {'word': 'start', 'info': 'Start data transfer from StringProvider'},
			\ {'word': 'start', 'info': 'Start data transfer to GenericConsumer'},
			\ {'word': 'start', 'info': 'Start data transfer to MultipartConsumer'},
			\ {'word': 'start', 'info': 'Start data transfer to StringConsumer'},
			\ {'word': 'start', 'info': 'Start HTTP data transfer to ContentConsumer'},
			\ {'word': 'start', 'info': 'Start HTTP transfer from BinaryConsumer'},
			\ {'word': 'start', 'info': 'Start timer object'},
			\ {'word': 'start', 'info': 'Start transfer of file to FileConsumer'},
			\ {'word': 'startat', 'info': 'Schedule timer to fire at specified time'},
			\ {'word': 'startMeasuring', 'info': 'Designate start of measurement boundary'},
			\ {'word': 'startsWith', 'info': 'Determine if strings start with pattern'},
			\ {'word': 'startup', 'info': 'User-defined startup script for MATLAB'},
			\ {'word': 'stats', 'info': 'Return cached values and statistics for MemoizedFunction object'},
			\ {'word': 'std', 'info': 'Standard deviation'},
			\ {'word': 'std', 'info': 'Standard deviation of timeseries data'},
			\ {'word': 'stem', 'info': 'Plot discrete sequence data'},
			\ {'word': 'stem3', 'info': 'Plot 3-D discrete sequence data'},
			\ {'word': 'step', 'info': 'Run System object algorithm'},
			\ {'word': 'stepImpl', 'info': 'System output and state update equations'},
			\ {'word': 'stlread', 'info': 'Create triangulation from STL file'},
			\ {'word': 'stlwrite', 'info': 'Create STL file from triangulation'},
			\ {'word': 'stop', 'info': 'Stop playback or recording'},
			\ {'word': 'stop', 'info': 'Stop timer object'},
			\ {'word': 'stopasync', 'info': 'Stop asynchronous read and write operations'},
			\ {'word': 'stopMeasuring', 'info': 'Designate end of measurement boundary'},
			\ {'word': 'storeValueWhen', 'info': 'Store property value'},
			\ {'word': 'str2double', 'info': 'Convert strings to double precision values'},
			\ {'word': 'str2func', 'info': 'Construct function handle from character vector'},
			\ {'word': 'str2mat', 'info': '(Not recommended) Form blank-padded character array from strings'},
			\ {'word': 'str2num', 'info': 'Convert character array or string to numeric array'},
			\ {'word': 'strcat', 'info': 'Concatenate strings horizontally'},
			\ {'word': 'strcmp', 'info': 'Compare strings'},
			\ {'word': 'strcmpi', 'info': 'Compare strings (case insensitive)'},
			\ {'word': 'stream2', 'info': 'Compute 2-D streamline data'},
			\ {'word': 'stream3', 'info': 'Compute 3-D streamline data'},
			\ {'word': 'streamline', 'info': 'Plot streamlines from 2-D or 3-D vector data'},
			\ {'word': 'streamparticles', 'info': 'Plot stream particles'},
			\ {'word': 'streamribbon', 'info': '3-D stream ribbon plot from vector volume data'},
			\ {'word': 'streamslice', 'info': 'Plot streamlines in slice planes'},
			\ {'word': 'streamtube', 'info': 'Create 3-D stream tube plot'},
			\ {'word': 'strfind', 'info': 'Find strings within other strings'},
			\ {'word': 'string', 'info': 'String array'},
			\ {'word': 'string', 'info': 'Encoded query parameter as string'},
			\ {'word': 'string', 'info': 'FormProvider Data property'},
			\ {'word': 'string', 'info': 'Show ContentProvider as string'},
			\ {'word': 'string', 'info': 'Show FileProvider as string'},
			\ {'word': 'string', 'info': 'StringProvider Data property'},
			\ {'word': 'strings', 'info': 'Create string array with no characters'},
			\ {'word': 'strip', 'info': 'Remove leading and trailing characters from stringS'},
			\ {'word': 'strjoin', 'info': 'Join strings in array'},
			\ {'word': 'strjust', 'info': 'Justify strings'},
			\ {'word': 'strlength', 'info': 'Lengths of strings'},
			\ {'word': 'strmatch', 'info': '(Not recommended) Find possible matches for string'},
			\ {'word': 'strncmp', 'info': 'Compare first n characters of strings (case sensitive)'},
			\ {'word': 'strncmpi', 'info': 'Compare first n characters of strings (case insensitive)'},
			\ {'word': 'strread', 'info': '(Not recommended) Read formatted data from string'},
			\ {'word': 'strrep', 'info': 'Find and replace substrings'},
			\ {'word': 'strsplit', 'info': 'Split string or character vector at specified delimiter'},
			\ {'word': 'strtok', 'info': 'Selected parts of strings'},
			\ {'word': 'strtrim', 'info': 'Remove leading and trailing whitespace from strings'},
			\ {'word': 'struct', 'info': 'Structure array'},
			\ {'word': 'struct2cell', 'info': 'Convert structure to cell array'},
			\ {'word': 'struct2table', 'info': 'Convert structure array to table'},
			\ {'word': 'structfun', 'info': 'Apply function to each field of scalar structure'},
			\ {'word': 'strvcat', 'info': '(Not recommended) Concatenate strings vertically'},
			\ {'word': 'sub2ind', 'info': 'Convert subscripts to linear indices'},
			\ {'word': 'subgraph', 'info': 'Extract subgraph'},
			\ {'word': 'subplot', 'info': 'Create axes in tiled positions'},
			\ {'word': 'subsasgn', 'info': 'Redefine subscripted assignment'},
			\ {'word': 'subset', 'info': 'Create subset of datastore or file-set'},
			\ {'word': 'subsindex', 'info': 'Convert object to array index'},
			\ {'word': 'subspace', 'info': 'Angle between two subspaces'},
			\ {'word': 'subsref', 'info': 'Subscripted reference'},
			\ {'word': 'substruct', 'info': 'Create structure argument for subsasgn or subsref'},
			\ {'word': 'subtract', 'info': 'Difference of two polyshape objects'},
			\ {'word': 'subvolume', 'info': 'Extract subset of volume data set'},
			\ {'word': 'successors', 'info': 'Node successors'},
			\ {'word': 'sum', 'info': 'Sum of array elements'},
			\ {'word': 'sum', 'info': 'Sum of timeseries data'},
			\ {'word': 'summary', 'info': 'Print summary of table, timetable, or categorical array'},
			\ {'word': 'summary', 'info': 'Validate library definition'},
			\ {'word': 'summer', 'info': 'Summer colormap array'},
			\ {'word': 'superclasses', 'info': 'Names of superclasses'},
			\ {'word': 'support', 'info': 'Open MathWorks Technical Support Web page'},
			\ {'word': 'supportPackageInstaller', 'info': 'Install support for third-party hardware or software (Not recommended)'},
			\ {'word': 'supports', 'info': 'Determine whether tolerance supports specified data type'},
			\ {'word': 'supportsMultipleInstanceImpl', 'info': 'Support System object in Simulink For Each subsystem'},
			\ {'word': 'surf', 'info': 'Surface plot'},
			\ {'word': 'surf2patch', 'info': 'Convert surface data to patch data'},
			\ {'word': 'surface', 'info': 'Create surface object'},
			\ {'word': 'surfaceArea', 'info': 'Surface area of 3-D alpha shape'},
			\ {'word': 'surfc', 'info': 'Contour plot under a 3-D shaded surface plot'},
			\ {'word': 'surfl', 'info': 'Surface plot with colormap-based lighting'},
			\ {'word': 'surfnorm', 'info': 'Compute and display 3-D surface normals'},
			\ {'word': 'svd', 'info': 'Singular value decomposition'},
			\ {'word': 'svds', 'info': 'Subset of singular values and vectors'},
			\ {'word': 'swapbytes', 'info': 'Swap byte ordering'},
			\ {'word': 'switch, case, otherwise', 'info': 'Execute one of several groups of statements'},
			\ {'word': 'sylvester', 'info': 'Solve Sylvester equation AX + XB = C for X'},
			\ {'word': 'symamd', 'info': 'Symmetric approximate minimum degree permutation'},
			\ {'word': 'symbfact', 'info': 'Symbolic factorization analysis'},
			\ {'word': 'symmlq', 'info': 'Symmetric LQ method'},
			\ {'word': 'symrcm', 'info': 'Sparse reverse Cuthill-McKee ordering'},
			\ {'word': 'symvar', 'info': 'Determine symbolic variables in expression'},
			\ {'word': 'synchronize', 'info': 'Synchronize and resample two timeseries objects using common time vector'},
			\ {'word': 'synchronize', 'info': 'Synchronize timetables to common time vector, and resample or aggregate data from input timetables'},
			\ {'word': 'syntax', 'info': 'Two ways to call MATLAB functions'},
			\ {'word': 'system', 'info': 'Execute operating system command and return output'},
			\ {'word': 'table', 'info': 'Table array with named variables that can contain different types'},
			\ {'word': 'table2array', 'info': 'Convert table to homogeneous array'},
			\ {'word': 'table2cell', 'info': 'Convert table to cell array'},
			\ {'word': 'table2struct', 'info': 'Convert table to structure array'},
			\ {'word': 'table2timetable', 'info': 'Convert table to timetable'},
			\ {'word': 'tabularTextDatastore', 'info': 'Datastore for tabular text files'},
			\ {'word': 'tail', 'info': 'Get bottom rows of table, timetable, or tall array'},
			\ {'word': 'tall', 'info': 'Create tall array'},
			\ {'word': 'TallDatastore', 'info': 'Datastore for checkpointing tall arrays'},
			\ {'word': 'tallrng', 'info': 'Control random number generation for tall arrays'},
			\ {'word': 'tan', 'info': 'Tangent of argument in radians'},
			\ {'word': 'tand', 'info': 'Tangent of argument in degrees'},
			\ {'word': 'tanh', 'info': 'Hyperbolic tangent'},
			\ {'word': 'tar', 'info': 'Compress files into tar file'},
			\ {'word': 'tcpclient', 'info': 'Create TCP/IP client object to communicate over TCP/IP'},
			\ {'word': 'teardown', 'info': 'Tear down fixture'},
			\ {'word': 'teardownSharedTestFixture', 'info': 'Extend tearing down shared test fixture'},
			\ {'word': 'teardownTestClass', 'info': 'Extend tearing down of test class'},
			\ {'word': 'teardownTestMethod', 'info': 'Extend tearing down of test method'},
			\ {'word': 'tempdir', 'info': 'Name of temporary folder for the system'},
			\ {'word': 'tempname', 'info': 'Unique name for temporary file'},
			\ {'word': 'testsuite', 'info': 'Create suite of tests'},
			\ {'word': 'tetramesh', 'info': 'Tetrahedron mesh plot'},
			\ {'word': 'texlabel', 'info': 'Format text with TeX characters'},
			\ {'word': 'text', 'info': 'Add text descriptions to data points'},
			\ {'word': 'textread', 'info': 'Read data from text file; write to multiple outputs'},
			\ {'word': 'textscan', 'info': 'Read formatted data from text file or string'},
			\ {'word': 'textwrap', 'info': 'Wrap text for user interface control'},
			\ {'word': 'tfqmr', 'info': 'Transpose-free quasi-minimal residual method'},
			\ {'word': 'then', 'info': 'Specify action'},
			\ {'word': 'then', 'info': 'Specify action'},
			\ {'word': 'then', 'info': 'Specify action'},
			\ {'word': 'then', 'info': 'Specify action'},
			\ {'word': 'then', 'info': 'Specify action'},
			\ {'word': 'thetalim', 'info': 'Set or query theta-axis limits for polar axes'},
			\ {'word': 'thetatickformat', 'info': 'Specify theta-axis tick label format'},
			\ {'word': 'thetaticklabels', 'info': 'Set or query theta-axis tick labels'},
			\ {'word': 'thetaticks', 'info': 'Set or query theta-axis tick values'},
			\ {'word': 'thingSpeakRead', 'info': 'Read data stored in a ThingSpeak channel'},
			\ {'word': 'thingSpeakWrite', 'info': 'Write data to a ThingSpeak channel'},
			\ {'word': 'throw', 'info': 'Throw exception'},
			\ {'word': 'throwAsCaller', 'info': 'Throw exception as if occurs within calling function'},
			\ {'word': 'throwExceptionWhen', 'info': 'Throw exception for method call or property interaction'},
			\ {'word': 'tic', 'info': 'Start stopwatch timer'},
			\ {'word': 'Tiff', 'info': 'MATLAB Gateway to LibTIFF library routines'},
			\ {'word': 'Tiff.computeStrip', 'info': 'Index number of strip containing specified coordinate'},
			\ {'word': 'Tiff.computeTile', 'info': 'Index number of tile containing specified coordinates'},
			\ {'word': 'Tiff.currentDirectory', 'info': 'Return index of current IFD'},
			\ {'word': 'Tiff.getTag', 'info': 'Value of specified tag'},
			\ {'word': 'Tiff.getTagNames', 'info': 'List of recognized TIFF tags'},
			\ {'word': 'Tiff.getVersion', 'info': 'LibTIFF library version'},
			\ {'word': 'Tiff.isTiled', 'info': 'Determine if image is tiled'},
			\ {'word': 'Tiff.lastDirectory', 'info': 'Determine if current IFD is last in file'},
			\ {'word': 'Tiff.nextDirectory', 'info': 'Make next IFD the current IFD'},
			\ {'word': 'Tiff.numberOfStrips', 'info': 'Total number of strips in image'},
			\ {'word': 'Tiff.numberOfTiles', 'info': 'Total number of tiles in image'},
			\ {'word': 'Tiff.readEncodedStrip', 'info': 'Read data from specified strip'},
			\ {'word': 'Tiff.readEncodedTile', 'info': 'Read data from specified tile'},
			\ {'word': 'Tiff.readRGBAImage', 'info': 'Read image using RGBA interface'},
			\ {'word': 'Tiff.readRGBAStrip', 'info': 'Read strip data using RGBA interface'},
			\ {'word': 'Tiff.readRGBATile', 'info': 'Read tile data using RGBA interface'},
			\ {'word': 'Tiff.rewriteDirectory', 'info': 'Write modified metadata to existing IFD'},
			\ {'word': 'Tiff.setDirectory', 'info': 'Make specified IFD the current IFD'},
			\ {'word': 'Tiff.setSubDirectory', 'info': 'Make subIFD the current IFD'},
			\ {'word': 'Tiff.setTag', 'info': 'Set value of tag'},
			\ {'word': 'Tiff.writeDirectory', 'info': 'Create new IFD and make it current IFD'},
			\ {'word': 'Tiff.writeEncodedStrip', 'info': 'Write data to specified strip'},
			\ {'word': 'Tiff.writeEncodedTile', 'info': 'Write data to specified tile'},
			\ {'word': 'time', 'info': 'Convert time of calendar duration to duration'},
			\ {'word': 'timeit', 'info': 'Measure time required to run function'},
			\ {'word': 'timeofday', 'info': 'Elapsed time since midnight for datetimes'},
			\ {'word': 'timer', 'info': 'Create object to schedule execution of MATLAB commands'},
			\ {'word': 'timerange', 'info': 'Time range for timetable row subscripting'},
			\ {'word': 'timerfind', 'info': 'Find timer object'},
			\ {'word': 'timerfindall', 'info': 'Find timer object, regardless of visibility'},
			\ {'word': 'times', 'info': 'Element-wise multiplication'},
			\ {'word': 'timeseries', 'info': 'Create timeseries object'},
			\ {'word': 'timetable', 'info': 'Timetable array with time-stamped rows and variables of different types'},
			\ {'word': 'timetable2table', 'info': 'Convert timetable to table'},
			\ {'word': 'timezones', 'info': 'List time zones'},
			\ {'word': 'title', 'info': 'Add title'},
			\ {'word': 'toc', 'info': 'Read elapsed time from stopwatch'},
			\ {'word': 'todatenum', 'info': 'Convert CDF epoch object to MATLAB serial date number'},
			\ {'word': 'toeplitz', 'info': 'Toeplitz matrix'},
			\ {'word': 'toolboxdir', 'info': 'Root folder for specified toolbox'},
			\ {'word': 'topkrows', 'info': 'Top rows in sorted order'},
			\ {'word': 'toposort', 'info': 'Topological order of directed acyclic graph'},
			\ {'word': 'trace', 'info': 'Sum of diagonal elements'},
			\ {'word': 'transclosure', 'info': 'Transitive closure'},
			\ {'word': 'transform', 'info': 'Transform datastore'},
			\ {'word': 'TransformedDatastore', 'info': 'Datastore to transform underlying datastore'},
			\ {'word': 'translate', 'info': 'Translate polyshape'},
			\ {'word': 'transpose', 'info': 'Transpose vector or matrix'},
			\ {'word': 'transreduction', 'info': 'Transitive reduction'},
			\ {'word': 'trapz', 'info': 'Trapezoidal numerical integration'},
			\ {'word': 'treelayout', 'info': 'Lay out tree or forest'},
			\ {'word': 'treeplot', 'info': 'Plot picture of tree'},
			\ {'word': 'triangulation', 'info': 'Triangulate polyshape'},
			\ {'word': 'triangulation', 'info': 'Triangulation in 2-D or 3-D'},
			\ {'word': 'tril', 'info': 'Lower triangular part of matrix'},
			\ {'word': 'trimesh', 'info': 'Triangular mesh plot'},
			\ {'word': 'triplequad', 'info': '(Not recommended) Numerically evaluate triple integral'},
			\ {'word': 'triplot', 'info': '2-D triangular plot'},
			\ {'word': 'TriRep', 'info': '(Not recommended) Triangulation representation'},
			\ {'word': 'TriRep', 'info': '(Not recommended) Triangulation representation'},
			\ {'word': 'TriScatteredInterp', 'info': '(Not recommended) Interpolate scattered data'},
			\ {'word': 'TriScatteredInterp', 'info': '(Not recommended) Interpolate scattered data'},
			\ {'word': 'trisurf', 'info': 'Triangular surface plot'},
			\ {'word': 'triu', 'info': 'Upper triangular part of matrix'},
			\ {'word': 'true', 'info': 'Logical 1 (true)'},
			\ {'word': 'try, catch', 'info': 'Execute statements and catch resulting errors'},
			\ {'word': 'tscollection', 'info': 'Create tscollection object'},
			\ {'word': 'tsdata.event', 'info': 'Create tsdata.event object'},
			\ {'word': 'tsearchn', 'info': 'N-D closest simplex search'},
			\ {'word': 'turningdist', 'info': 'Compute turning distance between polyshape objects'},
			\ {'word': 'type', 'info': 'Display contents of file'},
			\ {'word': 'type', 'info': 'Type in UI component'},
			\ {'word': 'typecast', 'info': 'Convert data types without changing underlying data'},
			\ {'word': 'tzoffset', 'info': 'Time zone offset from UTC'},
			\ {'word': 'uialert', 'info': 'Display alert dialog box'},
			\ {'word': 'uiaxes', 'info': 'Create UI axes for plots in App Designer'},
			\ {'word': 'uibutton', 'info': 'Create push button or state button component'},
			\ {'word': 'uibuttongroup', 'info': 'Create button group to manage radio buttons and toggle buttons'},
			\ {'word': 'uicheckbox', 'info': 'Create check box component'},
			\ {'word': 'uiconfirm', 'info': 'Create confirmation dialog box'},
			\ {'word': 'uicontextmenu', 'info': 'Create context menu'},
			\ {'word': 'uicontrol', 'info': 'Create user interface control'},
			\ {'word': 'uidatepicker', 'info': 'Create date picker component'},
			\ {'word': 'uidropdown', 'info': 'Create drop-down component'},
			\ {'word': 'uieditfield', 'info': 'Create text or numeric edit field component'},
			\ {'word': 'uifigure', 'info': 'Create figure for designing apps in App Designer'},
			\ {'word': 'uigauge', 'info': 'Create gauge component'},
			\ {'word': 'uigetdir', 'info': 'Open folder selection dialog box'},
			\ {'word': 'uigetfile', 'info': 'Open file selection dialog box'},
			\ {'word': 'uigetpref', 'info': 'Create dialog box that opens according to user preference'},
			\ {'word': 'uigridlayout', 'info': 'Create grid layout manager'},
			\ {'word': 'uiimage', 'info': 'Create image component'},
			\ {'word': 'uiimport', 'info': 'Import data from file'},
			\ {'word': 'uiknob', 'info': 'Create knob component'},
			\ {'word': 'uilabel', 'info': 'Create label component'},
			\ {'word': 'uilamp', 'info': 'Create lamp component'},
			\ {'word': 'uilistbox', 'info': 'Create list box component'},
			\ {'word': 'uimenu', 'info': 'Create menu or menu items'},
			\ {'word': 'uint16', 'info': '16-bit unsigned integer arrays'},
			\ {'word': 'uint32', 'info': '32-bit unsigned integer arrays'},
			\ {'word': 'uint64', 'info': '64-bit unsigned integer arrays'},
			\ {'word': 'uint8', 'info': '8-bit unsigned integer arrays'},
			\ {'word': 'uiopen', 'info': 'Open file selection dialog box and load selected file into workspace'},
			\ {'word': 'uipanel', 'info': 'Create panel container object'},
			\ {'word': 'uiprogressdlg', 'info': 'Create progress dialog box'},
			\ {'word': 'uipushtool', 'info': 'Create push button on toolbar'},
			\ {'word': 'uiputfile', 'info': 'Open dialog box for saving files'},
			\ {'word': 'uiradiobutton', 'info': 'Create radio button component'},
			\ {'word': 'uiresume', 'info': 'Resume execution of blocked program'},
			\ {'word': 'uisave', 'info': 'Open dialog box for saving variables to MAT-file'},
			\ {'word': 'uisetcolor', 'info': 'Open color picker'},
			\ {'word': 'uisetfont', 'info': 'Open font selection dialog box'},
			\ {'word': 'uisetpref', 'info': 'Manage preferences used in uigetpref'},
			\ {'word': 'uislider', 'info': 'Create slider component'},
			\ {'word': 'uispinner', 'info': 'Create spinner component'},
			\ {'word': 'uistack', 'info': 'Reorder visual stacking of UI components'},
			\ {'word': 'uiswitch', 'info': 'Create slider switch, rocker switch, or toggle switch component'},
			\ {'word': 'uitab', 'info': 'Create tabbed panel'},
			\ {'word': 'uitabgroup', 'info': 'Create container for tabbed panels'},
			\ {'word': 'uitable', 'info': 'Create table user interface component'},
			\ {'word': 'uitextarea', 'info': 'Create text area component'},
			\ {'word': 'uitogglebutton', 'info': 'Create toggle button component'},
			\ {'word': 'uitoggletool', 'info': 'Create toggle button on toolbar'},
			\ {'word': 'uitoolbar', 'info': 'Create toolbar on figure'},
			\ {'word': 'uitree', 'info': 'Create tree component'},
			\ {'word': 'uitreenode', 'info': 'Create tree node component'},
			\ {'word': 'uiwait', 'info': 'Block program execution and wait to resume'},
			\ {'word': 'uminus', 'info': 'Unary minus'},
			\ {'word': 'underlyingValue', 'info': 'Underlying numeric value for C++ enumeration object created in MATLAB'},
			\ {'word': 'undocheckout', 'info': '(Has been removed) Undo previous checkout from source control system (UNIX platforms)'},
			\ {'word': 'unicode2native', 'info': 'Convert Unicode character representation to numeric bytes'},
			\ {'word': 'union', 'info': 'Set union of two arrays'},
			\ {'word': 'union', 'info': 'Union of polyshape objects'},
			\ {'word': 'unique', 'info': 'Unique values in array'},
			\ {'word': 'uniquetol', 'info': 'Unique values within tolerance'},
			\ {'word': 'unix', 'info': 'Execute UNIX command and return output'},
			\ {'word': 'unloadlibrary', 'info': 'Unload shared C library from memory'},
			\ {'word': 'unmesh', 'info': 'Convert edge matrix to coordinate and Laplacian matrices'},
			\ {'word': 'unmkpp', 'info': 'Extract piecewise polynomial details'},
			\ {'word': 'unregisterallevents', 'info': 'Unregister all event handlers associated with COM object events'},
			\ {'word': 'unregisterevent', 'info': 'Unregister event handler associated with COM object event at run time'},
			\ {'word': 'unstack', 'info': 'Unstack data from single variable into multiple variables'},
			\ {'word': 'untar', 'info': 'Extract contents of tar file'},
			\ {'word': 'unwrap', 'info': 'Correct phase angles to produce smoother phase plots'},
			\ {'word': 'unzip', 'info': 'Extract contents of zip file'},
			\ {'word': 'updateDependencies', 'info': 'Update project dependencies'},
			\ {'word': 'updateImpl', 'info': 'Update object states based on inputs'},
			\ {'word': 'upgradePreviouslyInstalledSupportPackages', 'info': 'Get previously installed hardware support packages and optional features for the currently installed release'},
			\ {'word': 'uplus', 'info': 'Unary plus'},
			\ {'word': 'upper', 'info': 'Convert strings to uppercase'},
			\ {'word': 'urlread', 'info': 'Download URL content to character vector (not recommended)'},
			\ {'word': 'urlwrite', 'info': 'Download URL content and save to file (not recommended)'},
			\ {'word': 'usejava', 'info': 'Determine if Java feature is available'},
			\ {'word': 'userpath', 'info': 'View or change default user work folder'},
			\ {'word': 'validate', 'info': 'Validate C++ constructor definition'},
			\ {'word': 'validate', 'info': 'Validate function definition'},
			\ {'word': 'validate', 'info': 'Validate library definition'},
			\ {'word': 'validate', 'info': 'Validate method definition'},
			\ {'word': 'validateattributes', 'info': 'Check validity of array'},
			\ {'word': 'validateFunctionSignaturesJSON', 'info': 'Validate functionSignatures.json files'},
			\ {'word': 'validateInputsImpl', 'info': 'Validate inputs to System object'},
			\ {'word': 'validatePropertiesImpl', 'info': 'Validate property values of System object'},
			\ {'word': 'validatestring', 'info': 'Check validity of text'},
			\ {'word': 'ValueIterator', 'info': 'An iterator over intermediate values for use with mapreduce'},
			\ {'word': 'values', 'info': 'Return values of Map object'},
			\ {'word': 'vander', 'info': 'Vandermonde matrix'},
			\ {'word': 'var', 'info': 'Variance'},
			\ {'word': 'var', 'info': 'Variance of timeseries data'},
			\ {'word': 'varargin', 'info': 'Variable-length input argument list'},
			\ {'word': 'varargout', 'info': 'Variable-length output argument list'},
			\ {'word': 'varfun', 'info': 'Apply function to table or timetable variables'},
			\ {'word': 'vartype', 'info': 'Subscript into table or timetable by variable type'},
			\ {'word': 'vecnorm', 'info': 'Vector-wise norm'},
			\ {'word': 'vectorize', 'info': 'Vectorize expression'},
			\ {'word': 'ver', 'info': 'Version information for MathWorks products'},
			\ {'word': 'verctrl', 'info': '(Has been removed) Source control actions (Windows platforms)'},
			\ {'word': 'verifyAccessed', 'info': 'Verify that a property was accessed'},
			\ {'word': 'verifyCalled', 'info': 'Verify that a method was called with certain input values'},
			\ {'word': 'verifyClass', 'info': 'Verify exact class of specified value'},
			\ {'word': 'verifyEmpty', 'info': 'Verify value is empty'},
			\ {'word': 'verifyEqual', 'info': 'Verify value is equal to specified value'},
			\ {'word': 'verifyError', 'info': 'Verify function throws specified exception'},
			\ {'word': 'verifyFail', 'info': 'Produce unconditional verification failure'},
			\ {'word': 'verifyFalse', 'info': 'Verify value is false'},
			\ {'word': 'verifyGreaterThan', 'info': 'Verify value is greater than specified value'},
			\ {'word': 'verifyGreaterThanOrEqual', 'info': 'Verify value is greater than or equal to specified value'},
			\ {'word': 'verifyInstanceOf', 'info': 'Verify value is object of specified type'},
			\ {'word': 'verifyLength', 'info': 'Verify value has specified length'},
			\ {'word': 'verifyLessThan', 'info': 'Verify value is less than specified value'},
			\ {'word': 'verifyLessThanOrEqual', 'info': 'Verify value is less than or equal to specified value'},
			\ {'word': 'verifyMatches', 'info': 'Verify string matches specified regular expression'},
			\ {'word': 'verifyNotAccessed', 'info': 'Verify that a property was not accessed'},
			\ {'word': 'verifyNotCalled', 'info': 'Verify that a method was not called with certain input values'},
			\ {'word': 'verifyNotEmpty', 'info': 'Verify value is not empty'},
			\ {'word': 'verifyNotEqual', 'info': 'Verify value is not equal to specified value'},
			\ {'word': 'verifyNotSameHandle', 'info': 'Verify value is not handle to specified instance'},
			\ {'word': 'verifyNotSet', 'info': 'Verify that a property was not set'},
			\ {'word': 'verifyNumElements', 'info': 'Verify value has specified element count'},
			\ {'word': 'verifyReturnsTrue', 'info': 'Verify function returns true when evaluated'},
			\ {'word': 'verifySameHandle', 'info': 'Verify two values are handles to same instance'},
			\ {'word': 'verifySet', 'info': 'Verify that a property was set'},
			\ {'word': 'verifySize', 'info': 'Verify value has specified size'},
			\ {'word': 'verifySubstring', 'info': 'Verify string contains specified string'},
			\ {'word': 'verifyThat', 'info': 'Verify value meets given constraint'},
			\ {'word': 'verifyTrue', 'info': 'Verify value is true'},
			\ {'word': 'verifyUsing', 'info': 'Verify that value satisfies given constraint'},
			\ {'word': 'verifyWarning', 'info': 'Verify function issues specified warning'},
			\ {'word': 'verifyWarningFree', 'info': 'Verify function issues no warnings'},
			\ {'word': 'verLessThan', 'info': 'Compare toolbox version to specified character vector'},
			\ {'word': 'version', 'info': 'Version number for MATLAB and libraries'},
			\ {'word': 'vertcat', 'info': 'Concatenate arrays vertically'},
			\ {'word': 'vertcat', 'info': 'Vertically concatenate tscollection objects'},
			\ {'word': 'vertcat', 'info': 'Vertical concatenation for heterogeneous arrays'},
			\ {'word': 'vertexAttachments', 'info': 'Triangles or tetrahedra attached to vertex'},
			\ {'word': 'vertexAttachments', 'info': '(Not recommended) Return simplices attached to specified vertices'},
			\ {'word': 'vertexNormal', 'info': 'Triangulation vertex normal'},
			\ {'word': 'VideoReader', 'info': 'Read video files'},
			\ {'word': 'VideoWriter', 'info': 'Write video files'},
			\ {'word': 'view', 'info': 'Camera line of sight'},
			\ {'word': 'viewmtx', 'info': 'View transformation matrices'},
			\ {'word': 'visdiff', 'info': 'Compare two files or folders'},
			\ {'word': 'volume', 'info': 'Volume of 3-D alpha shape'},
			\ {'word': 'volumebounds', 'info': 'Coordinate and color limits for volume data'},
			\ {'word': 'voronoi', 'info': 'Voronoi diagram'},
			\ {'word': 'voronoiDiagram', 'info': 'Voronoi diagram of Delaunay triangulation'},
			\ {'word': 'voronoiDiagram', 'info': '(Not recommended) Voronoi diagram'},
			\ {'word': 'voronoin', 'info': 'N-D Voronoi diagram'},
			\ {'word': 'wait', 'info': 'Block command prompt until timer stops running'},
			\ {'word': 'waitbar', 'info': 'Create or update wait bar dialog box'},
			\ {'word': 'waitfor', 'info': 'Block execution and wait for condition'},
			\ {'word': 'waitforbuttonpress', 'info': 'Wait for click or key press'},
			\ {'word': 'warndlg', 'info': 'Create warning dialog box'},
			\ {'word': 'warning', 'info': 'Display warning message'},
			\ {'word': 'waterfall', 'info': 'Waterfall plot'},
			\ {'word': 'web', 'info': 'Open web page or file in browser'},
			\ {'word': 'weboptions', 'info': 'Specify parameters for RESTful web service'},
			\ {'word': 'webread', 'info': 'Read content from RESTful web service'},
			\ {'word': 'websave', 'info': 'Save content from RESTful web service to file'},
			\ {'word': 'webwrite', 'info': 'Write data to RESTful web service'},
			\ {'word': 'week', 'info': 'Week number'},
			\ {'word': 'weekday', 'info': 'Day of week'},
			\ {'word': 'what', 'info': 'List MATLAB files in folder'},
			\ {'word': 'whatsnew', 'info': 'Release Notes'},
			\ {'word': 'when', 'info': 'Specify mock object method behavior'},
			\ {'word': 'when', 'info': 'Specify mock object property access action'},
			\ {'word': 'when', 'info': 'Specify mock object property set action'},
			\ {'word': 'which', 'info': 'Locate functions and files'},
			\ {'word': 'while', 'info': 'while loop to repeat when condition is true'},
			\ {'word': 'whitebg', 'info': 'Change axes background color'},
			\ {'word': 'who', 'info': 'List variables in workspace'},
			\ {'word': 'who', 'info': 'Names of variables in MAT-file'},
			\ {'word': 'whos', 'info': 'List variables in workspace, with sizes and types'},
			\ {'word': 'whos', 'info': 'Names, sizes, and types of variables in MAT-file'},
			\ {'word': 'width', 'info': 'Number of table variables'},
			\ {'word': 'wilkinson', 'info': 'Wilkinson''s eigenvalue test matrix'},
			\ {'word': 'winopen', 'info': 'Open file in appropriate application (Windows)'},
			\ {'word': 'winqueryreg', 'info': 'Item from Windows registry'},
			\ {'word': 'winter', 'info': 'Winter colormap array'},
			\ {'word': 'withAnyInputs', 'info': 'Specify mock object method call with any number of inputs with any value'},
			\ {'word': 'withExactInputs', 'info': 'Specify mock object method call with only object as input'},
			\ {'word': 'withNargout', 'info': 'Specify mock object method call with defined number of output arguments'},
			\ {'word': 'withtol', 'info': 'Time tolerance for timetable row subscripting'},
			\ {'word': 'wordcloud', 'info': 'Create word cloud chart from text data'},
			\ {'word': 'write', 'info': 'Write data to remote host over TCP/IP'},
			\ {'word': 'write', 'info': 'Write entire image'},
			\ {'word': 'write', 'info': 'Write tall array to local and remote locations for checkpointing'},
			\ {'word': 'writecell', 'info': 'Write cell array to file'},
			\ {'word': 'writeChecksum', 'info': 'Compute and write checksum for current HDU'},
			\ {'word': 'writeCol', 'info': 'Write elements into ASCII or binary table column'},
			\ {'word': 'writeComment', 'info': 'Write or append COMMENT keyword to CHU'},
			\ {'word': 'writeDate', 'info': 'Write DATE keyword to CHU'},
			\ {'word': 'writeHistory', 'info': 'Write or append HISTORY keyword to CHU'},
			\ {'word': 'writeImg', 'info': 'Write to FITS image'},
			\ {'word': 'writeKey', 'info': 'Update or add new keyword into current HDU'},
			\ {'word': 'writeKeyUnit', 'info': 'Write physical units string'},
			\ {'word': 'writematrix', 'info': 'Write a matrix to a file'},
			\ {'word': 'writetable', 'info': 'Write table to file'},
			\ {'word': 'writetimetable', 'info': 'Write timetable to file'},
			\ {'word': 'writeVideo', 'info': 'Write video data to file'},
			\ {'word': 'xcorr', 'info': 'Cross-correlation'},
			\ {'word': 'xcov', 'info': 'Cross-covariance'},
			\ {'word': 'xlabel', 'info': 'Label x-axis'},
			\ {'word': 'xlim', 'info': 'Set or query x-axis limits'},
			\ {'word': 'xline', 'info': 'Vertical line with constant x-value'},
			\ {'word': 'xlsfinfo', 'info': 'Determine if file contains Microsoft Excel spreadsheet'},
			\ {'word': 'xlsread', 'info': '(Not recommended) Read Microsoft Excel spreadsheet file'},
			\ {'word': 'xlswrite', 'info': '(Not recommended) Write Microsoft Excel spreadsheet file'},
			\ {'word': 'xmlread', 'info': 'Read XML document and return Document Object Model node'},
			\ {'word': 'xmlwrite', 'info': 'Write XML Document Object Model node'},
			\ {'word': 'xor', 'info': 'Exclusive OR of two polyshape objects'},
			\ {'word': 'xor', 'info': 'Find logical exclusive-OR'},
			\ {'word': 'xslt', 'info': 'Transform XML document using XSLT engine'},
			\ {'word': 'xtickangle', 'info': 'Rotate x-axis tick labels'},
			\ {'word': 'xtickformat', 'info': 'Specify x-axis tick label format'},
			\ {'word': 'xticklabels', 'info': 'Set or query x-axis tick labels'},
			\ {'word': 'xticks', 'info': 'Set or query x-axis tick values'},
			\ {'word': 'year', 'info': 'Year number'},
			\ {'word': 'years', 'info': 'Duration in years'},
			\ {'word': 'ylabel', 'info': 'Label y-axis'},
			\ {'word': 'ylim', 'info': 'Set or query y-axis limits'},
			\ {'word': 'yline', 'info': 'Horizontal line with constant y-value'},
			\ {'word': 'ymd', 'info': 'Year, month, and day numbers of datetime'},
			\ {'word': 'ytickangle', 'info': 'Rotate y-axis tick labels'},
			\ {'word': 'ytickformat', 'info': 'Specify y-axis tick label format'},
			\ {'word': 'yticklabels', 'info': 'Set or query y-axis tick labels'},
			\ {'word': 'yticks', 'info': 'Set or query y-axis tick values'},
			\ {'word': 'yyaxis', 'info': 'Create chart with two y-axes'},
			\ {'word': 'yyyymmdd', 'info': 'Convert MATLAB datetime to YYYYMMDD numeric value'},
			\ {'word': 'zeros', 'info': 'Create array of all zeros'},
			\ {'word': 'zip', 'info': 'Compress files into zip file'},
			\ {'word': 'zlabel', 'info': 'Label z-axis'},
			\ {'word': 'zlim', 'info': 'Set or query z-axis limits'},
			\ {'word': 'zoom', 'info': 'Turn zooming on or off or magnify by factor'},
			\ {'word': 'zoomInteraction', 'info': 'Zoom interaction'},
			\ {'word': 'ztickangle', 'info': 'Rotate z-axis tick labels'},
			\ {'word': 'ztickformat', 'info': 'Specify z-axis tick label format'},
			\ {'word': 'zticklabels', 'info': 'Set or query z-axis tick labels'},
			\ {'word': 'zticks', 'info': 'Set or query z-axis tick values'},
			\ ]
